<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>sh1k4ku&#39;s blog</title>
  
  <subtitle>记录我的学习之路</subtitle>
  <link href="http://sh1k4ku.github.io/atom.xml" rel="self"/>
  
  <link href="http://sh1k4ku.github.io/"/>
  <updated>2021-08-28T04:31:33.118Z</updated>
  <id>http://sh1k4ku.github.io/</id>
  
  <author>
    <name>sh1k4ku</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>祥云杯</title>
    <link href="http://sh1k4ku.github.io/2021/08/21/%E7%A5%A5%E4%BA%91%E6%9D%AF/"/>
    <id>http://sh1k4ku.github.io/2021/08/21/%E7%A5%A5%E4%BA%91%E6%9D%AF/</id>
    <published>2021-08-21T04:19:38.000Z</published>
    <updated>2021-08-28T04:31:33.118Z</updated>
    
    <content type="html"><![CDATA[<p>还要再努点力。</p><span id="more"></span><h1 id="Guess"><a href="#Guess" class="headerlink" title="Guess"></a>Guess</h1><script type="math/tex; mode=display">c=g^mr^nmodn^2</script><h1 id="myRSA"><a href="#myRSA" class="headerlink" title="myRSA"></a>myRSA</h1><p>加密的关键代码:</p><script type="math/tex; mode=display">x=p^2(p+3q-1)+q^2(q+3p-1)\\y=2pq+p+q\\z\\c=m^e\; mod\;n\\∴xc+yc+z=[(p+q)^3-(p-q)^2+(p+q)]c+z\\∵ n=pq\\∴上式=[(p+q)^3-(p+q)^2+(p+q)+4n]c+z\\令p+q=a\\∴cc=(a^3-a^2+a+4n)c+z</script><p>然后就拿到了一个线性方程，其中c的系数是1500+位的，z是1040位数，c可以自己构造，这里为了让c尽可能大所以选择m1=n-1。</p><p>现在要做的是分解n，所以两边同除c，那么右边剩下1500位+16位，测试后发现<script type="math/tex">\sqrt{x+y}{3}=p+q-1</script>，那么就得到了p+q的值，再利用<script type="math/tex">p-q=\sqrt{(p+q)^2-4n}{2}</script>就可以分解pq了。</p><p>最后<script type="math/tex">ccc=(x+y)flag^e+z</script>因为x+y的位数大于z，所以两边整除x+y即可获得flag加密后的值，最后解出flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pathlib</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> gmtime</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dehash</span>(<span class="params">s,re</span>):</span></span><br><span class="line">    alphabet = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890abcdefghijklmnopqrstuvwxyz&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(s,re)</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> alphabet:</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> alphabet:</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> alphabet:</span><br><span class="line">                <span class="keyword">for</span> d <span class="keyword">in</span> alphabet:</span><br><span class="line">                    ss=a+b+c+d+s</span><br><span class="line">                    <span class="keyword">if</span>  sha256(ss.encode()).hexdigest()==re:</span><br><span class="line">                        <span class="keyword">return</span> a+b+c+d</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getpq</span>(<span class="params">c,n</span>):</span></span><br><span class="line">    c1=gmpy2.iroot(c,<span class="number">3</span>)[<span class="number">0</span>]+<span class="number">1</span><span class="comment">#c1=p+q</span></span><br><span class="line">    c2=gmpy2.iroot(c1**<span class="number">2</span>-<span class="number">4</span>*n,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> (c1+c2)//<span class="number">2</span>,(c1-c2)//<span class="number">2</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    context.log_level=<span class="string">&quot;debug&quot;</span></span><br><span class="line">    p=remote(<span class="string">&#x27;47.104.85.225&#x27;</span>,<span class="number">49877</span>)</span><br><span class="line">    p.recvuntil(<span class="string">b&quot;SHA-256(?+&quot;</span>)</span><br><span class="line">    s=p.recvuntil(<span class="string">&quot;) == &quot;</span>, drop=<span class="literal">True</span>)</span><br><span class="line">    hashre=p.recvline()[:-<span class="number">1</span>]</span><br><span class="line">    p.sendline(dehash(s.decode(),hashre.decode()))</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;n = &#x27;</span>)</span><br><span class="line">    n=<span class="built_in">int</span>(p.recvline()[:-<span class="number">1</span>])</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;e = &#x27;</span>)</span><br><span class="line">    e=<span class="built_in">int</span>(p.recvline()[:-<span class="number">1</span>])</span><br><span class="line">    p.recvline()</span><br><span class="line">    p.recvline()</span><br><span class="line">    p.recvline()</span><br><span class="line">    p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    p.recvline()</span><br><span class="line">    message=n-<span class="number">1</span></span><br><span class="line">    p.sendline(long_to_bytes(message))</span><br><span class="line">    p.recvline()</span><br><span class="line">    cc=<span class="built_in">int</span>(p.recvline()[:-<span class="number">1</span>].decode())</span><br><span class="line">    p0,q0=getpq(cc//message,n)</span><br><span class="line">    <span class="keyword">assert</span> p0*q0==n</span><br><span class="line">    p.recvline()</span><br><span class="line">    p.recvline()</span><br><span class="line">    p.recvline()</span><br><span class="line">    p.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    p.recvline()</span><br><span class="line">    p.recvline()</span><br><span class="line">    ccc=p.recvline()[:-<span class="number">1</span>].decode()</span><br><span class="line">    ccc=<span class="built_in">int</span>(ccc)</span><br><span class="line">    </span><br><span class="line">    x=p0**<span class="number">2</span> * (p0 + <span class="number">3</span>*q0 - <span class="number">1</span> ) + q0**<span class="number">2</span> * (q0 + <span class="number">3</span>*p0 - <span class="number">1</span>) </span><br><span class="line">    y=<span class="number">2</span>*p0*q0 + p0 + q0</span><br><span class="line">    flag=ccc//(x+y)</span><br><span class="line">    phi=(p0-<span class="number">1</span>)*(q0-<span class="number">1</span>)</span><br><span class="line">    d=gmpy2.invert(e,phi)</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(flag,d,n)))</span><br><span class="line">main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Random-RSA"><a href="#Random-RSA" class="headerlink" title="Random_RSA"></a>Random_RSA</h1><p>题目分成两部分，前半部分是RSA的dp、c、n模式，后半部分是生成种子后生成伪随机数，再通过Feistal网络加密dp。</p><p>这一题要使用py2来解伪随机数，获取dp后在(1,e)爆破i满足<script type="math/tex">(dp⋅e−1)%i==0(dp⋅e−1)%i==0和n%((dp⋅e−1)//i+1)==0时n%((dp⋅e−1)//i+1)==0时</script>，N成功分解，证明在大佬的博客里有。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long, long_to_bytes</span><br><span class="line"><span class="keyword">from</span> pwnlib <span class="keyword">import</span> encoders</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">e, dp, n</span>):</span></span><br><span class="line">    _ = dp * e - <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, e):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> _ % i:</span><br><span class="line">            p = _ // i + <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> n % p:</span><br><span class="line">                q = n // p</span><br><span class="line">                phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">                d = <span class="built_in">int</span>(gmpy2.invert(e, phi))</span><br><span class="line">                <span class="keyword">return</span> d</span><br><span class="line"></span><br><span class="line">n=<span class="number">81196282992606113591233615204680597645208562279327854026981376917977843644855180528227037752692498558370026353244981467900057157997462760732019372185955846507977456657760125682125104309241802108853618468491463326268016450119817181368743376919334016359137566652069490881871670703767378496685419790016705210391</span></span><br><span class="line">ct=<span class="number">61505256223993349534474550877787675500827332878941621261477860880689799960938202020614342208518869582019307850789493701589309453566095881294166336673487909221860641809622524813959284722285069755310890972255545436989082654705098907006694780949725756312169019688455553997031840488852954588581160550377081811151</span></span><br><span class="line">e=<span class="number">0x10001</span></span><br><span class="line">seeds=[<span class="number">4827</span>, <span class="number">9522</span>, <span class="number">552</span>, <span class="number">880</span>, <span class="number">7467</span>, <span class="number">7742</span>, <span class="number">9425</span>, <span class="number">4803</span>, <span class="number">6146</span>, <span class="number">4366</span>, <span class="number">1126</span>, <span class="number">4707</span>, <span class="number">1138</span>, <span class="number">2367</span>, <span class="number">1081</span>, <span class="number">5577</span>, <span class="number">4592</span>, <span class="number">5897</span>, <span class="number">4565</span>, <span class="number">2012</span>, <span class="number">2700</span>, <span class="number">1331</span>, <span class="number">9638</span>, <span class="number">7741</span>, <span class="number">50</span>, <span class="number">824</span>, <span class="number">8321</span>, <span class="number">7411</span>, <span class="number">6145</span>, <span class="number">1271</span>, <span class="number">7637</span>, <span class="number">5481</span>, <span class="number">8474</span>, <span class="number">2085</span>, <span class="number">2421</span>, <span class="number">590</span>, <span class="number">7733</span>, <span class="number">9427</span>, <span class="number">3278</span>, <span class="number">5361</span>, <span class="number">1284</span>, <span class="number">2280</span>, <span class="number">7001</span>, <span class="number">8573</span>, <span class="number">5494</span>, <span class="number">7431</span>, <span class="number">2765</span>, <span class="number">827</span>, <span class="number">102</span>, <span class="number">1419</span>, <span class="number">6528</span>, <span class="number">735</span>, <span class="number">5653</span>, <span class="number">109</span>, <span class="number">4158</span>, <span class="number">5877</span>, <span class="number">5975</span>, <span class="number">1527</span>, <span class="number">3027</span>, <span class="number">9776</span>, <span class="number">5263</span>, <span class="number">5211</span>, <span class="number">1293</span>, <span class="number">5976</span>, <span class="number">7759</span>, <span class="number">3268</span>, <span class="number">1893</span>, <span class="number">6546</span>, <span class="number">4684</span>, <span class="number">419</span>, <span class="number">8334</span>, <span class="number">7621</span>, <span class="number">1649</span>, <span class="number">6840</span>, <span class="number">2975</span>, <span class="number">8605</span>, <span class="number">5714</span>, <span class="number">2709</span>, <span class="number">1109</span>, <span class="number">358</span>, <span class="number">2858</span>, <span class="number">6868</span>, <span class="number">2442</span>, <span class="number">8431</span>, <span class="number">8316</span>, <span class="number">5446</span>, <span class="number">9356</span>, <span class="number">2817</span>, <span class="number">2941</span>, <span class="number">3177</span>, <span class="number">7388</span>, <span class="number">4149</span>, <span class="number">4634</span>, <span class="number">4316</span>, <span class="number">5377</span>, <span class="number">4327</span>, <span class="number">1774</span>, <span class="number">6613</span>, <span class="number">5728</span>, <span class="number">1751</span>, <span class="number">8478</span>, <span class="number">3132</span>, <span class="number">4680</span>, <span class="number">3308</span>, <span class="number">9769</span>, <span class="number">8341</span>, <span class="number">1627</span>, <span class="number">3501</span>, <span class="number">1046</span>, <span class="number">2609</span>, <span class="number">7190</span>, <span class="number">5706</span>, <span class="number">3627</span>, <span class="number">8867</span>, <span class="number">2458</span>, <span class="number">607</span>, <span class="number">642</span>, <span class="number">5436</span>, <span class="number">6355</span>, <span class="number">6326</span>, <span class="number">1481</span>, <span class="number">9887</span>, <span class="number">205</span>, <span class="number">5511</span>, <span class="number">537</span>, <span class="number">8576</span>, <span class="number">6376</span>, <span class="number">3619</span>, <span class="number">6609</span>, <span class="number">8473</span>, <span class="number">2139</span>, <span class="number">3889</span>, <span class="number">1309</span>, <span class="number">9878</span>, <span class="number">2182</span>, <span class="number">8572</span>, <span class="number">9275</span>, <span class="number">5235</span>, <span class="number">6989</span>, <span class="number">6592</span>, <span class="number">4618</span>, <span class="number">7883</span>, <span class="number">5702</span>, <span class="number">3999</span>, <span class="number">925</span>, <span class="number">2419</span>, <span class="number">7838</span>, <span class="number">3073</span>, <span class="number">488</span>, <span class="number">21</span>, <span class="number">3280</span>, <span class="number">9915</span>, <span class="number">3672</span>, <span class="number">579</span>]</span><br><span class="line"></span><br><span class="line">res=[<span class="number">55</span>,<span class="number">5</span>,<span class="number">183</span>,<span class="number">192</span>,<span class="number">103</span>, <span class="number">32</span>, <span class="number">211</span>, <span class="number">116</span>, <span class="number">102</span>, <span class="number">120</span>, <span class="number">118</span>, <span class="number">54</span>, <span class="number">120</span>, <span class="number">145</span>, <span class="number">185</span>, <span class="number">254</span>, <span class="number">77</span>, <span class="number">144</span>, <span class="number">70</span>, <span class="number">54</span>, <span class="number">193</span>, <span class="number">73</span>, <span class="number">64</span>, <span class="number">0</span>, <span class="number">79</span>, <span class="number">244</span>, <span class="number">190</span>, <span class="number">23</span>, <span class="number">215</span>, <span class="number">187</span>, <span class="number">53</span>, <span class="number">176</span>, <span class="number">27</span>, <span class="number">138</span>, <span class="number">42</span>, <span class="number">89</span>, <span class="number">158</span>, <span class="number">254</span>, <span class="number">159</span>, <span class="number">133</span>, <span class="number">78</span>, <span class="number">11</span>, <span class="number">155</span>, <span class="number">163</span>, <span class="number">145</span>, <span class="number">248</span>, <span class="number">14</span>, <span class="number">179</span>, <span class="number">23</span>, <span class="number">226</span>, <span class="number">220</span>, <span class="number">201</span>, <span class="number">5</span>, <span class="number">71</span>, <span class="number">241</span>, <span class="number">195</span>, <span class="number">75</span>, <span class="number">191</span>, <span class="number">237</span>, <span class="number">108</span>, <span class="number">141</span>, <span class="number">141</span>, <span class="number">185</span>, <span class="number">76</span>, <span class="number">7</span>, <span class="number">113</span>, <span class="number">191</span>, <span class="number">48</span>, <span class="number">135</span>, <span class="number">139</span>, <span class="number">100</span>, <span class="number">83</span>, <span class="number">212</span>, <span class="number">242</span>, <span class="number">21</span>, <span class="number">143</span>, <span class="number">255</span>, <span class="number">164</span>, <span class="number">146</span>, <span class="number">119</span>, <span class="number">173</span>, <span class="number">255</span>, <span class="number">140</span>, <span class="number">193</span>, <span class="number">173</span>, <span class="number">2</span>, <span class="number">224</span>, <span class="number">205</span>, <span class="number">68</span>, <span class="number">10</span>, <span class="number">77</span>, <span class="number">180</span>, <span class="number">24</span>, <span class="number">23</span>, <span class="number">196</span>, <span class="number">205</span>, <span class="number">108</span>, <span class="number">28</span>, <span class="number">243</span>, <span class="number">80</span>, <span class="number">140</span>, <span class="number">4</span>, <span class="number">98</span>, <span class="number">76</span>, <span class="number">217</span>, <span class="number">70</span>, <span class="number">208</span>, <span class="number">202</span>, <span class="number">78</span>, <span class="number">177</span>, <span class="number">124</span>, <span class="number">10</span>, <span class="number">168</span>, <span class="number">165</span>, <span class="number">223</span>, <span class="number">105</span>, <span class="number">157</span>, <span class="number">152</span>, <span class="number">48</span>, <span class="number">152</span>, <span class="number">51</span>, <span class="number">133</span>, <span class="number">190</span>, <span class="number">202</span>, <span class="number">136</span>, <span class="number">204</span>, <span class="number">44</span>, <span class="number">33</span>, <span class="number">58</span>, <span class="number">4</span>, <span class="number">196</span>, <span class="number">219</span>, <span class="number">71</span>, <span class="number">150</span>, <span class="number">68</span>, <span class="number">162</span>, <span class="number">175</span>, <span class="number">218</span>, <span class="number">173</span>, <span class="number">19</span>, <span class="number">201</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">85</span>, <span class="number">201</span>, <span class="number">24</span>, <span class="number">59</span>, <span class="number">186</span>, <span class="number">46</span>, <span class="number">130</span>, <span class="number">147</span>, <span class="number">219</span>, <span class="number">22</span>, <span class="number">81</span>]</span><br><span class="line">dp=<span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#rands=[[2, 58, 53, 122], [145, 54, 124, 244], [5, 19, 128, 192], [255, 23, 64, 242], [87, 57, 113, 194], [246, 16, 205, 162], [112, 87, 228, 95], [215, 147, 105, 64], [84, 16, 131, 38], [234, 78, 36, 46], [68, 61, 71, 146], [148, 61, 9, 0], [73, 139, 77, 32], [96, 160, 56, 160], [121, 76, 128, 17], [114, 246, 92, 200], [124, 178, 206, 60], [168, 165, 147, 26], [168, 41, 114, 68], [24, 93, 84, 2], [241, 175, 43, 88], [147, 124, 97, 153], [42, 94, 118, 45], [150, 103, 127, 52], [127, 68, 163, 62], [165, 193, 37, 89], [219, 248, 142, 59], [241, 182, 8, 35], [230, 140, 211, 146], [88, 138, 226, 2], [48, 150, 5, 56], [87, 109, 255, 135], [40, 227, 216, 65], [23, 188, 190, 10], [5, 25, 28, 64], [6, 12, 124, 108], [167, 53, 113, 124], [255, 207, 192, 158], [61, 239, 166, 5], [62, 108, 86, 181], [127, 123, 44, 64], [195, 51, 192, 30], [30, 82, 168, 95], [56, 178, 165, 146], [168, 68, 77, 239], [106, 204, 247, 226], [17, 46, 62, 114], [91, 71, 156, 134], [37, 157, 43, 182], [146, 219, 6, 42], [148, 143, 234, 161], [108, 33, 139, 255], [50, 139, 169, 157], [71, 117, 140, 25], [28, 153, 194, 26], [241, 221, 235, 243], [124, 28, 131, 141], [159, 137, 111, 184], [47, 206, 221, 11], [220, 152, 157, 88], [188, 41, 213, 97], [4, 191, 220, 10], [77, 13, 143, 248], [94, 140, 110, 122], [49, 25, 250, 226], [218, 64, 102, 109], [189, 238, 143, 66], [91, 18, 131, 8], [190, 23, 239, 190], [159, 184, 33, 72], [183, 78, 85, 208], [209, 213, 101, 102], [236, 111, 50, 220], [166, 196, 104, 233], [170, 144, 34, 10], [187, 87, 175, 183], [207, 195, 59, 104], [165, 157, 179, 179], [99, 247, 160, 153], [195, 61, 100, 79], [153, 223, 159, 165], [230, 202, 93, 184], [87, 28, 184, 35], [35, 122, 38, 244], [157, 158, 188, 163], [229, 48, 192, 222], [12, 12, 211, 192], [207, 95, 224, 255], [113, 127, 113, 137], [22, 58, 114, 143], [13, 45, 117, 144], [70, 140, 211, 131], [33, 57, 101, 42], [132, 36, 62, 129], [40, 128, 246, 124], [1, 132, 161, 250], [85, 164, 33, 133], [252, 41, 201, 32], [8, 18, 203, 247], [1, 88, 55, 101], [189, 201, 135, 186], [101, 50, 254, 125], [236, 196, 81, 39], [148, 24, 103, 127], [233, 101, 29, 253], [97, 114, 156, 64], [90, 103, 233, 91], [50, 48, 80, 251], [118, 206, 22, 93], [11, 137, 114, 174], [61, 132, 76, 247], [215, 32, 232, 61], [158, 95, 128, 90], [57, 144, 35, 228], [163, 143, 233, 107], [178, 250, 28, 80], [169, 64, 107, 225], [106, 174, 115, 207], [85, 134, 1, 21], [118, 201, 76, 172], [4, 234, 34, 22], [241, 176, 236, 122], [111, 185, 137, 127], [1, 26, 164, 255], [186, 254, 57, 117], [243, 244, 27, 32], [161, 88, 28, 80], [50, 165, 93, 17], [12, 87, 182, 216], [184, 55, 159, 63], [167, 166, 246, 123], [37, 78, 33, 235], [127, 186, 81, 58], [48, 167, 3, 239], [70, 186, 114, 13], [56, 108, 178, 154], [151, 54, 55, 235], [105, 235, 180, 105], [16, 194, 155, 98], [136, 11, 41, 39], [252, 18, 203, 79], [185, 83, 114, 170], [148, 181, 87, 223], [118, 57, 160, 97], [255, 23, 250, 181], [235, 47, 219, 228], [106, 253, 14, 44], [44, 151, 38, 143], [28, 185, 224, 134], [42, 176, 162, 122], [3, 9, 164, 158], [129, 245, 2, 235], [35, 66, 241, 92], [80, 102, 124, 36]]</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(res)):</span><br><span class="line">    random.seed(seeds[i])</span><br><span class="line">    rand=[]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        rand.append(random.randint)</span><br><span class="line">    dp+=<span class="built_in">chr</span>(res[i]^rand[i%<span class="number">4</span>]).encode()</span><br><span class="line">dp=<span class="built_in">int</span>(dp)</span><br><span class="line">d=decrypt(e,dp,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(ct,d,n)))</span><br></pre></td></tr></table></figure><h1 id="share-secret"><a href="#share-secret" class="headerlink" title="share secret"></a>share secret</h1>]]></content>
    
    
    <summary type="html">&lt;p&gt;还要再努点力。&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://sh1k4ku.github.io/categories/CTF/"/>
    
    
    <category term="RSA" scheme="http://sh1k4ku.github.io/tags/RSA/"/>
    
    <category term="random" scheme="http://sh1k4ku.github.io/tags/random/"/>
    
    <category term="paillier" scheme="http://sh1k4ku.github.io/tags/paillier/"/>
    
  </entry>
  
  <entry>
    <title>吃瓜杯</title>
    <link href="http://sh1k4ku.github.io/2021/08/19/%E5%90%83%E7%93%9C%E6%9D%AF/"/>
    <id>http://sh1k4ku.github.io/2021/08/19/%E5%90%83%E7%93%9C%E6%9D%AF/</id>
    <published>2021-08-19T12:46:11.000Z</published>
    <updated>2021-08-28T04:06:32.885Z</updated>
    
    <content type="html"><![CDATA[<p>做了下闪电五连鞭，题出的很有意思，春哥从国外比赛扒的题（<a href="https://github.com/BCACTF/bcactf-2.0">BCACTF</a>）,难度不大，结合了RSA和相似矩阵</p><span id="more"></span><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><blockquote><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">朋友们好。</span><br><span class="line"></span><br><span class="line">今天，和大家，探讨一下，怎样打RSA置换闪电鞭。</span><br><span class="line"></span><br><span class="line">要做到三点。</span><br><span class="line"></span><br><span class="line">一：要做到问题真正的放松。但是线性代数基本知识要用好。这里面，该松的松，该紧的紧。松中有紧，紧中有松。这个问题非常复杂，在这里不多说。在问题的描述中有详细的解释；</span><br><span class="line"></span><br><span class="line">二：要练好内功，你才能代码中发力，打出RSA置换劲儿。慢练，这是签到的……快练！下合上开，上合下开！所以，这个RSA置换劲儿啊……这个RSA和置换都在动啊……</span><br><span class="line"></span><br><span class="line">三：要用高维的RSA置换劲儿，才能打出RSA置换闪电鞭。因为这个鞭的劲儿，你看……是不是，你看……都是高维的啊……</span><br><span class="line"></span><br><span class="line">下面我打一个连五鞭啊……打了五鞭：一鞭，两鞭，三鞭，四鞭，五鞭。这五鞭要连次打，你看：实战时间，一定要动武，全身松好，用高维的劲，RSA置换劲儿！才能打出<span class="built_in">flag</span>，打出RSA置换闪电鞭！</span><br><span class="line"></span><br><span class="line">谢谢朋友们。</span><br></pre></td></tr></table></figure></blockquote><h1 id="1bian"><a href="#1bian" class="headerlink" title="1bian"></a>1bian</h1><h2 id="题"><a href="#题" class="headerlink" title="题"></a>题</h2> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line"></span><br><span class="line">n = 8870619487339789349033932217513908953609539651949986489986889710933094577873155191810742828503059670650154455297603719</span><br><span class="line">e = 3</span><br><span class="line"></span><br><span class="line">with open(&#x27;flag.txt&#x27;, &#x27;rb&#x27;) as f:</span><br><span class="line">    m = bytes_to_long(f.read())</span><br><span class="line"></span><br><span class="line">assert n &gt; m</span><br><span class="line"></span><br><span class="line">Zn = Zmod(n)</span><br><span class="line">P = PermutationGroupElement(&#x27;(1,6)(2,3,5)(4,7)&#x27;)</span><br><span class="line">P = Matrix(Zn, P.matrix())</span><br><span class="line"></span><br><span class="line">def encrypt(m):</span><br><span class="line">    C = (m * P) ^ e</span><br><span class="line">    return C.list()</span><br><span class="line"></span><br></pre></td></tr></table></figure><script type="math/tex; mode=display">[0, 0, 0, 0, 0, 6940158573485767169443582872275118843545217792197971962103010557916847970940437712181778807436191892307187137338300231, 0, 0, 6940158573485767169443582872275118843545217792197971962103010557916847970940437712181778807436191892307187137338300231, 0, 0, 0, 0, 0, 0, 0, 6940158573485767169443582872275118843545217792197971962103010557916847970940437712181778807436191892307187137338300231, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6940158573485767169443582872275118843545217792197971962103010557916847970940437712181778807436191892307187137338300231, 0, 0, 0, 0, 6940158573485767169443582872275118843545217792197971962103010557916847970940437712181778807436191892307187137338300231, 0, 0, 6940158573485767169443582872275118843545217792197971962103010557916847970940437712181778807436191892307187137338300231, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6940158573485767169443582872275118843545217792197971962103010557916847970940437712181778807436191892307187137338300231, 0, 0, 0]</script><h2 id="解"><a href="#解" class="headerlink" title="解"></a>解</h2><p>题目生成了一个置换群和对应的矩阵P，加密算法为</p><script type="math/tex; mode=display">C=(mP)^e=m^eP^e\\P^3同样是个置换矩阵，并且元素全为1。所以C中的元素即为c=m^3</script><p>又由于n易分解，所以就就化为了最简单的RSA</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">c=<span class="number">6940158573485767169443582872275118843545217792197971962103010557916847970940437712181778807436191892307187137338300231</span></span><br><span class="line">n = <span class="number">8870619487339789349033932217513908953609539651949986489986889710933094577873155191810742828503059670650154455297603719</span></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">a=[<span class="number">35200554341</span> , <span class="number">35592761021</span> , <span class="number">48105446183</span> , <span class="number">48479007809</span> , <span class="number">50240938337</span> , <span class="number">50769514811</span> , <span class="number">62183036099</span> , <span class="number">63345654131</span> , <span class="number">66104249843</span> , <span class="number">67515121673</span> , <span class="number">67704082961</span>]</span><br><span class="line">p=<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">   p*=i-<span class="number">1</span></span><br><span class="line">d=gmpy2.invert(e,p)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c,d,n)))</span><br><span class="line"><span class="comment">#ctfshow&#123;W4r_Dull_Eeeee_LLL3333_A_n0_F14sH_@w@&#125;</span></span><br></pre></td></tr></table></figure><h1 id="2bian"><a href="#2bian" class="headerlink" title="2bian"></a>2bian</h1><h2 id="题-1"><a href="#题-1" class="headerlink" title="题"></a>题</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">random.seed(<span class="number">0x36D</span>)</span><br><span class="line"></span><br><span class="line">n = <span class="number">3950848271664122675439855009329233027357977239695163232943132810210035583520735079984423511153607529820284200137188647</span></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    m = bytes_to_long(f.read())</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> n &gt; m</span><br><span class="line"></span><br><span class="line">Zn = Zmod(n)</span><br><span class="line">P = PermutationGroupElement(<span class="string">&#x27;(1,14,25,8,23,15)(2,22,17)(3,18,13,33,11,30,26,27,10,6,16,31,28,21,29,36,7,9)(4,35,12,32,20,5,24)(19,34)&#x27;</span>)</span><br><span class="line">P = Matrix(Zn, P.matrix())</span><br><span class="line">A = Matrix(Zn, <span class="number">36</span>, <span class="number">36</span>, <span class="keyword">lambda</span> x, y: random.randint(<span class="number">0</span>, <span class="number">0x36D</span>))</span><br><span class="line">B = A * P * A^-<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">m</span>):</span></span><br><span class="line">    C = (m * B) ^ e</span><br><span class="line">    <span class="keyword">return</span> C.<span class="built_in">list</span>()</span><br></pre></td></tr></table></figure><script type="math/tex; mode=display">A是一个随机矩阵，但随机数种子是确定的，所以A是确定的\\所以B=APA^{-1}也是确定的\\加密算法C=(mB)^e=m^eB^e\\那么CB^{-3}的元素即为m^3\\然后就化到了第一问上</script><h2 id="解-1"><a href="#解-1" class="headerlink" title="解"></a>解</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">import</span> random</span><br><span class="line"><span class="attribute">from</span> Crypto.Util.number import *</span><br><span class="line"><span class="attribute">random</span>.seed(<span class="number">0</span>x<span class="number">36</span>D)</span><br><span class="line"></span><br><span class="line"><span class="attribute">n</span> = <span class="number">3950848271664122675439855009329233027357977239695163232943132810210035583520735079984423511153607529820284200137188647</span></span><br><span class="line"><span class="attribute">e</span>=<span class="number">3</span></span><br><span class="line"><span class="attribute">Zn</span> = Zmod(n)</span><br><span class="line"><span class="attribute">P</span> = PermutationGroupElement(&#x27;(<span class="number">1</span>,<span class="number">14</span>,<span class="number">25</span>,<span class="number">8</span>,<span class="number">23</span>,<span class="number">15</span>)(<span class="number">2</span>,<span class="number">22</span>,<span class="number">17</span>)(<span class="number">3</span>,<span class="number">18</span>,<span class="number">13</span>,<span class="number">33</span>,<span class="number">11</span>,<span class="number">30</span>,<span class="number">26</span>,<span class="number">27</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">16</span>,<span class="number">31</span>,<span class="number">28</span>,<span class="number">21</span>,<span class="number">29</span>,<span class="number">36</span>,<span class="number">7</span>,<span class="number">9</span>)(<span class="number">4</span>,<span class="number">35</span>,<span class="number">12</span>,<span class="number">32</span>,<span class="number">20</span>,<span class="number">5</span>,<span class="number">24</span>)(<span class="number">19</span>,<span class="number">34</span>)&#x27;)</span><br><span class="line"><span class="attribute">P</span> = Matrix(Zn, P.matrix())</span><br><span class="line"><span class="attribute">A</span> = Matrix(Zn, <span class="number">36</span>, <span class="number">36</span>, lambda x, y: random.randint(<span class="number">0</span>, <span class="number">0</span>x<span class="number">36</span>D))</span><br><span class="line"><span class="attribute">B</span> = A * P * A^-<span class="number">1</span></span><br><span class="line"><span class="attribute">C</span>#C太太太大了，不丢了</span><br><span class="line"><span class="attribute">c</span>=<span class="number">788338113035295195878123865420815134674503086857319693837443675089195439938279689750424184012172121716196117254817680</span></span><br><span class="line"><span class="attribute">phi</span>=euler_phi(n)</span><br><span class="line"></span><br><span class="line"><span class="attribute">d</span>=inverse_mod(e,phi)</span><br><span class="line"><span class="attribute">print</span>((C*B^-<span class="number">3</span>).trace())</span><br><span class="line"><span class="attribute">print</span>(long_to_bytes(pow(c,d,n)))</span><br></pre></td></tr></table></figure><h1 id="3bian"><a href="#3bian" class="headerlink" title="3bian"></a>3bian</h1><p>之后都变成了nc题，并且能给我条件是矩阵的迹</p><h2 id="题-2"><a href="#题-2" class="headerlink" title="题"></a>题</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">random.seed(<span class="number">0x36D</span>)</span><br><span class="line"></span><br><span class="line">n = <span class="number">25126409997644048715497037905442671105116158875704245711785280791201683049008805107543997350200944348915833337286069203</span></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    m = bytes_to_long(f.read())</span><br><span class="line"><span class="keyword">assert</span> n &gt; m</span><br><span class="line"></span><br><span class="line">Zn = Zmod(n)</span><br><span class="line">P = PermutationGroupElement(<span class="string">&#x27;(1,3,6,29,25,34,22,33,10,16,7)(2,21,19,17,31,9,5,30,27,35,32,11)(4,20,28,23,18,15)(8,26,14,12)(36,24,13)&#x27;</span>)</span><br><span class="line">P = Matrix(Zn, P.matrix())</span><br><span class="line">A = Matrix(Zn, <span class="number">36</span>, <span class="number">36</span>, <span class="keyword">lambda</span> x, y: random.randint(<span class="number">0</span>, <span class="number">0x36D</span>))</span><br><span class="line">B = A * P * A^-<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">m</span>):</span></span><br><span class="line">    C = (m * B) ^ e</span><br><span class="line">    <span class="keyword">return</span> C</span><br><span class="line"></span><br><span class="line">matrix_map = &#123;<span class="string">&quot;I&quot;</span>: Matrix(Zn, matrix.identity(<span class="number">36</span>)), <span class="string">&quot;B&quot;</span>: B, <span class="string">&quot;C&quot;</span>: encrypt(m)&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">server_add</span>(<span class="params">matrix_map</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;第一个矩阵：&quot;</span>)</span><br><span class="line">    A = <span class="built_in">input</span>(<span class="string">&quot;&gt; &quot;</span>).strip()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;第二个矩阵：&quot;</span>)</span><br><span class="line">    B = <span class="built_in">input</span>(<span class="string">&quot;&gt; &quot;</span>).strip()</span><br><span class="line">    C = matrix_map[A]+matrix_map[B]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;这两个矩阵之和的迹是：<span class="subst">&#123;C.trace()&#125;</span>，迹你实在是太美~&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> C</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">server_product</span>(<span class="params">matrix_map</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;第一个矩阵：&quot;</span>)</span><br><span class="line">    A = <span class="built_in">input</span>(<span class="string">&quot;&gt; &quot;</span>).strip()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;第二个矩阵：&quot;</span>)</span><br><span class="line">    B = <span class="built_in">input</span>(<span class="string">&quot;&gt; &quot;</span>).strip()</span><br><span class="line">    C = matrix_map[A]*matrix_map[B]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;这两个矩阵之积的迹是：<span class="subst">&#123;C.trace()&#125;</span>，迹你实在是太美~&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> C</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">server_kproduct</span>(<span class="params">matrix_map</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;矩阵：&quot;</span>)</span><br><span class="line">    A = <span class="built_in">input</span>(<span class="string">&quot;&gt; &quot;</span>).strip()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;乘数：&quot;</span>)</span><br><span class="line">    k = <span class="built_in">input</span>(<span class="string">&quot;&gt; &quot;</span>).strip()</span><br><span class="line">    k = <span class="built_in">int</span>(k)</span><br><span class="line">    B = k * matrix_map[A]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;数乘结果的迹是：<span class="subst">&#123;B.trace()&#125;</span>，迹你实在是太美~&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> B</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">server_power</span>(<span class="params">matrix_map</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;矩阵：&quot;</span>)</span><br><span class="line">    A = <span class="built_in">input</span>(<span class="string">&quot;&gt; &quot;</span>).strip()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;幂次：&quot;</span>)</span><br><span class="line">    k = <span class="built_in">input</span>(<span class="string">&quot;&gt; &quot;</span>).strip()</span><br><span class="line">    k = <span class="built_in">int</span>(k)</span><br><span class="line">    B = matrix_map[A] ^ k</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;求幂结果的迹是：<span class="subst">&#123;B.trace()&#125;</span>，迹你实在是太美~&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> B</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">server_save</span>(<span class="params">A, matrix_map</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;存个小档？ (Y/N)&quot;</span>)</span><br><span class="line">    s = <span class="built_in">input</span>(<span class="string">&quot;&gt; &quot;</span>).strip().upper()</span><br><span class="line">    <span class="keyword">if</span> s == <span class="string">&quot;Y&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;运算结果叫啥名呢？&quot;</span>)</span><br><span class="line">        S = <span class="built_in">input</span>(<span class="string">&quot;&gt; &quot;</span>).strip()</span><br><span class="line">        matrix_map[S] = A</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;存上档咯！&quot;</span>)</span><br><span class="line"></span><br><span class="line">WELCOME = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">欢迎来打第三鞭！</span></span><br><span class="line"><span class="string">在这一鞭中，你可以尝试打出两个矩阵的和，积。</span></span><br><span class="line"><span class="string">或者一个矩阵的数乘，幂次。</span></span><br><span class="line"><span class="string">但是由于av50183113，所以我只会告诉你运算结果的迹，因为迹你太美。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">MENU = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">请开始你的表演：</span></span><br><span class="line"><span class="string">[S] 打印矩阵</span></span><br><span class="line"><span class="string">[+] 两矩阵相加</span></span><br><span class="line"><span class="string">[*] 两矩阵相乘</span></span><br><span class="line"><span class="string">[K] 一矩阵数乘</span></span><br><span class="line"><span class="string">[^] 一矩阵求幂</span></span><br><span class="line"><span class="string">[Q] 886</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(WELCOME)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(MENU)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        opt = <span class="built_in">input</span>(<span class="string">&quot;&gt; &quot;</span>).strip().upper()</span><br><span class="line">        <span class="keyword">if</span> (opt == <span class="string">&quot;S&quot;</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;迹你太美……baby……迹你实在是太美……&quot;</span>)</span><br><span class="line">            <span class="keyword">for</span> k, v <span class="keyword">in</span> matrix_map.items():</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;k&#125;</span>: <span class="subst">&#123;v.trace()&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> (opt == <span class="string">&quot;+&quot;</span>):</span><br><span class="line">            M = server_add(matrix_map)</span><br><span class="line">            server_save(M, matrix_map)</span><br><span class="line">        <span class="keyword">elif</span> (opt == <span class="string">&quot;*&quot;</span>):</span><br><span class="line">            M = server_product(matrix_map)</span><br><span class="line">            server_save(M, matrix_map)</span><br><span class="line">        <span class="keyword">elif</span> (opt == <span class="string">&quot;K&quot;</span>):</span><br><span class="line">            M = server_kproduct(matrix_map)</span><br><span class="line">            server_save(M, matrix_map)</span><br><span class="line">        <span class="keyword">elif</span> (opt == <span class="string">&quot;^&quot;</span>):</span><br><span class="line">            M = server_power(matrix_map)</span><br><span class="line">            server_save(M, matrix_map)</span><br><span class="line">        <span class="keyword">elif</span> (opt == <span class="string">&quot;Q&quot;</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;再见！&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;李在……赣神魔？&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;这波和闪电鞭配合得不是很好……&quot;</span>)</span><br></pre></td></tr></table></figure><p>端口那边初始储存了三个矩阵，B、C和I，I即单位矩阵，能够进行矩阵相加、相乘、数乘、求幂、展示的操作并且给出的是结果矩阵的迹，也就是对角线上元素的和</p><h2 id="我的解"><a href="#我的解" class="headerlink" title="我的解"></a>我的解</h2><p>由第二问可以知道，得到的<script type="math/tex">C*B^{-3}</script>的是一个对角阵，而且对角线上的元素全为<script type="math/tex">m^3</script>，已知矩阵是36x36的大小，所以迹=36*c，然后就可以解出m了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">random.seed(<span class="number">0x36D</span>)</span><br><span class="line"></span><br><span class="line">n = <span class="number">25126409997644048715497037905442671105116158875704245711785280791201683049008805107543997350200944348915833337286069203</span></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">Zn = Zmod(n)</span><br><span class="line">P = PermutationGroupElement(<span class="string">&#x27;(1,3,6,29,25,34,22,33,10,16,7)(2,21,19,17,31,9,5,30,27,35,32,11)(4,20,28,23,18,15)(8,26,14,12)(36,24,13)&#x27;</span>)</span><br><span class="line">P = Matrix(Zn, P.matrix())</span><br><span class="line">A = Matrix(Zn, <span class="number">36</span>, <span class="number">36</span>, <span class="keyword">lambda</span> x, y: random.randint(<span class="number">0</span>, <span class="number">0x36D</span>))</span><br><span class="line">B = A * P * A^-<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>((P^<span class="number">12</span>).trace())</span><br><span class="line">D=B^<span class="number">3</span></span><br><span class="line"></span><br><span class="line">c=(<span class="number">9857562962643282087288501924102632185114609865442470151120627871503036282427052725871725631485463201834546369527295236</span>*inverse_mod(<span class="number">36</span>,n))%n</span><br><span class="line">phi=euler_phi(n)</span><br><span class="line">d=inverse_mod(e,phi)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c,d,n)))</span><br></pre></td></tr></table></figure><h2 id="出题人的wp"><a href="#出题人的wp" class="headerlink" title="出题人的wp"></a>出题人的wp</h2><p><img src="/images/%E5%90%83%E7%93%9C%E6%9D%AF/3bian1.png" alt="出题人想法"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># Put the trace of the cipher here</span></span><br><span class="line">tr = <span class="number">14813573939127972566346276778703360636838383920024039547829404416974023159738670520401495234532257783312488372282988720</span></span><br><span class="line"><span class="comment"># 3 * m^3</span></span><br><span class="line">n = <span class="number">25126409997644048715497037905442671105116158875704245711785280791201683049008805107543997350200944348915833337286069203</span></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">fac = factor(n)</span><br><span class="line">cs = []</span><br><span class="line">ns = []</span><br><span class="line"><span class="keyword">for</span> p, alpha <span class="keyword">in</span> fac:    </span><br><span class="line">    PR.&lt;x&gt; = PolynomialRing(Zmod(p))   </span><br><span class="line">    f = <span class="number">3</span> * x^<span class="number">3</span> - tr    </span><br><span class="line">    cs.append(<span class="built_in">int</span>(f.roots()[<span class="number">0</span>][<span class="number">0</span>]))    </span><br><span class="line">    ns.append(p)</span><br><span class="line">m = crt(cs, ns)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><p>用CRT的思想就是将一个大问题拆分成几个小问题，然后求解出更易求得的小问题，再用CRT算法求出原问题的解，学到了</p><h1 id="4bian"><a href="#4bian" class="headerlink" title="4bian"></a>4bian</h1><p>这一题e=17，每次nc后n随机给出，n还是满足易分解的特点；</p><p>这次没有给出矩阵B的生成方式，但是通关trace(I)=88可以判断出矩阵的阶数是88；</p><p>但是得到的trace(B)=trace(C)=0，测试后发现<script type="math/tex">trace(CB^{-17})!=0</script>，所以就转换到3bian上了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">3517510500012578106622165513758529071479627734667631280414059054641298876493975288768988113516424615888881460323558373</span></span><br><span class="line">e = <span class="number">17</span></span><br><span class="line"></span><br><span class="line">c=(<span class="number">1085260800784001954133584897165283180613148497110186223344717673152088774523221770328958058661702434339964578373746248</span>*inverse_mod(<span class="number">88</span>,n))%n</span><br><span class="line">phi=euler_phi(n)</span><br><span class="line">d=inverse_mod(e,phi)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c,d,n)))</span><br></pre></td></tr></table></figure><h2 id="出题人的WP"><a href="#出题人的WP" class="headerlink" title="出题人的WP"></a>出题人的WP</h2><p><img src="/images/%E5%90%83%E7%93%9C%E6%9D%AF/4bian-16301230564112.png" alt="4bian"></p><p>思路是试出使得C的迹不为0的幂次，然后使用相关明文攻击进行多项式辗转相除，构造拿到密文c。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">n = <span class="number">3525391383893454949178974275545607641708362073574956727334904966529494223283130893750994940957609615705033001171886177</span></span><br><span class="line">tr1 = <span class="number">3049270810698445654099605477449981251458767119860329568250296940497378143674701051415025737368773161813012045690902750</span></span><br><span class="line">tr2 = <span class="number">2188079608695802322451864004898125123944812594307497345389217291001509103650388567869655694926044170369531992486933204</span></span><br><span class="line"></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f1 = <span class="number">12</span> * x^<span class="number">12</span> - tr1</span><br><span class="line">f2 = <span class="number">49</span> * x^<span class="number">49</span> - tr2</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compositeModulusGCD</span>(<span class="params">a, b</span>):</span>    </span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>):        </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(-a.monic().coefficients()[<span class="number">0</span>])    </span><br><span class="line">    <span class="keyword">else</span>:        </span><br><span class="line">        <span class="keyword">return</span> compositeModulusGCD(b, a % b)</span><br><span class="line">c = compositeModulusGCD(f1, f2)</span><br><span class="line">e = <span class="number">17</span></span><br><span class="line">d = inverse_mod(e, euler_phi(n))</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h1 id="5bian"><a href="#5bian" class="headerlink" title="5bian"></a>5bian</h1><p>在4bian的基础上，使得每一个操作只能使用一次；</p><p>但是trace(C)不为0，因此找到trace(B)不为0的一组，由<script type="math/tex">trace(C)=m^etrace(B)</script>，直接拿到c</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">3292011909327659421775049456711303402369135799358104929999970787062175640424891481702884769338853356800690265327619267</span></span><br><span class="line"></span><br><span class="line">e = <span class="number">0x1337</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#c=(1085260800784001954133584897165283180613148497110186223344717673152088774523221770328958058661702434339964578373746248*inverse_mod(88,n))%n</span></span><br><span class="line">c=<span class="number">2507485887326570401463415497945317383847101547433009173857509227786381170695740614311577886312431809984908609722898546</span></span><br><span class="line">phi=euler_phi(n)</span><br><span class="line">d=inverse_mod(e,phi)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c,d,n)))</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;做了下闪电五连鞭，题出的很有意思，春哥从国外比赛扒的题（&lt;a href=&quot;https://github.com/BCACTF/bcactf-2.0&quot;&gt;BCACTF&lt;/a&gt;）,难度不大，结合了RSA和相似矩阵&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://sh1k4ku.github.io/categories/CTF/"/>
    
    
    <category term="RSA" scheme="http://sh1k4ku.github.io/tags/RSA/"/>
    
    <category term="matrix" scheme="http://sh1k4ku.github.io/tags/matrix/"/>
    
  </entry>
  
  <entry>
    <title>做题随记</title>
    <link href="http://sh1k4ku.github.io/2021/08/11/2021-8-11-%E5%81%9A%E9%A2%98%E9%9A%8F%E8%AE%B0/"/>
    <id>http://sh1k4ku.github.io/2021/08/11/2021-8-11-%E5%81%9A%E9%A2%98%E9%9A%8F%E8%AE%B0/</id>
    <published>2021-08-11T10:00:00.000Z</published>
    <updated>2021-08-18T07:41:34.761Z</updated>
    
    <content type="html"><![CDATA[<p>一道浮点位数很高的题目。。</p><span id="more"></span><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> *</span><br><span class="line">getcontext().prec = <span class="number">300</span> <span class="comment">#给定精确度为300位</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pi</span>():</span><span class="comment">#生成三百位数的pi,小数点后299位</span></span><br><span class="line">    lasts, t, s, n, na, d, da = <span class="number">0</span>, Decimal(<span class="number">3</span>), <span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">24</span></span><br><span class="line">    <span class="keyword">while</span> s != lasts:</span><br><span class="line">        lasts = s</span><br><span class="line">        n, na = n + na, na + <span class="number">8</span></span><br><span class="line">        d, da = d + da, da + <span class="number">32</span></span><br><span class="line">        t = (t * n) / d</span><br><span class="line">        s += t</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sin</span>(<span class="params">x</span>):</span></span><br><span class="line">    x = Decimal(x) % pi()</span><br><span class="line">    p, factor = <span class="number">0</span>, x</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>):<span class="comment">#sinx的泰勒展开</span></span><br><span class="line">        p += factor</span><br><span class="line">        factor *= - (x ** <span class="number">2</span>) / ((<span class="number">2</span> * n + <span class="number">2</span>) * (<span class="number">2</span> * n + <span class="number">3</span>))</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">int</span>.from_bytes(<span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read(), byteorder=<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span>(flag &lt; <span class="number">2</span> ** <span class="number">500</span>)</span><br><span class="line"><span class="built_in">print</span>(sin(flag))</span><br><span class="line"><span class="comment"># 0.0244671923862258387777329311304061726117292338164472101939417405767980930400528701470775326212479053586551379126483335032568358369085951301715103743247208229702075426052832758137520953914256336461357368653604728080035204833015365117280775229337006339154544638317547072102876405128588259546493517773166</span></span><br><span class="line"><span class="comment">#实际上这个结果是小数点后301位。。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>pi()函数用一个不知道是什么的算法生成了300位（小数点后299位）的Π，sin(x)函数用泰勒展开到第9999轮来计算sinx的结果（反正对300位的结果来说绰绰有余了），然后给出了sin(flag)的结果，是小数点后301位的。之前强网杯的ezmath也是用高精度的浮点数，并且也用了e^x的泰勒展开。</p><h1 id="尝试1"><a href="#尝试1" class="headerlink" title="尝试1"></a>尝试1</h1><p>既然加密是用sinx的泰勒展开，最初想到用arcsin的展开式去求回去</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">double_factorial</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">__import__</span>(<span class="string">&quot;functools&quot;</span>).reduce(<span class="keyword">lambda</span> x, y: x * y, <span class="built_in">range</span>(n, <span class="number">0</span>, -<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">arcsin</span>(<span class="params">x</span>):</span></span><br><span class="line">    x = Decimal(x) % pi()</span><br><span class="line">    p = x</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">3000</span>):</span><br><span class="line">        f=x</span><br><span class="line">        p+=double_factorial(<span class="number">2</span>*i-<span class="number">1</span>)*(f**(<span class="number">2</span>*i+<span class="number">1</span>))/((<span class="number">2</span>*i+<span class="number">1</span>)*double_factorial(<span class="number">2</span>*i))</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"><span class="comment">#0.0244696342317182955380167878859997878648849860507225686198324843880327826384968171815366236530238829279631100698854243103679784022302933149263781311340548493687767140548481414565508236688055024007324091848224931595200235667864586900877342501435623376419548532684797634337279346936509642695145952284863</span></span><br></pre></td></tr></table></figure><p>这个结果sin还原回去最后一位和结果不同，猜一位就能得到正确的余数</p><h1 id="尝试2"><a href="#尝试2" class="headerlink" title="尝试2"></a>尝试2</h1><p>牛顿法也能求根，吴师傅爆了3个小时才爆出来。。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"></span><br><span class="line">getcontext().prec = <span class="number">300</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sin</span>(<span class="params">x</span>):</span></span><br><span class="line">    p, factor = <span class="number">0</span>, x</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>):  <span class="comment"># 感觉像泰勒</span></span><br><span class="line">        p += factor</span><br><span class="line">        factor *= - (x ** <span class="number">2</span>) / ((<span class="number">2</span> * n + <span class="number">2</span>) * (<span class="number">2</span> * n + <span class="number">3</span>))</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">l = Decimal(<span class="number">0</span>)</span><br><span class="line">r = Decimal(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">des = Decimal(</span><br><span class="line">    <span class="string">&#x27;0.0244671923862258387777329311304061726117292338164472101939417405767980930400528701470775326212479053586551379126&#x27;</span></span><br><span class="line">    <span class="string">&#x27;483335032568358369085951301715103743247208229702075426052832758137520953914256336461357368653604728080035204833015&#x27;</span></span><br><span class="line">    <span class="string">&#x27;365117280775229337006339154544638317547072102876405128588259546493517773166&#x27;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    mid2 = (l + r) / <span class="number">2</span></span><br><span class="line">    mid1 = (l + mid2) / <span class="number">2</span></span><br><span class="line">    mid3 = (mid2 + r) / <span class="number">2</span></span><br><span class="line">    p = multiprocessing.Pool(<span class="number">3</span>)</span><br><span class="line">    res = [p.apply_async(sin, args=(mid1,)), p.apply_async(sin, args=(mid2,)), p.apply_async(sin, args=(mid3,))]</span><br><span class="line">    p.close()</span><br><span class="line">    p.join()</span><br><span class="line">    values = [i.get() <span class="keyword">for</span> i <span class="keyword">in</span> res]</span><br><span class="line">    <span class="keyword">if</span> des &lt; values[<span class="number">0</span>]:</span><br><span class="line">        r = mid1</span><br><span class="line">    <span class="keyword">elif</span> values[<span class="number">0</span>] &lt; des &lt; values[<span class="number">1</span>]:</span><br><span class="line">        l = mid1</span><br><span class="line">        r = mid2</span><br><span class="line">    <span class="keyword">elif</span> values[<span class="number">1</span>] &lt; des &lt; values[<span class="number">2</span>]:</span><br><span class="line">        l = mid2</span><br><span class="line">        r = mid3</span><br><span class="line">    <span class="keyword">elif</span> values[<span class="number">2</span>] &lt; des:</span><br><span class="line">        l = mid3</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;l=&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(l)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;r=&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(r)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;sin(x)=&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(values[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"><span class="built_in">print</span>(r)</span><br><span class="line"><span class="built_in">print</span>(mid1)</span><br><span class="line"><span class="built_in">print</span>(mid2)</span><br><span class="line"><span class="built_in">print</span>(mid3)</span><br><span class="line"><span class="built_in">print</span>(values[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(values[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(values[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#0.0244696342317182955380167878859997878648849860507225686198324843880327826384968171815366236530238829279631100698854243103679784022302933149263781311340548493687767140548481414565508236688055024007324091848224931595200235667864586900877342501435623376419548532684797634337279346936509642695145952284864</span></span><br></pre></td></tr></table></figure><p>这个值用sin反展开回去和结果是一样的，nice，所以现在得到了flag和pi求余的结果了。</p><p>接下来是怎么求flag：</p><script type="math/tex; mode=display">∵n\%pi=x\\∴n=x+m*pi</script><p>因为n是整数，所以可以爆破，但是flag的范围太大了，感觉不太现实。</p><p>还有一个想法：利用n是整数这一点，x和pi都有小数部分，可以转换成同余方程：</p><script type="math/tex; mode=display">例如当精度是2的时候，3.14*m+0.02=n位整数\\∴14*m\%100=98...类推到300位也是如此</script><p>但是最后算出来的m大小远超2**500，所以没能做出来。</p><p>对于这一题还有个疑问，题目给的结果小数点后有301位的，但是pi小数点后只有299位，这样用原始的pi是不可能出解的（试过将pi也增加到301位，但也没出）。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;一道浮点位数很高的题目。。&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://sh1k4ku.github.io/categories/CTF/"/>
    
    
    <category term="Crypto" scheme="http://sh1k4ku.github.io/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>一……二……开门！</title>
    <link href="http://sh1k4ku.github.io/2021/07/28/%E4%B8%80%E2%80%A6%E2%80%A6%E4%BA%8C%E2%80%A6%E2%80%A6%E5%BC%80%E9%97%A8%EF%BC%81/"/>
    <id>http://sh1k4ku.github.io/2021/07/28/%E4%B8%80%E2%80%A6%E2%80%A6%E4%BA%8C%E2%80%A6%E2%80%A6%E5%BC%80%E9%97%A8%EF%BC%81/</id>
    <published>2021-07-28T08:37:40.000Z</published>
    <updated>2021-08-16T09:29:28.860Z</updated>
    
    <content type="html"><![CDATA[<p>CTFshow上的新题，搞了一天</p><span id="more"></span><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> door_sum <span class="keyword">import</span> door_sum</span><br><span class="line"></span><br><span class="line"><span class="comment"># door_sum(l, d, n): calculate the sum of an arithmetic sequence</span></span><br><span class="line"><span class="comment"># with `l` being the first number, `d` being the common difference,</span></span><br><span class="line"><span class="comment"># and `n` being the number of terms</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Sanity check:</span></span><br><span class="line"><span class="keyword">assert</span> door_sum(<span class="number">1</span>, <span class="number">1</span>, <span class="number">100</span>) == <span class="number">5050</span></span><br><span class="line"></span><br><span class="line">WELCOME = <span class="string">&#x27;&#x27;&#x27;HELLO!</span></span><br><span class="line"><span class="string">Open the door, and I&#x27;ll show you my flag!</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="built_in">print</span>(WELCOME)</span><br><span class="line">n_1 = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;n_1 = &#x27;</span>))</span><br><span class="line">n_2 = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;n_2 = &#x27;</span>))</span><br><span class="line"><span class="keyword">if</span> (n_1 &gt; <span class="number">2</span> ** <span class="number">0x1337</span> <span class="keyword">and</span> n_2 &gt; <span class="number">2</span> ** <span class="number">0x1337</span> <span class="keyword">and</span> door_sum(<span class="number">1</span>, <span class="number">1</span>, n_1) == <span class="number">0x1337</span> * door_sum(<span class="number">1</span>, <span class="number">2</span>, n_2)):</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;OKOK! YOU GOT THE FLAG:&#x27;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="built_in">print</span>(f.read())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Uh-Oh, the door is not opened...&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;NONONO!&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>door_sum可以写成等差数列的和</p><p>注意door_sum里的n是项数！！！</p><p>题目的要求是两个数均大于2**4919并且第一个数的数列和是第二个数列和的4919倍</p><script type="math/tex; mode=display">x_n=x_1+d(n-1)\\ S_n=\frac{x_1+x_n}{2}n=(\frac{d(n-1)+2x_1}{2})n=\frac{d(n^2-n)+2x_1n}{2}\\则S_{n1}=\frac{d_1(n_1^2-n_1)+2x_1n_1}{2}\\S_{n2}=\frac{d_2(n_2^2-n_2)+2x_1n_2}{2}\\已知S_{n1}=4919*S_{n2},且d_1=1,d_2=2,x_1=1\\则\frac{n_1^2+n_1}{2}=4919n_2^2\\ \sqrt{\frac{n_1^2+n_1}{9838}}=n2</script><p>走到这里发现走不通了，毕竟是要爆破的，对于这个数量级依旧很难出解。因为要加快爆破速度，了解到佩尔方程：</p><h2 id="佩尔方程"><a href="#佩尔方程" class="headerlink" title="佩尔方程"></a>佩尔方程</h2><script type="math/tex; mode=display">定义：形如x^2 − d y^2=1(d>1,且d不是完全平方数)\\要求第一类佩尔方程的解都是正整数解,也即( x , y ) , x > 0 , y > 0</script><p>显然方程有无数组解，如何求最小解？</p><script type="math/tex; mode=display">把方程化为x=\sqrt{1+dy^2}\\从y=1开始枚举，如果\sqrt{1+dy^2}是整数，那么此时(x,y)就是最小整数解(x_1,y_1)</script><p>如何得到所有的解？</p><p>迭代公式：</p><script type="math/tex; mode=display">x_n=x_{n-1}x_1+dy_{n-1}y_1\\y_n=x_{n-1}y_1+y_{n-1}x_1</script><p>但如果用这个公式求解，时间复杂度依旧是O(n)，当n很大时还是跑不出来，所以使用矩阵快速幂，以O(logn)的时间复杂度求解：</p><script type="math/tex; mode=display">\left[ \begin{matrix} x_n\\ y_n \end{matrix}  \right] \tag{2}=   \left[ \begin{matrix} x_1&d*y_1\\ y_1&x_1 \end{matrix}  \right]^{n-1}    \left[ \begin{matrix} x_1\\ y_1 \end{matrix}  \right]</script><h2 id="解"><a href="#解" class="headerlink" title="解"></a>解</h2><p>改变一下推法：</p><script type="math/tex; mode=display">\frac{n_1^2+n_1}{2}=4919n_2^2\\(n_1+\frac{1}{2})^2-\frac{1}{2}=9838n_2^2\\(2n_1+1)^2-4*9838n_2^2=1</script><p>得到了佩尔方程的表达式，之后使用连分数的性质计算得到了最小解：</p><script type="math/tex; mode=display">(x_1,y_1)=\\(2662019309411216232806345449321879270495478346383, 26838472360889124413883226557207387537524821524)</script><p>可以看到还是很小的（比起2^0x1337)</p><p>完整代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_mini_solution</span>(<span class="params">d</span>):</span></span><br><span class="line">    m=<span class="built_in">int</span>(d**<span class="number">0.5</span>)</span><br><span class="line">    i=<span class="number">0</span></span><br><span class="line">    a=[]</span><br><span class="line">    a.append(m)</span><br><span class="line">    i+=<span class="number">1</span></span><br><span class="line">    b=m</span><br><span class="line">    c=<span class="number">1</span></span><br><span class="line">    sq=d**<span class="number">0.5</span></span><br><span class="line">    <span class="keyword">while</span>(a[i-<span class="number">1</span>]!=<span class="number">2</span>*a[<span class="number">0</span>]):</span><br><span class="line">        c=(d-b*b)/c</span><br><span class="line">        tmp=(sq+b)/c</span><br><span class="line">        a.append(<span class="built_in">int</span>(tmp))</span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line">        b=a[i-<span class="number">1</span>]*c-b</span><br><span class="line">    <span class="keyword">del</span> a[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    p=[m]</span><br><span class="line">    q=[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(a)):</span><br><span class="line">        <span class="keyword">if</span> j==<span class="number">1</span>:</span><br><span class="line">            p.append(a[j]*p[<span class="number">0</span>]+<span class="number">1</span>)</span><br><span class="line">            q.append(a[j]*q[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            p.append(a[j]*p[j-<span class="number">1</span>]+p[j-<span class="number">2</span>])</span><br><span class="line">            q.append(a[j]*q[j-<span class="number">1</span>]+q[j-<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(a)%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> p[-<span class="number">1</span>],q[-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">         <span class="keyword">return</span> <span class="number">2</span>*p[-<span class="number">1</span>]**<span class="number">2</span>,<span class="number">2</span>*p[-<span class="number">1</span>]*q[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mulMatrix</span>(<span class="params">x,y</span>):</span>     <span class="comment">#二阶矩阵乘法</span></span><br><span class="line">    ans = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]<span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">                ans[i][j] += x[i][k] * y[k][j]</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quickMatrix</span>(<span class="params">m,n</span>):</span></span><br><span class="line">    E = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]<span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]        <span class="comment">#先定义一个单位矩阵</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">        E[i][i] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(n):</span><br><span class="line">        <span class="keyword">if</span> n % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">            E = mulMatrix(E,m)</span><br><span class="line">        m = mulMatrix(m,m)</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> E</span><br><span class="line"></span><br><span class="line">d=<span class="number">9838</span>*<span class="number">4</span></span><br><span class="line">x1,y1=find_mini_solution(d)</span><br><span class="line"><span class="built_in">print</span>((x1,y1))</span><br><span class="line">basis_matrix=[[x1,d*y1],[y1,x1]]</span><br><span class="line"></span><br><span class="line">cnt=<span class="number">2</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    tmp=quickMatrix(basis_matrix,cnt)</span><br><span class="line">    xn=tmp[<span class="number">0</span>][<span class="number">0</span>]*x1+tmp[<span class="number">0</span>][<span class="number">1</span>]*y1</span><br><span class="line">    yn=tmp[<span class="number">1</span>][<span class="number">0</span>]*x1+tmp[<span class="number">1</span>][<span class="number">1</span>]*y1</span><br><span class="line">    <span class="keyword">if</span> xn &gt;<span class="number">2</span> ** <span class="number">0x1337</span> <span class="keyword">and</span> yn &gt; <span class="number">2</span> ** <span class="number">0x1337</span> <span class="keyword">and</span> xn**<span class="number">2</span>-d*yn**<span class="number">2</span>==<span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(cnt)</span><br><span class="line">        <span class="built_in">print</span>((xn-<span class="number">1</span>)//<span class="number">2</span>)</span><br><span class="line">        <span class="built_in">print</span>(yn)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    cnt+=<span class="number">1</span></span><br></pre></td></tr></table></figure><p>感觉用sage会方便很多0.0</p><p>sage果然方便，连分数有内置的函数，补上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def solve_pell(N, numTry = 100):</span><br><span class="line">cf= continued_fraction(sqrt(N))</span><br><span class="line">for i in range(numTry):</span><br><span class="line">denom = cf.denominator(i)</span><br><span class="line">numer = cf.numerator(i)</span><br><span class="line">if numer^2-N*denom^2 == 1:</span><br><span class="line">return numer,denom</span><br><span class="line">print(solve_pell(9838)) </span><br><span class="line">#(2662019309411216232806345449321879270495478346383, 26838472360889124413883226557207387537524821524)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;CTFshow上的新题，搞了一天&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://sh1k4ku.github.io/categories/CTF/"/>
    
    
    <category term="Crypto" scheme="http://sh1k4ku.github.io/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>lattice_learning</title>
    <link href="http://sh1k4ku.github.io/2021/07/27/lattice-learning/"/>
    <id>http://sh1k4ku.github.io/2021/07/27/lattice-learning/</id>
    <published>2021-07-27T08:51:43.000Z</published>
    <updated>2021-07-27T09:15:17.816Z</updated>
    
    <content type="html"><![CDATA[<p>有关格理论的学习记录。</p><span id="more"></span><h1 id="格的定义"><a href="#格的定义" class="headerlink" title="格的定义"></a>格的定义</h1><p>格的定义可以从向量空间引申出来：</p><pre><code>一组线性无关的的向量v1，v2，...，vn，它们的线性组合a1v1+a2v2+...+anvn可以表示一个空间，如果a1,a2，...，an全为整数，则生成了一个格L。则这组向量称为格的基，向量个数称为格的维数。</code></pre><h2 id="基础区域"><a href="#基础区域" class="headerlink" title="基础区域"></a>基础区域</h2><p>格的基础区域为即当a1，an，,,,，an为0或1组成的一个区域。格中任意一个向量可以由格的基础区域和唯一格外的一个向量表示。基础区域是格很重要的概念。</p><h2 id="格的行列式"><a href="#格的行列式" class="headerlink" title="格的行列式"></a>格的行列式</h2><p>格的行列式就是基础区域的n维体积，记作：</p><script type="math/tex; mode=display">det(L)</script><h2 id="基的转换"><a href="#基的转换" class="headerlink" title="基的转换"></a>基的转换</h2><p>设以v1，v2，…，vn为行向量构成的n阶矩阵为A，某一行列式等于1的n阶矩阵为    U，则矩阵B=UA中的行向量也是格L的一组基。<br>从<strong>线性变换</strong>的本质来看，线性变换是对空间进行伸缩或者翻转的操作（可惜大多数高校的非数学专业是不会讲这些的，具体可以看b站3b1b的搬运，有关线性代数的本质的介绍，可以给我们很直观的理解），由于U的行列式为1，那么变换后的基础区域体积不变。</p><h2 id="格的两大难题"><a href="#格的两大难题" class="headerlink" title="格的两大难题"></a>格的两大难题</h2><p>均为NP完全问题</p><h3 id="最短向量问题"><a href="#最短向量问题" class="headerlink" title="最短向量问题"></a>最短向量问题</h3><p>简称<strong>SVP</strong>，在格中寻找一个非零向量，使它的范数最小。</p><h3 id="最近向量问题"><a href="#最近向量问题" class="headerlink" title="最近向量问题"></a>最近向量问题</h3><p>简称<strong>CVP</strong>，给定一个不在格中的向量，找到格中一个向量使它最接近给定的向量，即欧几里得范数最小。</p><h1 id="重要定理"><a href="#重要定理" class="headerlink" title="重要定理"></a>重要定理</h1><h2 id="Hadamard不等式"><a href="#Hadamard不等式" class="headerlink" title="Hadamard不等式"></a>Hadamard不等式</h2><p>格L的基础区域为F，对于它任意一个基</p><script type="math/tex; mode=display">v_1,v_2,...,v_n</script><p>有：</p><script type="math/tex; mode=display">det(L)=vol(F)\leq||v_1||*||v_2||*...*||v_n||</script><p>基向量越接近正交，则上式越接近等式</p><h3 id="Hadamard比率"><a href="#Hadamard比率" class="headerlink" title="Hadamard比率"></a>Hadamard比率</h3><script type="math/tex; mode=display">H(L)=(\frac{det(L)}{||v_1||*||v_2||*...*||v_n||})^{1/n}</script><p>当这个值越接近1，则基越接近两两正交</p><h2 id="Hermite定理"><a href="#Hermite定理" class="headerlink" title="Hermite定理"></a>Hermite定理</h2><p>所有n维的格L都包含一个非0向量</p><script type="math/tex; mode=display">v\in L，满足||v||\leq\gamma_ndet(L)^{1/n}</script><p>对于给定的维度n</p><script type="math/tex; mode=display">Hermite常量\gamma_n是一个最小值，</script><p>它可以使所有n维格L都包含非零向量</p><script type="math/tex; mode=display">v\in L满足上式。</script><p>其中Hertmite常量</p><script type="math/tex; mode=display">\gamma_n满足：\frac{n}{2Πe}\leq\gamma_n\leq\frac{n}{Πe}</script><h2 id="Minkowski定理"><a href="#Minkowski定理" class="headerlink" title="Minkowski定理"></a>Minkowski定理</h2><script type="math/tex; mode=display">设L\subset R^n是一个n维的格，S\subset R^n是一个对称凸面集合，其体积满足：</script><script type="math/tex; mode=display">vol(S)>2^ndet(L)$</script><p>如果S满足封闭性，则上式等式成立。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;有关格理论的学习记录。&lt;/p&gt;</summary>
    
    
    
    <category term="Lattice" scheme="http://sh1k4ku.github.io/categories/Lattice/"/>
    
    
    <category term="Lattice" scheme="http://sh1k4ku.github.io/tags/Lattice/"/>
    
    <category term="Crypto" scheme="http://sh1k4ku.github.io/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>Hello Hexo</title>
    <link href="http://sh1k4ku.github.io/2021/07/26/Test/"/>
    <id>http://sh1k4ku.github.io/2021/07/26/Test/</id>
    <published>2021-07-26T09:43:59.903Z</published>
    <updated>2021-08-12T02:55:02.508Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hello-Hexo"><a href="#Hello-Hexo" class="headerlink" title="Hello Hexo"></a>Hello Hexo</h1><p>I’m sh1k4ku</p><span id="more"></span><p>回忆前几个月，自4月进入401后，大大小小也打了不少比赛，大部分的题都是没有解出的，每次自己也会很自责，但似乎又无能为力。</p><p>一开始的习惯不好，没有在赛后即使复现，当时想着之后学到一定程度了自然会做了，导致进步缓慢。</p><p>不久前才意识到这是大错特错的，所以开了此blog，欲改变自己的懒惰，不要拖队里师傅们的后腿。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Hello-Hexo&quot;&gt;&lt;a href=&quot;#Hello-Hexo&quot; class=&quot;headerlink&quot; title=&quot;Hello Hexo&quot;&gt;&lt;/a&gt;Hello Hexo&lt;/h1&gt;&lt;p&gt;I’m sh1k4ku&lt;/p&gt;</summary>
    
    
    
    <category term="hexo" scheme="http://sh1k4ku.github.io/categories/hexo/"/>
    
    
    <category term="-hexo" scheme="http://sh1k4ku.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>SCUCTF</title>
    <link href="http://sh1k4ku.github.io/2021/06/04/6.4SCUCTF/"/>
    <id>http://sh1k4ku.github.io/2021/06/04/6.4SCUCTF/</id>
    <published>2021-06-04T07:40:24.000Z</published>
    <updated>2021-07-27T09:07:21.118Z</updated>
    
    <content type="html"><![CDATA[<p>用以前的的博客测试一下</p><span id="more"></span><h1 id="贝斯手"><a href="#贝斯手" class="headerlink" title="贝斯手"></a>贝斯手</h1><p>题目暗示了是base家族，先后使用base64 32 long_to_bytes 85和58解密即可获得flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> base58</span><br><span class="line"></span><br><span class="line">cipher=<span class="string">&#x27;R1EzVElOQlRHSTNVSU5aVUdRNERNTlpWR0UyREVOS0dHWTJES01aVUlZMkRHTkJSR1JCVE9OUlhHNDNFSU5CWUdSRERNUUpXR00yVElOQlNHUTNUTU1aV0dBMkRPTkJSR1laVE9OSldHQTNES01SV0dZMkRLTVJXSU0zRE9OSlFHVTRETVJCVUdRWlVHTVpVR1VaVE9SQlhJUTJETz09PQ==&#x27;</span></span><br><span class="line"></span><br><span class="line">res=b64decode(cipher)</span><br><span class="line"></span><br><span class="line">res=b32decode(res)</span><br><span class="line"></span><br><span class="line">res=long_to_bytes(<span class="built_in">int</span>(res,<span class="number">16</span>))</span><br><span class="line"></span><br><span class="line">res=b85decode(res)</span><br><span class="line"></span><br><span class="line">res=base58.b58decode(res)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>flag：scuctf{M4ny_k1nds_0f_13a5e!}</strong></p><h1 id="crypto1"><a href="#crypto1" class="headerlink" title="crypto1"></a>crypto1</h1><p>预测随机数，有现成的库可以用。要将312个64位数拆成624个32位数，因为32位输出顺序是<strong>abcd</strong>,而64位的顺序是<strong>badc</strong>，所以要反过来取，注意还要填充，脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> randcrack <span class="keyword">import</span> RandCrack</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">&quot;./test&quot;</span>,<span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">rc=RandCrack()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">312</span>):</span><br><span class="line">    a=<span class="built_in">int</span>(f.readline())</span><br><span class="line">    a=<span class="built_in">bin</span>(a)[<span class="number">2</span>:].zfill(<span class="number">64</span>)</span><br><span class="line">    c=<span class="built_in">int</span>(<span class="string">&#x27;0b&#x27;</span>+a[:<span class="number">32</span>],<span class="number">2</span>)</span><br><span class="line">    b=<span class="built_in">int</span>(<span class="string">&#x27;0b&#x27;</span>+a[<span class="number">32</span>:],<span class="number">2</span>)</span><br><span class="line">    rc.submit(c)</span><br><span class="line">    rc.submit(b)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">res=rc.predict_getrandbits(<span class="number">128</span>)</span><br><span class="line">key1=(long_to_bytes(res))</span><br><span class="line"></span><br><span class="line">res=<span class="built_in">open</span>(<span class="string">&#x27;./out&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">aes = AES.new(key1, AES.MODE_CBC, <span class="string">b&quot;\x00&quot;</span>*<span class="number">16</span>)</span><br><span class="line">flag=aes1.decrypt(res)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>flag：scuctf{af0sd_f8}</strong></p><h1 id="crypto2"><a href="#crypto2" class="headerlink" title="crypto2"></a>crypto2</h1><p>简单的CopperSmith<br>p是512位的，x是128位，将x首元变为1，转化后p_是1019位的，未知低128位，那么用CopperSmith Method即可解决。得到的p再在模n下和2^ex相乘即可得到真正的p。附上脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;sage</span></span><br><span class="line"><span class="string">n = 85016144249518040150910227120120655178858680112497903474795846550337648959184474608344455198424753002209821827392389091448043545937173891641586356377876821641241033232828279439195610943286663032638048058568003136520988549470764306016674503217880123290623177055115638997384030786304744623796469032887028528817</span></span><br><span class="line"><span class="string">e = 65537</span></span><br><span class="line"><span class="string">c = 83724265903365973936178131138176403586796491037282811488797349096425411605088349291193550728134684573063610685342590513444340298881918101517014943046522979731970278182306111863948764449232289625176702192589838375986050458189860493609407060988207562417247647655585368569618561494059816502622854344519538215287</span></span><br><span class="line"><span class="string">pbar = 4450463823628350893648746241337847373556196959762621885713665365237037340874488165755826348254697529157574566792939002187459776672801308978738078688091668148118673194644809701286264701999481650571431714684293423463355990167658855533422964048092514208406515703766237697665676941598677911363439038209842058509</span></span><br><span class="line"><span class="string">kbits = 128</span></span><br><span class="line"><span class="string">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span></span><br><span class="line"><span class="string">f = x + pbar</span></span><br><span class="line"><span class="string">x0 = f.small_roots(X=2^kbits, beta=0.5)[0]  </span></span><br><span class="line"><span class="string">p = x0 + pbar</span></span><br><span class="line"><span class="string">print(p)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> nextprime</span><br><span class="line">leak=<span class="number">1145141920069</span></span><br><span class="line">n=   <span class="number">85016144249518040150910227120120655178858680112497903474795846550337648959184474608344455198424753002209821827392389091448043545937173891641586356377876821641241033232828279439195610943286663032638048058568003136520988549470764306016674503217880123290623177055115638997384030786304744623796469032887028528817</span></span><br><span class="line">c=   <span class="number">83724265903365973936178131138176403586796491037282811488797349096425411605088349291193550728134684573063610685342590513444340298881918101517014943046522979731970278182306111863948764449232289625176702192589838375986050458189860493609407060988207562417247647655585368569618561494059816502622854344519538215287</span></span><br><span class="line">pbar=<span class="number">4450463823628350893648746241337847373556196959762621885713665365237037340874488165755826348254697529157574566792939002187459776672801308978738078688091668148118673194644809701286264701999481650571431714684293423463355990167658855533422964048092514208406515703766237697665676941598677911363439038209842058509</span></span><br><span class="line">ex = <span class="number">384</span></span><br><span class="line">p_=<span class="number">4450463823628350893648746241337847373556196959762621885713665365237037340874488165755826348254697529157574566792939002187459776672801308978738078688091668148118673194644809701286264701999481650571431714684293423463355990167658855533422964048092514208406515703766237697896644308153471350247313227602240058029</span></span><br><span class="line">p=p_*<span class="number">2</span>**ex%n</span><br><span class="line">q=n//p</span><br><span class="line">phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d=gmpy2.invert(<span class="number">65537</span>,phi)</span><br><span class="line">m=gmpy2.powmod(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><p><strong>flag:scuctf{f05fe93d159b398fe25f280d94241261}</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;用以前的的博客测试一下&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://sh1k4ku.github.io/categories/CTF/"/>
    
    
    <category term="Crypto" scheme="http://sh1k4ku.github.io/tags/Crypto/"/>
    
  </entry>
  
</feed>
